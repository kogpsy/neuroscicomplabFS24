[
  {
    "objectID": "pages/chapters/uebung_3_plot.html",
    "href": "pages/chapters/uebung_3_plot.html",
    "title": "√úbung 3 - Plot",
    "section": "",
    "text": "Erstellen Sie einen Plot der Stroop Daten. Verwenden Sie dazu ggplot(). Alle Plots und der entsprechende Code werden in der Galerie auf der Kurshomepage anonym ver√∂ffentlicht."
  },
  {
    "objectID": "pages/chapters/uebung_3_plot.html#auftrag",
    "href": "pages/chapters/uebung_3_plot.html#auftrag",
    "title": "√úbung 3 - Plot",
    "section": "",
    "text": "Erstellen Sie einen Plot der Stroop Daten. Verwenden Sie dazu ggplot(). Alle Plots und der entsprechende Code werden in der Galerie auf der Kurshomepage anonym ver√∂ffentlicht."
  },
  {
    "objectID": "pages/chapters/uebung_3_plot.html#vorgehen",
    "href": "pages/chapters/uebung_3_plot.html#vorgehen",
    "title": "√úbung 3 - Plot",
    "section": "Vorgehen",
    "text": "Vorgehen\n\nSetup\n\nLaden Sie das R-Project Uebung3 herunter und entzippen Sie den Ordner.\n√Ñndern Sie den Namen der Datei nachname_vorname_plot.R, indem Sie Ihren Vor- und Nachnamen einsetzen.\n\nErstellen des Plots (mit folgenden Schritten):\n\n√ñffnen Sie die die Datei nachname_vorname_plot.R. Der Inhalt dieser Datei muss gleich aussehen, wie im Beispiel unten.\nDer Code auf von Zeile 1 bis Zeile 9 darf nicht ver√§ndert werden!\nF√ºgen Sie den Code f√ºr Ihre Abbildung ab Zeile 9 ein.\nDer eingef√ºgte Code muss die Abbildung erstellen (vgl. Zeile 9-12) und anzeigen (vgl. Zeile 12).\n\n\n\n# Code innerhalb der folgenden 2 Linien darf nicht ver√§ndert werden\n# ---------------------------------------------------------------------\nlibrary(tidyverse)\nd = read_csv('data/dataset_stroop_clean.csv')\n# ---------------------------------------------------------------------\n\n# Beginnen Sie hier mit Ihrem Code:\n\np = d |&gt;\n    ggplot(...) +\n    ...\np\n\n\nDer Plot muss Folgendes beinhalten:\n\nBeides, Rohdaten UND mind. 1 zusammenfassendes Mass(z.B. Mittelwert mit Standardabweichungen, Box-/Violinplot, etc.). TIPP: Mehrere Geoms k√∂nnen √ºbereinander gelegt werden.\nMind. 2 unterschiedliche Farben.\nBeschriftungen: Titel, Subtitel, Achsenbeschriftungen, (optional: Captions)\nDer Subtitel beinhaltet die Frage, welche der Plot beantwortet.\n\nEin Theme verwenden.\nOptional: Facets verwenden.\n\nHochladen Codefile auf Ilias unter √úbung 3 :\n\nGeben Sie die Datei nachname_vorname_plot.R (umbenannt mit Ihrem Vor- und Nachnamen) auf Ilias unter √úbung 3 ab."
  },
  {
    "objectID": "pages/chapters/uebung_3_plot.html#abgabetermine",
    "href": "pages/chapters/uebung_3_plot.html#abgabetermine",
    "title": "√úbung 3 - Plot",
    "section": "Abgabetermine",
    "text": "Abgabetermine\nGruppe Montag: 28. April 2024 23:55\nGruppe Mittwoch: 30. April 2024 23:55\n\n\n\n\n\n\nWichtig\n\n\n\nIhr Plot und der dazugeh√∂rige Code wird in der Galerie anonym ver√∂ffentlich. Deshalb ist es wichtig, dass die oben aufgelisteten Voraussetzungen erf√ºllt sind.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBei Problemen, fragen Sie bitte an der n√§chsten Veranstaltung nach."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html",
    "href": "pages/chapters/uebung_1_experiment.html",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "",
    "text": "F√ºhren Sie selbst und mit 2 weiteren Personen das Stroop und das Random Dot Experiment durch. Laden Sie anschliessend die 6 Datens√§tze auf Ilias hoch. Die beiden Experimente dauern zusammen ca. 30 Minuten (auch abh√§ngig von den Versuchspersonen).\nWichtig: Die erhobenen Daten werden wir dann in den kommenden Sitzungen verwenden, achten Sie also auf gute Datenqualit√§t."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#auftrag",
    "href": "pages/chapters/uebung_1_experiment.html#auftrag",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "",
    "text": "F√ºhren Sie selbst und mit 2 weiteren Personen das Stroop und das Random Dot Experiment durch. Laden Sie anschliessend die 6 Datens√§tze auf Ilias hoch. Die beiden Experimente dauern zusammen ca. 30 Minuten (auch abh√§ngig von den Versuchspersonen).\nWichtig: Die erhobenen Daten werden wir dann in den kommenden Sitzungen verwenden, achten Sie also auf gute Datenqualit√§t."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#vorgehen",
    "href": "pages/chapters/uebung_1_experiment.html#vorgehen",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "Vorgehen",
    "text": "Vorgehen\n\nLaden Sie die 2 Experimente herunter und testen Sie, ob Sie einwandfrei laufen. Die Experimente befinden sich auf Github. Sie k√∂nnen sie unter den untenstehenden Links downloaden. Klicken Sie daf√ºr auf den ZIP-Ordner, und dann auf View Raw oder auf das Icon mit ... und dort auf Download. Sie m√ºssen das File dann evtl. entzippen, bevor Sie das Experiment starten k√∂nnen. Bei Problemen finden Sie unten einen Abschnitt Troubleshooting. Wenn das nichts hilft, k√∂nnen Sie sich bei der n√§chsten Veranstaltung an uns wenden.\n\nStroop Experiment\nRandom Dot Experiment\n\nF√ºhren Sie selber die beiden Experimente durch.\n\nStellen Sie sicher, dass hier ein vollst√§ndiger Datensatz abgespeichert wird. Testen Sie erst dann zus√§tzliche Personen.\n\nLassen Sie 2 weitere Personen die beiden Experimente ausf√ºhren (jede Person soll beide Experimente ausf√ºhren).\n\nDie Personen m√ºssen zwischen 18 und 60 Jahren alt sein.\nDie Personen sollten eine normale oder korrigiert-zu-normale (Brille/Kontaktlinsen) Sehst√§rke haben.\nKeine Mitstudierenden aus dem Computerlab testen.\nAchten Sie darauf, dass die Personen die Aufgaben unabgelenkt l√∂sen k√∂nnen.\n\nLaden Sie die 6 Datens√§tze auf ILIAS hoch.\n\nZippen Sie bitte die 6 .csv-Datens√§tze vor dem Hochladen zu einem (!) Ordner.\nLaden Sie den ZIP-Ordner auf Ilias unter √úbung 1 hoch."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#abgabetermine",
    "href": "pages/chapters/uebung_1_experiment.html#abgabetermine",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "Abgabetermine",
    "text": "Abgabetermine\nGruppe Montag: 21. M√§rz 2024 23:55\nGruppe Mittwoch: 23. M√§rz 2024 23:55"
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#trouble-shooting",
    "href": "pages/chapters/uebung_1_experiment.html#trouble-shooting",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "Trouble shooting",
    "text": "Trouble shooting\nBitte Fehlermeldung im Fenster genau durchlesen. Dort finden Sie Hinweise darauf, was schief gelaufen ist.\nDas Experiment startet nicht.\n\nUnter Einstellungen (Radsymbol) den Reiter Basic ausw√§hlen. Bei Use PsychoPy version die neuste PsychoPy Version ausw√§hlen.\n\nDas Experiment startet zwar, der Bildschirm ist aber dann einfach f√ºr eine kurze Zeit grau und das Fenster schliesst sich wieder.\n\nZugriffsrechte gegeben? (Bei Windows: Als Administrator starten, bei MacOS: Zugriffsrechte erteilen)\nUnter Einstellungen (Radsymbol) den Reiter Input ausw√§hlen. Keyboard Backend auf PsychToolbox statt ioHub setzen."
  },
  {
    "objectID": "pages/chapters/setup.html",
    "href": "pages/chapters/setup.html",
    "title": "Setup",
    "section": "",
    "text": "Wir haben uns entschieden, in dieser Veranstaltung Python zu verwenden, um ein Experiment zu erstellen, und R f√ºr die Analyse der Daten. Matlab wird nicht verwendet; einerseits da es kommerziell ist, andererseits weil es aus unserer Sicht nicht die beste Wahl f√ºr die Analyse von Verhaltensdaten ist. Ausserdem ist es schon schwierig genug, eine Programmiersprache zu lernen, ohne gleichzeitig noch zwei weitere zu lernen."
  },
  {
    "objectID": "pages/chapters/setup.html#in-dieser-veranstaltung-verwendete-software",
    "href": "pages/chapters/setup.html#in-dieser-veranstaltung-verwendete-software",
    "title": "Setup",
    "section": "",
    "text": "Wir haben uns entschieden, in dieser Veranstaltung Python zu verwenden, um ein Experiment zu erstellen, und R f√ºr die Analyse der Daten. Matlab wird nicht verwendet; einerseits da es kommerziell ist, andererseits weil es aus unserer Sicht nicht die beste Wahl f√ºr die Analyse von Verhaltensdaten ist. Ausserdem ist es schon schwierig genug, eine Programmiersprache zu lernen, ohne gleichzeitig noch zwei weitere zu lernen."
  },
  {
    "objectID": "pages/chapters/setup.html#python",
    "href": "pages/chapters/setup.html#python",
    "title": "Setup",
    "section": "Python",
    "text": "Python\nWenn Sie Python suf Ihrem Rechner installieren wollen, k√∂nnen Sie entweder den offiziellen Installer https://www.python.org/downloads/ downloaden, oder die Anaconda Distribution https://www.anaconda.com/products/distribution verwenden. Die Anaconda Distribution ist eine Python-Distribution, die viele n√ºtzliche Pakete enth√§lt, die f√ºr wissenschaftliches Rechnen und Datenanalyse verwendet werden. Wenn man tats√§chlich mit Python arbeiten will, empfiehlt es sich, die Anaconda Distribution zu benutzen. Wir werden in dieser Veranstaltung Python benutzen, um ein Experiment zu programmieren. Daf√ºr reicht es aus, den PsychoPy Installer zu verwenden; diesen finden Sie unter diesem Link: PsychoPy. PsychoPy ist ein Python-basiertes Tool, mit dem sich sowohl in einer grafischen Benutzeroberfl√§che (GUI) als auch mit Python Code Experimente programmieren lassen."
  },
  {
    "objectID": "pages/chapters/setup.html#r",
    "href": "pages/chapters/setup.html#r",
    "title": "Setup",
    "section": "R",
    "text": "R\nAb der vierten Sitzung werden wir viel mit R arbeiten, um Daten aufzubereiten und grafisch darzustellen. Daf√ºr m√ºssen Sie die aktuelle Version von R installieren. Diese ist zurzeit R 4.3.2, und kann unter folgender URL geladen werden:\nR üëâ https://cloud.r-project.org/\nWir empfehlen f√ºr die Arbeit mit R die RStudio IDE zu verwenden. Diese ist kostenlos und kann unter folgender URL heruntergeladen werden:\nRStudio üëâ https://www.rstudio.com/products/rstudio/download/#download"
  },
  {
    "objectID": "pages/chapters/setup.html#jasp",
    "href": "pages/chapters/setup.html#jasp",
    "title": "Setup",
    "section": "JASP",
    "text": "JASP\nEinen Teil der Bayesianischen Analysen werden wir mit JASP durchf√ºhren. Die aktuelle Version von JASP ist 0.18.3 und kann unter folgender URL heruntergeladen werden:\nJASP üëâ https://jasp-stats.org/download/"
  },
  {
    "objectID": "pages/chapters/random_dot_experiment.html",
    "href": "pages/chapters/random_dot_experiment.html",
    "title": "Random Dot Paradigma",
    "section": "",
    "text": "Jeden Tag treffen wir Tausende von kleinen Entscheidungen, meistens unter gewissem Zeitdruck. Viele davon sind trivial (z. B. welches Paar Socken man anzieht) und automatisch (z. B. ob man die Espresso- oder Lungo-Taste auf der Kaffeemaschine dr√ºckt). Die meisten Entscheidungen im wirklichen Leben setzen sich eigentlich aus zwei Entscheidungen zusammen: Einerseits der Entscheidung, mit dem Abw√§gen aufzuh√∂ren und aufgrund des aktuellen Wissenstandes zu handeln. Andererseits die Wahl oder Entscheidungshandlung selbst. Dieser sequentielle Charakter der Entscheidungsfindung ist eine grundlegende Eigenschaft des menschlichen Nervensystems und spiegelt seine Unf√§higkeit wieder, Informationen sofort zu verarbeiten.\nPerzeptuelle Entscheidungen sind Entscheidungen, welche auf der Wahrnehmung, Einordnung und Integration von Sinnesreizen beruhen. Um beispielsweise eine Strasse sicher √ºberqueren zu k√∂nnen, m√ºssen wir mittels den Sinnesinformationen der Augen und Ohren sowie der Verarbeitung dieser Reize einsch√§tzen mit welcher Geschwindigkeit ein herannahendes Auto unterwegs ist und ob wir lieber abwarten bis es vorbeigefahren ist. Innerhalb der Neurowissenschaften wird perceptual decision making untersucht, um die neuronalen Schaltkreise welche Wahrnehmungssignale kodieren, speichern und analysieren zu verstehen und mit beobachtbarem Verhalten in Verbindung zu bringen. Von Interesse ist zum Beispiel wie die Entscheidung ausf√§llt, wenn die sensorischen Daten undeutlich oder sogar widerspr√ºchlich sind. Besonders spannend ist auch wie Vorwissen (prior knowledge) auf das Entscheidungsverhalten einwirkt.\n\nPerceptual decision making is the process by which sensory information is used to guide behavior toward the external world. This involves gathering information through the senses, evaluating and integrating it according to the current goals and internal state of the subject, and using it to produce motor responses. In contrast to choice behavior and decision making in general (‚Ä¶) perceptual decision making emphasizes the role of sensory information in directing behavior (‚Ä¶) within neuroscience, the goal is to reveal the computational mechanisms whereby neural circuits encode, store, and analyze perceptual signals; combine them with other behaviorally relevant information; and use them to resolve conflicts between competing motor plans. (Hauser and Salinas (2014))\n\nObwohl das Treffen von Entscheidungen f√ºr uns etwas sehr Vertrautes ist, ist das Wissen darum, wie das Gehirn diese Entscheidungsaufgaben l√∂st noch sehr begrenzt. Eine einzelne Entscheidung kann schon sehr komplex sein. Um die Dynamik der Entscheidungsfindung zu verstehen, konzentrieren sich die meisten Studien deshalb auf einfache, wiederholbare Wahlprobleme mit nur zwei (bin√§ren) Antwortm√∂glichkeiten. Ein typisches Paradigma in neurowissenschaftlichen Studien ist das random-dot motion paradigm. Hierbei muss eine Person entscheiden in welche Richtung sich eine Punktewolke bewegt.\n\nDas Experiment Bias in the brain von Mulder et al. (2012) ist eine Reaktionszeit (RT) Version eines random-dot motion direction discrimination task. Sie k√∂nnen hier nachlesen, wie der Task verwendet wurde um den Einfluss von Vorwissen auf neuronale Aktivit√§t im Gehirn mittels fMRI zu untersuchen.\n\n\n\n\n\n\n\nHands-on: Random Dot Experiment\n\n\n\nLesen Sie zuerst hier eine kurze Einf√ºhrung in das Random Dot Paradigma.\nBesprechen Sie dann in kleinen Gruppen folgende Fragen:\n\nF√ºr welche neurowissenschaftlichen Forschungsfragen eignet sich dieser Task? Mit welchen weiteren Methoden (fMRI, EEG, Hirnstimulation, etc.) liesse er sich kombinieren und was k√∂nnte man dabei lernen? Welche Patientengruppen zeigen auff√§llige Antworten in diesem Task?\nWelche ‚ÄúElemente‚Äù des Experiments konnten Sie identifizieren?\nWelche Stimuluseigenschaften sind relevant f√ºr das Experiment? Was macht die Aufgabe einfach? Was macht sie schwieriger?\nWelche Antwortm√∂glichkeiten haben die Versuchspersonen?\nWelche Bedingungen w√ºrden Sie vergleichen?\nWelche Stimuluseigenschaften sind wichtig, damit Sie die Resultate nicht verf√§lschen oder auf was muss geachtet werden bei der Stimulusauswahl?\nWas denken Sie, misst der Task was er soll? Wie werden die Verhaltensdaten Ihrer Sch√§tzung nach aussehen?\n\nTipp: Schauen Sie sich diese Stimulusoption hier an.\n[~10 Minuten]\n\n\n\n\nIn unserem Experiment l√∂sen die Versuchspersonen einen Random Dot Task zweimal (in zwei Bl√∂cken). In jedem Block erhalten sie eine andere Instruktion, die Aufgabe bleibt jedoch dieselbe: Sie m√ºssen herausfinden in welche Richtung sich die Punktewolke bewegt. In einem Block werden sie instruiert die Aufgabe m√∂glichst schnell zu l√∂sen. Im anderen Block werden sie instruiert die Aufgabe m√∂glichst richtig zu l√∂sen. Wir werden dann analysieren, wie sich das Entscheidungsverhalten von Menschen ver√§ndert, je nachdem wie sie instruiert wurden.\nDas Random Dot Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Random Dot Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Dot-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?"
  },
  {
    "objectID": "pages/chapters/random_dot_experiment.html#kurzbeschrieb-kursexperiment",
    "href": "pages/chapters/random_dot_experiment.html#kurzbeschrieb-kursexperiment",
    "title": "Random Dot Paradigma",
    "section": "",
    "text": "In unserem Experiment l√∂sen die Versuchspersonen einen Random Dot Task zweimal (in zwei Bl√∂cken). In jedem Block erhalten sie eine andere Instruktion, die Aufgabe bleibt jedoch dieselbe: Sie m√ºssen herausfinden in welche Richtung sich die Punktewolke bewegt. In einem Block werden sie instruiert die Aufgabe m√∂glichst schnell zu l√∂sen. Im anderen Block werden sie instruiert die Aufgabe m√∂glichst richtig zu l√∂sen. Wir werden dann analysieren, wie sich das Entscheidungsverhalten von Menschen ver√§ndert, je nachdem wie sie instruiert wurden.\nDas Random Dot Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Random Dot Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Dot-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?"
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html",
    "href": "pages/chapters/psychopy_experiments.html",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "",
    "text": "In diesem Kurs fokussieren wir auf verhaltenswissenschaftliche Forschung, die sich f√ºr die Gehirnprozesse von Menschen interessiert. Wir erstellen in PsychoPy selber zwei Experimente aus der Wahrnehmungs- und Entscheidungsforschung sowie der Neuropsychologie an. Das Random Dot Experiment ist ein perzeptuelles Entscheidungsexperiment mit welchem wir den Einfluss von Anweisungen/Instruktionen auf Entscheidungen untersuchen. Das Stroop Experiment beinhaltet eine typische Aufgabe aus der (klinischen) Neuropsychologie zur Untersuchung von exekutiven Funktionen.\nPsychoPy ist eine kostenfreie Software zum Erstellen von verhaltenswissenschaftlichen Experimenten im Labor oder Online. Die Software basiert auf der Programmiersprache Python, man kann die Experimente (mit gewissen Begrenzungen) jedoch auch in einem GUI (guided user interface) erstellen und braucht so (fast) keine Programmierkenntnisse. PsychoPy-Experimente erm√∂glichen pr√§zise r√§umliche und zeitliche Kontrolle. (Peirce et al.¬†2019)\nIn PsychoPy erstellen Experimente k√∂nnen direkt auf Pavlovia hochgeladen, und so als Online-Experimente gehostet und durchgef√ºhrt werden. Die Speicherung des Experimentes auf gitlab erm√∂glicht dabei eine Versionskontrolle sowie das Teilen des Experimentalcodes."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#experiment-file-erstellen-und-abspeichern",
    "href": "pages/chapters/psychopy_experiments.html#experiment-file-erstellen-und-abspeichern",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "1.1 Experiment-File erstellen und abspeichern",
    "text": "1.1 Experiment-File erstellen und abspeichern\n\n√ñffnen Sie PsychoPy und speichern Sie in einem daf√ºr erstellten Ordner (z.B. psychopy_experiment) das Experiment-File ab (z.B. unter experiment_stroop-task)."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#builder-gui-und-coder",
    "href": "pages/chapters/psychopy_experiments.html#builder-gui-und-coder",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "1.2 Builder (GUI) und Coder?",
    "text": "1.2 Builder (GUI) und Coder?\nExperimente k√∂nnen in PsychoPy mit dem Builder (in einem GUI) erstellt werden, der Python Code wird so automatisch f√ºr Sie generiert. Sie k√∂nnen sich diesen Code auch anschauen und ver√§ndern. Leider k√∂nnen Sie sobald Sie den Code ver√§ndert haben, diese √Ñnderungen nicht zur√ºck in den Builder √ºbertragen. Im Builder-Modus k√∂nnen Sie aber Codest√ºcke einf√ºgen um einzelne Teile des Experiments in Python (oder anderen Programmiersprachen) zu programmieren und dennoch im Builder weiterarbeiten zu k√∂nnen.\n\nFalls Sie planen ein Online-Experiment durchzuf√ºhren, eignet sich der Builder besonders, da die Experimente direkt online durchgef√ºhrt werden k√∂nnen."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#stimuli",
    "href": "pages/chapters/psychopy_experiments.html#stimuli",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.1 Stimuli",
    "text": "2.1 Stimuli\nIn PsychoPy finden Sie schon vorprogrammierte Stimulus Elemente, wie Gratings oder Rating Scales und k√∂nnen Texte, geometrische Figuren, Bilder und Filme einf√ºgen. Auch komplexere Stimuluselemente wie Random Dots k√∂nnen sehr einfach konfiguriert werden ohne dass sie von Grund auf neu programmiert werden m√ºssen.\n\nErstellen Sie einen Stimulus. Beachten Sie folgende Aspekte:\n\nFarbe\nGr√∂sse\nweitere Eigenschaften, wie Bedingung/Kongruenz?\nTiming (Stimulusdauer, Stimulusende)\n\nNotieren Sie, welche Eigenschaften des Stimulus sich √ºber die Trials hinweg ver√§ndern sollte. Dies k√∂nnen auch mehrere Eigenschaften sein. Diese Liste ben√∂tigen Sie sp√§ter."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#trial",
    "href": "pages/chapters/psychopy_experiments.html#trial",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.2 Trial",
    "text": "2.2 Trial\n\nErg√§nzen Sie alle Elemente, die f√ºr einen vollst√§ndigen Trial notwendig sind:\n\nAntwort der Versuchsperson / Response (siehe auch 2.4)\nInter-Trial-Intervall (ITI): kann vor oder nach dem Stimulus eingef√ºgt werden. (Die Zeit des ITI wird oft variiert. Dies m√ºsste also auch auf die Liste oben)\nFixationskreuz?\nMask?\nFeedback?"
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#trialschleife",
    "href": "pages/chapters/psychopy_experiments.html#trialschleife",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.3 Trialschleife",
    "text": "2.3 Trialschleife\nSie m√ºssen nicht alle Trials (oder in PsychoPy: Routines) des Experiments einzeln programmieren, sondern k√∂nnen diese wiederholen, in dem Sie eine Trial-Schleife (loop) um den Trial herum erstellen.\n\nErstellen Sie einen loopindem Sie im Feld Flow auf Insert loop klicken.\n\nMit loopType k√∂nnen Sie steuern, die Bedingungen randomisiert/gemischt oder sequentiell/der Reihe nach angezeigt werden sollen.\nMit nReps k√∂nnen Sie angeben, wie oft jeder Stimulus wiederholt werden soll. Haben Sie also einen Stimulus mit zwei zu varierenden Eigenschaften (die je 3 Stufen haben) (also 9 Zeilen im conditions-File und nReps= 2, ergibt das 18 Trials.\n\n\nMittels diesen Schleifen k√∂nnen die Bedingungen implementiert werden z.B. dass sich der Stimulus bei jedem Trial ver√§ndert. Dies kann mit einer conditions-Datei spezifiziert werden, idealerweise im .csv oder .xlsx-Format.\n\nDie Endung .csv bedeutet, dass die Daten als comma separated values abgespeichert werden, also durch ein Komma getrennt. Dieses Dateiformat eignet sich besser als .xlsx, weil es mit vielen Programmen kompatibel und gut einlesbar ist.\n\nBeispielsweise wollen wir drei verschiedene Worte anzeigen (dog, cat und rabbit) und dieses Wort unterschiedlich lange anzeigen (Dauer: 1, 10 und 100 Frames). Die Versuchspersonen sollen dann den Anfangsbuchstaben des Wortes dr√ºcken, also d f√ºr dog, c f√ºr cat und r f√ºr rabbit.\n\nUm die Bedingungen (in unserem Fall: die sich ver√§ndernden Stimuluseigenschaften) zu definieren, erstellen wir eine .csvoder .xlsx-Datei (z.B. in Excel/Notepad/etc.) mit dem Namen conditions und speichern dieses im selben Ordner wie das Experiment.\n\nF√ºgen Sie f√ºr jedes sich ver√§ndernde Element einen Variablennamen und die entsprechenden Werte ein (dies sind die Eigenschaften, die Sie sich bei Punkt 2.1 notiert haben). Die Variablennamen schreiben wir immer in die oberste Zeile der Datei.\nWenn wir z.B. einen Text anzeigen m√∂chten, schreiben wir in die erste Zeile word und duration.\nIn die Spalte unter die Variablennamen schreiben wir die Werte.\nAls Beispiel k√∂nnten die Worte die wir anzeigen lassen wollen cat, dog und rabbit lauten. Dann stehen in der Spalte word, diese 3 W√∂rter unter dem Variablennamen. Unter dem Variablennamen duration geben wir die Anzahl Frames ein, also 1, 10 und 100. Wir wollen jedes Wort mit jeder Dauer kombinieren. Das ergibt 9 Zeilen.\nF√ºgen Sie in jeder Zeile unter dem Variablennamen corrAns die jeweils korrekte Antwort ein.\nF√ºgen Sie, falls vorhanden, in jeder Zeile weitere wichtige Information zum Stimulus ein.\nIm Beispiel m√∂chten Sie z.B. sp√§ter fleischfressende mit pflanzenfressenden Tieren vergleichen, deshalb eine Spalte meat. Dies ver√§ndert im Experiment nichts, dient aber am Schluss zur Auswertung, weil diese Variable auch immer in den Datensatz geschrieben wird.\n\n\nF√ºgen Sie nun im Loop-Fenster die conditions-Datei ein.\n\n\n\n\n\n\n\n\nTipp\n\n\n\nJede Zeile in der conditions-Datei unterhalb des Variablennamens entspricht einer Bedingung (condition).\nSetzen Sie nReps auf 1 w√§hrend Sie das Experiment erstellen, so sparen Sie Zeit.\n\n\nIm PsychoPy k√∂nnen Sie Variablen mit einem vorangestellten $einf√ºgen.\n\n√ñffnen Sie nun wieder das Stimulusfenster und passen Sie dort die Stimuluseigenschaften an. Anstatt von hard-coded values (also einmalig, fix festgelegten Werten) geben wir nun einen Variablennamen ein. Der Stimulus darf nicht auf constant gesetzt sein, sonst kann er sich nicht Trial f√ºr Trial ver√§ndern, setzen Sie ihn deshalb unbedingt auf set every repeat.\nIn unserem Beispiel f√ºgen wir bei text die Laufvariable (ver√§ndernde Eigenschaft) ein: $word. Die Anzeigedauer des Textes soll $duration in Frames sein.\n\n\n\nLassen Sie das Experiment laufen und kontrollieren Sie, ob alles funktioniert hat.\n\n\n\n\n\n\n\nTipp\n\n\n\nMit dieser Methode k√∂nnen Sie auch Instruktionen, ITIs, etc. variieren lassen."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#antworten-aufnehmen",
    "href": "pages/chapters/psychopy_experiments.html#antworten-aufnehmen",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.4 Antworten aufnehmen",
    "text": "2.4 Antworten aufnehmen\nIn PsychoPy muss definiert werden, wie die Antwort der Versuchsperson aufgenommen wird. Dies kann mit der Maus, der Tastatur oder anderen Devices umgesetzt werden. Die M√∂glichkeiten sehen Sie unter Responses.\n\nF√ºgen Sie eine Antwortkomponente hinzu und benennen Sie diese sinnvoll.\nIn unserem Beispiel m√∂chten wir, dass die Versuchsperson mittels Keyboard antwortet.\n\nMit Force end of Routine k√∂nnen Sie einstellen, ob eine Antwort den Trial beendet und mit dem n√§chsten fortf√§hrt.\nDer Namen der Antwortkomponente wird sp√§ter im Datensatz als Variable zu finden sein.\nWerden in einer Antwortkomponente namens key_resp mittels Tastendruck Antwort und Response Time aufgenommen, heissen die Variablen dann key_resp.keys(gedr√ºckte Taste) und key_resp.rt (Antwortdauer).\nEntscheiden Sie, ob PsychoPy √ºberpr√ºfen soll, ob die richtige Antwort gegeben wurde.\nWenn Sie dies m√∂chten, gleicht PsychoPy in unserem Beispiel die gegebene Antwort (key_resp.keys) mit der daf√ºr eingegebenen Variable (hier corrAns) ab. Stimmen diese √ºberein, f√ºgt es in die Variable key_resp.corr 1 ein, wenn nicht 0).\nMit first key definieren Sie, dass der erste Tastendruck z√§hlt."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#weitere-elemente",
    "href": "pages/chapters/psychopy_experiments.html#weitere-elemente",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.5 Weitere Elemente",
    "text": "2.5 Weitere Elemente\nIn PsychoPy GUI wird Ihnen im Fenster Floweine Art Flowchart angezeigt. Hier sehen Sie, welche Elemente Ihr aktuelles Experiment enth√§lt.\n\nF√ºgen Sie nun alle weiteren Elemente, die Sie zu Beginn auf Ihrer Flowchart eingezeichnet hatten, z.B.\n\nBegr√ºssung\nEinverst√§ndnis\nInstruktion\nDebriefing, Verabschiedung\n\nLassen Sie das Experiment laufen und kontrollieren Sie, ob alles funktioniert hat.\n\n\n\n\n\n\n\nTipp\n\n\n\nBeim Programmieren lohnt es sich oft, die kleinen Schritte zwischenzutesten, weil es dann einfacher ist herauszufinden, wo genau der Fehler passiert ist."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#variable-dauer-von-elementen",
    "href": "pages/chapters/psychopy_experiments.html#variable-dauer-von-elementen",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "5.1 Variable Dauer von Elementen",
    "text": "5.1 Variable Dauer von Elementen\n\nFixationskreuz und ITI mit randomisierter Dauer\nUm das Experiment f√ºr die Versuchsperson unvorhersehbarer zu machen, implementieren wir vor dem eigentlichen Stimulus ein Fixationskreuz mit variabler L√§nge. Diese L√§nge soll 0.2, 0.4, 0.6, oder 0.8 Sekunden betragen.\n\nF√ºgen Sie einen Codeblock code_fixationcross ein und definieren Sie unter Begin Routine die Variable fixationcross_duration.\n\nF√ºgen Sie einen Textblock fixationcross ein mit dem Text + und Schriftgr√∂sse 10. Geben Sie unter duration Ihre vorher definierte Variable ein (vergessen Sie dabei das $ nicht): $fixationcross_duration.\n\n\n\n\n\n\n\n\nHands-on: Variable ITI einbauen\n\n\n\nF√ºgen Sie nach dem Stimulus eine ITI mit variabler Dauer hinzu.\nEinfachere Variante: Die ITI soll 10, 20, 30, 40 oder 50 Frames betragen.\nSchwierigere Variante: Die ITI soll eine Zufallszahl zwischen 0.2 und 0.8 Sekunden betragen."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#feedback",
    "href": "pages/chapters/psychopy_experiments.html#feedback",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "5.2 Feedback",
    "text": "5.2 Feedback\nEs gibt Experimente, welche Feedback erfordern. Oft wird vor der Datenerhebung ein √úbungsblock eingebaut, welcher Feedback enth√§lt, so dass die Versuchspersonen wissen, ob sie den Task richtig verstanden haben.\n\nErstellen Sie zuerst eine Trialschleife mit einem Stimulus und einer Response.\nF√ºgen Sie nach dem Stimulus und der Antwort (aber innerhalb der Trialschleife!) eine Routine feedback ein.\nF√ºgen Sie innerhalb der Routine feedback eine Codekomponente hinzu. In dieser Komponente k√∂nnen Sie nun\n\nF√ºgen Sie nun eine Textkomponente hinzu und f√ºgen Sie beim Textfeld die Variable $response_msg ein, damit die Versuchsperson abh√§ngig von ihrer Antwort das entsprechende Feedback erh√§lt, welches zuvor in der Codekomponente definiert wurde.\n\n\n\n\n\n\n\n\nHands-on: Feedback geben\n\n\n\nSie k√∂nnen mittels einer Codekomponente auch reagieren, wenn die Versuchsperson zu schnell, zu langsam oder gar nicht antwortet.\n\nErstellen Sie einen √úbungsdurchgang. F√ºgen Sie eine Code-Komponente hinzu und legen Sie fest, welches Feedback die Versuchsperson erhalten soll.\n\nEinfache Variante: Geben Sie der Person Feedback, ob ihre Antwort richtig oder falsch war.\nMittelschwere Variante: Geben Sie der Person Feedback, wenn Sie zu schnell oder zu langsam antwortet.\nSchwere Variante: Erstellen Sie einen Counter, welcher der Versuchsperson anzeigt, wie gut sie ist, indem f√ºr jede richtige Antwort 5 Punkte erh√§lt, f√ºr jede falsche Antwort 5 Punkte abgezogen werden.\nFalls Sie zur Geschwindigkeit R√ºckmeldung geben wollen oder einen Counter bauen, k√∂nnen Sie etwas in dieser Art machen.\nif dots_keyboard_response.keys is None:\n    response_text = \"miss\"\n\nelif dots_keyboard_response.rt &lt;= 0.1:\n    response_text = \"too fast\"\n\nelse:\n    if (direction == \"left\" and dots_keyboard_response.keys == \"f\" or \n        direction == \"right\" and dots_keyboard_response.keys == \"j\"):\n        response_text = \"+5 points\"\n    else:\n        response_text = \"+0 points\""
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#degrees-of-visual-angle",
    "href": "pages/chapters/psychopy_experiments.html#degrees-of-visual-angle",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "6.1 Degrees of Visual Angle",
    "text": "6.1 Degrees of Visual Angle\nOftmals werden Gr√∂ssenangaben von Stimuli noch in Pixel oder Zentimeter, sondern in degrees of visual angle gemacht. Dies hat den Vorteil, dass die Angaben nicht vom Monitor selber oder der Entferung vom Monitor abh√§ngig sind. Degrees of visual angle gibt die wahrgenommene Gr√∂sse des Stimulus an, und ber√ºcksichtigt die Gr√∂sse des Monitors und des Stimulus, und die Entfernung der Versuchsperson vom Monitor. Weitere Informationen dazu finden Sie auf der Website von OpenSesame. √úblicherweise entspricht ein degrees of visual angle etwa einem cm bei einer Entfernung von 57 cm vom Monitor.\n\nOpenSesame ist ein weiteres, Python-basierendes Programm f√ºr die Erstellung behavioraler Experimente.\n\nZur Umrechnung zwischen cm und degrees of visual angle finden Sie unter diesem Link mehr Information."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#timing",
    "href": "pages/chapters/psychopy_experiments.html#timing",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "6.2 Timing",
    "text": "6.2 Timing\nFrames vs.¬†time (sec or ms): Die pr√§ziseste Art zur Steuerung des Timings von Stimuli besteht darin, sie f√ºr eine festgelegte Anzahl von Frames zu pr√§sentieren. Bei einer Framerate von 60 Hz k√∂nnen Sie Ihren Stimulus nicht z. B. 120 ms lange pr√§sentieren; die Bildperiode w√ºrde Sie auf einen Zeitraum von 116,7 ms (7 Bilder) oder 133,3 ms (8 Bilder) beschr√§nken. Dies ist besonders wichtig f√ºr Reaktionszeit-Aufgaben und EEG-Studien, wo ein pr√§zises Millisekunden-Timing erforderlich ist. Hier finden Sie weitere Informationen zu diesem Thema: Presening Stimuli - Psychopy.\n\nHertz ist eine Einheit die angibt, wie h√§ufig etwas pro Sekunde passiert. Hertz kann wie Mal pro Sekunde ausgesprochen werden. 60 Hertz bedeutet also, 60 Mal pro Sekunde."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#individualisierte-aufgabenschwierigkeit-schwellenmessung",
    "href": "pages/chapters/psychopy_experiments.html#individualisierte-aufgabenschwierigkeit-schwellenmessung",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "6.3 Individualisierte Aufgabenschwierigkeit / Schwellenmessung",
    "text": "6.3 Individualisierte Aufgabenschwierigkeit / Schwellenmessung\nIm Random Dot Experiment macht es z.B. f√ºr gewisse Fragestellungen Sinn die Aufgabenschwierigkeit f√ºr jede Person anzupassen, da sonst ceiling/floor-Effekte auftreten k√∂nnen.\nIn PsychoPy kann ein Staircase in einem Loop verwendet werden, um die Schwierigkeit einer Aufgabe basierend auf der Leistung der Teilnehmer dynamisch anzupassen. Sie ist besonders h√§ufig in Experimenten zur Schwellenmessung, bei denen das Ziel darin besteht, die kleinste wahrnehmbare Reizintensit√§t zu bestimmen. Hier finden Sie weitere Informationen zu diesem Thema: Using a Staircase - PsychoPy."
  },
  {
    "objectID": "pages/chapters/programmieren_1.html",
    "href": "pages/chapters/programmieren_1.html",
    "title": "Sprachen & Umgebungen",
    "section": "",
    "text": "Programmiersprachen sind essentielle Werkzeuge f√ºr die Neurowissenschaftliche Forschung. Wir werden uns zuerst einen kurzen √úberblick √ºber h√§ufig verwendete Programmiersprachen verschaffen und kurz deren Verwendungszwecke und Vor- und Nachteile diskutieren.\n\n\n\n\n\nMatlab ist ein Software f√ºr numerische Anwendung, welche in den Ingenieurwissenschaften, Naturwissenschaften und der Mathematik weit verbreitet ist.\n\n\n\nLeistungsstarke Matrix- und Vektoroperationen, gut geeignet f√ºr Matrix-basierte Operationen, die in der Neurowissenschaftlichen Forschung h√§ufig vorkommen.\nUmfangreiche Bibliothek von integrierten Funktionen f√ºr wissenschaftliches Rechnen.\n\n\n\n\n\nTeuer\nWeniger flexibel als Python oder R in Bezug auf Datenarten und Strukturen.\nMatlab is kommerziell und propriet√§r. Dies bedeutet man muss teuere Lizenzen kaufen, und der Source Code der Software ist nicht offen.\n\n\n\n\n\nDatenverarbeitung und -analyse\nVisualisierung\nViele fMRI Forscher arbeiten mit Matlab, da es daf√ºr eine spezielle Toolbox gibt: SPM\nExperimente programmieren, z.B. mit Psychtoolbox\n\n\n\n\nload('data.mat')\nfs = 1000;\nt = (0:numel(data)-1)/fs;\nplot(t, data)\n\n\n\n\n\nPython ist eine allgemeine (general purpose) Programmiersprache, die in vielen verschiedenen Bereichen wie wissenschaftlichem Rechnen, Datenanalyse und maschinellem Lernen weit verbreitet ist.\n\n\n\n\nEine Vielzahl von Bibliotheken und Modulen wie NumPy, SciPy und Pandas, die leistungsstarke Werkzeuge f√ºr wissenschaftliches Rechnen und Datenanalyse bieten.\nDatenanalysewerkzeuge wie Pandas-Dataframes, die Seaborn-Visualisierungsbibliothek, und Jupyter Notebooks.\nOpen-source und kostenlos\n\n\n\n\n\nKann in einigen numerischen Berechnungen langsamer sein als Matlab.\nDa Python eine allgemeine Sprache ist, muss man f√ºr numerische Anwendungen immer verschiedene Packages importieren (z.B.) numpy, wenn man damit rechnen will. Dies f√ºhrt zu weniger gut lesbarem Code.\n\n\n\n\n\nDatenverarbeitung und -analyse,\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\nExperimente programmieren, z.B. mit PsychoPy\n\n\n\n\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('data.csv')\nsns.lineplot(data=data, x='time', y='voltage')\n\n\n\n\n\nR ist eine Programmiersprache f√ºr statistisches Rechnen und Grafiken.\n\n\n\n\nEntwickelt von Statistikern f√ºr statistisches Rechnen und Grafiken.\nEine gro√üe Bibliothek von statistischen Werkzeugen und Paketen, einschliesslich Visualisierungspackages (grammar of graphics).\nOpen-source und kostenlos\ntidyverse Packages f√ºr Data Wrangling (sehr elegante Syntax, um mit Daten zu arbeiten).\n\n\n\n\n\nSteilere Lernkurve als Python.\nKann in einigen numerischen Berechnungen langsamer sein als Matlab oder Python.\nEntwickelt von Statistiker (nicht von Software Designers). R gilt als sehr idiosynkratisch.\n\n\n\n\n\nStatistische Analyse\nDatenvisualisierung. R hat eine sehr gute Bibliothek f√ºr Grafiken, die ggplot2 Bibliothek. Diese Bibliothek verwendet die sogenannte grammar of graphics (GoG) - eine Methode, um Daten in Grafiken zu visualisieren. Die GoG ist eine sehr elegante und effiziente Methode, um Daten zu visualisieren.\n\n\n\n\nlibrary(tidyverse)\ndata &lt;- read.csv('data.csv')\nggplot(data, aes(x=time, y=voltage)) + geom_line()\n\n\n\n\n\nJulia ist eine allgemeine (general purpose) Programmierspache, die vor allem f√ºr numerisches und wissenschaftliches Rechnen entwickelt wurde.\n\n\n\n\nEntwickelt von Mathematikern f√ºr scientific computing\nLeistungsstark und schnell\nOpen-source und kostenlos\n\n\n\n\n\nwenig verbreitet\n\n\n\n\n\nDatenverarbeitung und -analyse,\nSignalverarbeitung\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\n\n\n\n\nusing CSV, DataFrames, AlgebraOfGraphics, CairoMakie\ndat = CSV.read('data.csv', DataFrame)\ndata(dat) * visual(Lines) * mapping(:time, :voltage) |&gt; draw()\n\n\n\n\n\nBash ist eine Mensch-Maschine-Schnittstelle und dient als Grundlage unixbasierter Betriebssysteme (Linux, macOS). Mit Bash-Skripts k√∂nnen repetitive Aufgaben automatisiert werden, was Fehler vermeidet und komplexe Aufgaben vereinfacht.\n\n\n\n\nEinfaches Konzept und Verwendung\nBereits instaliert (nicht auf Windows)\n\n\n\n\n\nSteile Lernkurve\nUmstellung notwendig von GUI\n\n\n\n\n\nAutomatisierung\neinfache bis komplexe Applikationen\nInteraktion mit dem High Performance Computing Cluster der Universit√§t Bern\n\n\n\n\n#!/bin/bash\necho \"Enter Your Name\"\nread name\nprintf \"\\n Welcome $name \\n\\n\"\n\n\n\nDiese Sprachen sind leistungsstarke Werkzeuge f√ºr die neurowissenschaftliche Forschung. Die Wahl der Sprache h√§ngt unter anderem von der spezifischen Aufgabe ab. Weitere Faktoren ist Tradition: bestimmte Gruppen bevorzugen eher eine Sprache als andere. So ist Matlab unter Ingenieuren weit verbreiten und R unter Statistikern. Python ist im Bereich K√ºnstliche Intelligenz und Machine Learning die beliebteste Sprache. Eine neuere Sprache ist Julia - diese vereint die Vorteile aller oben genannten Sprachen (ohne viele deren Nachteile), ist aber weniger weit verbreitet.\nUm mehr zu erfahren, erkunden Sie die umfangreichen Online-Ressourcen und Dokumentationen f√ºr jede Sprache."
  },
  {
    "objectID": "pages/chapters/programmieren_1.html#programmiersprachen",
    "href": "pages/chapters/programmieren_1.html#programmiersprachen",
    "title": "Sprachen & Umgebungen",
    "section": "",
    "text": "Programmiersprachen sind essentielle Werkzeuge f√ºr die Neurowissenschaftliche Forschung. Wir werden uns zuerst einen kurzen √úberblick √ºber h√§ufig verwendete Programmiersprachen verschaffen und kurz deren Verwendungszwecke und Vor- und Nachteile diskutieren.\n\n\n\n\n\nMatlab ist ein Software f√ºr numerische Anwendung, welche in den Ingenieurwissenschaften, Naturwissenschaften und der Mathematik weit verbreitet ist.\n\n\n\nLeistungsstarke Matrix- und Vektoroperationen, gut geeignet f√ºr Matrix-basierte Operationen, die in der Neurowissenschaftlichen Forschung h√§ufig vorkommen.\nUmfangreiche Bibliothek von integrierten Funktionen f√ºr wissenschaftliches Rechnen.\n\n\n\n\n\nTeuer\nWeniger flexibel als Python oder R in Bezug auf Datenarten und Strukturen.\nMatlab is kommerziell und propriet√§r. Dies bedeutet man muss teuere Lizenzen kaufen, und der Source Code der Software ist nicht offen.\n\n\n\n\n\nDatenverarbeitung und -analyse\nVisualisierung\nViele fMRI Forscher arbeiten mit Matlab, da es daf√ºr eine spezielle Toolbox gibt: SPM\nExperimente programmieren, z.B. mit Psychtoolbox\n\n\n\n\nload('data.mat')\nfs = 1000;\nt = (0:numel(data)-1)/fs;\nplot(t, data)\n\n\n\n\n\nPython ist eine allgemeine (general purpose) Programmiersprache, die in vielen verschiedenen Bereichen wie wissenschaftlichem Rechnen, Datenanalyse und maschinellem Lernen weit verbreitet ist.\n\n\n\n\nEine Vielzahl von Bibliotheken und Modulen wie NumPy, SciPy und Pandas, die leistungsstarke Werkzeuge f√ºr wissenschaftliches Rechnen und Datenanalyse bieten.\nDatenanalysewerkzeuge wie Pandas-Dataframes, die Seaborn-Visualisierungsbibliothek, und Jupyter Notebooks.\nOpen-source und kostenlos\n\n\n\n\n\nKann in einigen numerischen Berechnungen langsamer sein als Matlab.\nDa Python eine allgemeine Sprache ist, muss man f√ºr numerische Anwendungen immer verschiedene Packages importieren (z.B.) numpy, wenn man damit rechnen will. Dies f√ºhrt zu weniger gut lesbarem Code.\n\n\n\n\n\nDatenverarbeitung und -analyse,\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\nExperimente programmieren, z.B. mit PsychoPy\n\n\n\n\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('data.csv')\nsns.lineplot(data=data, x='time', y='voltage')\n\n\n\n\n\nR ist eine Programmiersprache f√ºr statistisches Rechnen und Grafiken.\n\n\n\n\nEntwickelt von Statistikern f√ºr statistisches Rechnen und Grafiken.\nEine gro√üe Bibliothek von statistischen Werkzeugen und Paketen, einschliesslich Visualisierungspackages (grammar of graphics).\nOpen-source und kostenlos\ntidyverse Packages f√ºr Data Wrangling (sehr elegante Syntax, um mit Daten zu arbeiten).\n\n\n\n\n\nSteilere Lernkurve als Python.\nKann in einigen numerischen Berechnungen langsamer sein als Matlab oder Python.\nEntwickelt von Statistiker (nicht von Software Designers). R gilt als sehr idiosynkratisch.\n\n\n\n\n\nStatistische Analyse\nDatenvisualisierung. R hat eine sehr gute Bibliothek f√ºr Grafiken, die ggplot2 Bibliothek. Diese Bibliothek verwendet die sogenannte grammar of graphics (GoG) - eine Methode, um Daten in Grafiken zu visualisieren. Die GoG ist eine sehr elegante und effiziente Methode, um Daten zu visualisieren.\n\n\n\n\nlibrary(tidyverse)\ndata &lt;- read.csv('data.csv')\nggplot(data, aes(x=time, y=voltage)) + geom_line()\n\n\n\n\n\nJulia ist eine allgemeine (general purpose) Programmierspache, die vor allem f√ºr numerisches und wissenschaftliches Rechnen entwickelt wurde.\n\n\n\n\nEntwickelt von Mathematikern f√ºr scientific computing\nLeistungsstark und schnell\nOpen-source und kostenlos\n\n\n\n\n\nwenig verbreitet\n\n\n\n\n\nDatenverarbeitung und -analyse,\nSignalverarbeitung\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\n\n\n\n\nusing CSV, DataFrames, AlgebraOfGraphics, CairoMakie\ndat = CSV.read('data.csv', DataFrame)\ndata(dat) * visual(Lines) * mapping(:time, :voltage) |&gt; draw()\n\n\n\n\n\nBash ist eine Mensch-Maschine-Schnittstelle und dient als Grundlage unixbasierter Betriebssysteme (Linux, macOS). Mit Bash-Skripts k√∂nnen repetitive Aufgaben automatisiert werden, was Fehler vermeidet und komplexe Aufgaben vereinfacht.\n\n\n\n\nEinfaches Konzept und Verwendung\nBereits instaliert (nicht auf Windows)\n\n\n\n\n\nSteile Lernkurve\nUmstellung notwendig von GUI\n\n\n\n\n\nAutomatisierung\neinfache bis komplexe Applikationen\nInteraktion mit dem High Performance Computing Cluster der Universit√§t Bern\n\n\n\n\n#!/bin/bash\necho \"Enter Your Name\"\nread name\nprintf \"\\n Welcome $name \\n\\n\"\n\n\n\nDiese Sprachen sind leistungsstarke Werkzeuge f√ºr die neurowissenschaftliche Forschung. Die Wahl der Sprache h√§ngt unter anderem von der spezifischen Aufgabe ab. Weitere Faktoren ist Tradition: bestimmte Gruppen bevorzugen eher eine Sprache als andere. So ist Matlab unter Ingenieuren weit verbreiten und R unter Statistikern. Python ist im Bereich K√ºnstliche Intelligenz und Machine Learning die beliebteste Sprache. Eine neuere Sprache ist Julia - diese vereint die Vorteile aller oben genannten Sprachen (ohne viele deren Nachteile), ist aber weniger weit verbreitet.\nUm mehr zu erfahren, erkunden Sie die umfangreichen Online-Ressourcen und Dokumentationen f√ºr jede Sprache."
  },
  {
    "objectID": "pages/chapters/programmieren_1.html#programmierumgebungen",
    "href": "pages/chapters/programmieren_1.html#programmierumgebungen",
    "title": "Sprachen & Umgebungen",
    "section": "Programmierumgebungen",
    "text": "Programmierumgebungen\nEine IDE kombiniert h√§ufig verwendete Entwicklertools in einer grafischen Benutzeroberfl√§che. Typischerweise handelt es sich dabei um Funktionen wie Softwarebearbeitung, Erstellung und Testen von Code.\nIn diesem Kurs werden wir RStudio verwenden."
  },
  {
    "objectID": "pages/chapters/neurowissenschaft.html",
    "href": "pages/chapters/neurowissenschaft.html",
    "title": "Neurowissenschaft",
    "section": "",
    "text": "In der Neurowissenschaft wird mit naturwissenschaftlichem Schwerpunkt der Aufbau und die Funktionen des Nervensystems untersucht.\nLink Uni\n\n\n\n\n\n\n\n\n\nBereich\nBeschreibung\n\n\n\n\nBehavioral neuroscience\nEinfluss des Gehirns auf Verhalten\n\n\nClinical neuroscience\nSt√∂rungen des Nervensystems, Vorbeugung, Behandlung und Rehabilitation\n\n\nComputational neuroscience\nSimulation und Modellierung von Hirnfunktionen\n\n\nCultural neuroscience\nEinfluss kultureller Faktoren auf das Gehirn\n\n\nDevelopmental neuroscience\nEntwicklung des Nervensystems √ºber die ganze Alterspanne\n\n\nMolecular and cellular neuroscience\nRolle einzelner Molek√ºle, Gene und Proteine bei der Funktion des Nervensystems\n\n\nNeuroengineering\nneuronale Systeme verstehen, ersetzen, reparieren oder verbessern\n\n\nNeuroimaging\nTeilbereich medizinischer Bildgebung mit Fokus auf dem Gehirn\n\n\nNeuroinformatics\nEntwicklung von Methoden zur Sammlung, Analyse, Nutzung und Ver√∂ffentlichung von Daten\n\n\nNeurolinguistics\nRolle des Gehirns beim erwerben, speichern, verstehen und ausdr√ºcken von Sprache\n\n\nNeurophysiology\nRolle des Nervensystems von der subzellul√§ren Ebene bis hin zu ganzen Organen\n\n\n\nQuelle\nAufteilung nach:\n\nUntersuchter Spezies\n\nz.B. Mensch, Affe, Zebrafisch, Fruchtfliege\n\nverwendeter Methode\n\nz.B. EEG, fMRI, Verhalten"
  },
  {
    "objectID": "pages/chapters/neurowissenschaft.html#hauptbereiche-der-neurowissenschaften",
    "href": "pages/chapters/neurowissenschaft.html#hauptbereiche-der-neurowissenschaften",
    "title": "Neurowissenschaft",
    "section": "",
    "text": "Bereich\nBeschreibung\n\n\n\n\nBehavioral neuroscience\nEinfluss des Gehirns auf Verhalten\n\n\nClinical neuroscience\nSt√∂rungen des Nervensystems, Vorbeugung, Behandlung und Rehabilitation\n\n\nComputational neuroscience\nSimulation und Modellierung von Hirnfunktionen\n\n\nCultural neuroscience\nEinfluss kultureller Faktoren auf das Gehirn\n\n\nDevelopmental neuroscience\nEntwicklung des Nervensystems √ºber die ganze Alterspanne\n\n\nMolecular and cellular neuroscience\nRolle einzelner Molek√ºle, Gene und Proteine bei der Funktion des Nervensystems\n\n\nNeuroengineering\nneuronale Systeme verstehen, ersetzen, reparieren oder verbessern\n\n\nNeuroimaging\nTeilbereich medizinischer Bildgebung mit Fokus auf dem Gehirn\n\n\nNeuroinformatics\nEntwicklung von Methoden zur Sammlung, Analyse, Nutzung und Ver√∂ffentlichung von Daten\n\n\nNeurolinguistics\nRolle des Gehirns beim erwerben, speichern, verstehen und ausdr√ºcken von Sprache\n\n\nNeurophysiology\nRolle des Nervensystems von der subzellul√§ren Ebene bis hin zu ganzen Organen\n\n\n\nQuelle\nAufteilung nach:\n\nUntersuchter Spezies\n\nz.B. Mensch, Affe, Zebrafisch, Fruchtfliege\n\nverwendeter Methode\n\nz.B. EEG, fMRI, Verhalten"
  },
  {
    "objectID": "pages/chapters/gallery.html",
    "href": "pages/chapters/gallery.html",
    "title": "Plot Gallery",
    "section": "",
    "text": "PlotCode\n\n\n\n\n\n\n\n\n\n\nmtcars |&gt;\n    ggplot(aes(x = mpg, y = qsec)) +\n    geom_point()\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by-sa/4.0/CitationBibTeX citation:@online{fitze,\n  author = {Fitze, Daniel and Wyssen, Gerda},\n  title = {Plot {Gallery}},\n  url = {https://kogpsy.github.io/neuroscicomplabFS24//pages/chapters/gallery.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFitze, Daniel, and Gerda Wyssen. n.d. ‚ÄúPlot Gallery.‚Äù https://kogpsy.github.io/neuroscicomplabFS24//pages/chapters/gallery.html."
  },
  {
    "objectID": "pages/chapters/datawrangling.html",
    "href": "pages/chapters/datawrangling.html",
    "title": "Daten importieren und vorverarbeiten",
    "section": "",
    "text": "In R gibt es sehr viele hilfreiche Funktionen und Packages, die f√ºr die Vorverarbeitung und Analyse neurowissenschaftlicher Verhaltensdaten (oder extrahierten Daten aus bildgebenden Verfahren) verwendet werden k√∂nnen. Beim Arbeiten in R empfiehlt es sich durchgehend in einem R-Markdown Dokument (.Rmd) innerhalb eines RStudio-Projects zu arbeiten, da so ein reproduzierbarer Workflow erstellt werden kann. Ein weiterer Vorteil ist zudem, dass Rohdaten nicht ver√§ndert werden m√ºssen.\nIllustration by Allison Horst"
  },
  {
    "objectID": "pages/chapters/datawrangling.html#datenformate",
    "href": "pages/chapters/datawrangling.html#datenformate",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Datenformate",
    "text": "Datenformate\nBevor mit einem Datensatz gearbeitet wird, empfiehlt es sich den Datensatz anzuschauen und Folgendes zu identifizieren:\n\nIn welchem Dateiformat ist der Datensatz gespeichert? (z.B. in .csv, .xlsx oder anderen?)\nIn welchem Datenformat ist der Datensatz geordnet? (long oder wide oder mixed?)\nGibt es ein data dictionary mit Erkl√§rungen zu den Variablen?"
  },
  {
    "objectID": "pages/chapters/datawrangling.html#set-up",
    "href": "pages/chapters/datawrangling.html#set-up",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Set up",
    "text": "Set up\n\n\n\n\n\n\nHands-on: Vorbereitung\n\n\n\n\n√ñffnen Sie RStudio.\n\nErstellen Sie ein neues RStudio-Project\n\nKlicken Sie daf√ºr auf File &gt; New Project\nBenennen Sie das Project complab_datawrangling_stroop und speichern Sie es an einem sinnvollen Ort auf Ihrem Computer. W√†hlen Sie, dass ein neuer Ordner erstellt werden soll.\n\n\nErstellen Sie in diesem Projekt-Ordner einen Ordner namens data.\nKopieren Sie in den data-Ordner Ihre erhobenen Daten des Stroop Experiments. Falls Sie noch keine Daten erhoben haben, dann laden Sie hier Beispiels-Datens√§tze herunter. Sie m√ºssen den Ordner entzippen und den Stroop-Datensatz in den data-Ordner Ihres Projekts kopieren.\nErstellen Sie ein neues .Rmd-File (File &gt; New File &gt; R Markdown) und speichern Sie dieses unter data-import im Projekt-Ordner.\n\n\n\n\n\n\n\n\n\nTipp: Namensgebung f√ºr Files und Variablen\n\n\n\nWenn Sie Filenamen ausw√§hlen, achten Sie darauf dass diese machine-readable sind:\n\nkeine L√ºcken (verwenden Sie stattdessen den camelCase, den snake_case oder -)\nkeine √§, √∂, √º oder andere Sonderzeichen verwenden"
  },
  {
    "objectID": "pages/chapters/datawrangling.html#packages-installieren-und-laden",
    "href": "pages/chapters/datawrangling.html#packages-installieren-und-laden",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Packages installieren und laden",
    "text": "Packages installieren und laden\nF√ºr das Bearbeiten der Daten verwenden eignen sich Funktionen aus dem Package tidyverse, eine Sammlung von verschiedenen, f√ºr data science sehr geeigneten R Packages. Funktionen aus dem tidyverse erm√∂glichen und vereinfachen viele Schritte der Datenverarbeitung. Im Folgenden werden die wichtigsten und h√§ufigst verwendeten Funktionen beschrieben. Das tidyverse k√∂nnen Sie direkt in R herunterladen:\n\nMehr Informationen zum tidyversefinden Sie hier.\n\n# Download und Installieren des Packages (nur einmal ausf√ºhren)\ninstall.packages(\"tidyverse\")\n\nEin Package muss nur einmal heruntergeladen und installiert werden, danach ist es lokal auf dem Computer gespeichert. Aber: Jedes Mal wenn R ge√∂ffnet wird, m√ºssen Packages wieder neu geladen werden.\n\n# Package laden (bei jedem √ñffnen von R zu Beginn des Skripts ausf√ºhren)\nlibrary(\"tidyverse\") \n\nSobald ein Package installiert ist, k√∂nnen die Funktionen auch verwendet werden ohne, dass das ganze Package mit library() geladen wird, indem die Funktion mit dem Package-Namen zusammen aufgerufen wird: packagename::packagefunction(). Dies macht Sinn, wenn verschiedene Packages dieselben Namen f√ºr verschiedene Funktionen nutzen und es so zu Konflikten kommt oder wenn nur eine Funktion aus einem Package verwendet werden soll und alle anderen sowieso nicht gebraucht werden."
  },
  {
    "objectID": "pages/chapters/datawrangling.html#daten-importieren-in-r-read.csv",
    "href": "pages/chapters/datawrangling.html#daten-importieren-in-r-read.csv",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Daten importieren in R: read.csv()\n",
    "text": "Daten importieren in R: read.csv()\n\nEinen Datensatz in .csv-Format kann mit der Funktion read.csv() importiert werden. Teilweise muss innerhalb der Klammer zus√§tzlich der Separator mit sep = \",\" angegeben werden, also mit welchem Zeichen die Spalten getrennt sind. Normalerweise ist dies , in .csv (comma separated values), es kann aber auch ;, . oder eine L√ºcke  sein.\n\n# Daten laden und anschauen\nd_stroop &lt;- read.csv(\"data/stroop_example.csv\", sep = \",\")\nglimpse(d_stroop)\n\n\n\n\n\n\n\nHands-on: Daten einlesen\n\n\n\nLesen Sie den Stroop Datensatz in Ihrem data-Ordner ein und schauen Sie ihn dann mit den Funktionen glimpse() und head() an.\n\nWelche Variablen sind wichtig f√ºr die weitere Auswertung?\nWelche braucht es wahrscheinlich nicht mehr?\nFinden Sie Versuchspersonenidentifikation? / Reaktionszeit? / Antwort der Versuchsperson?\n\n\n\n\n\n\n\n\n\nTipp: Daten anderer Formate einlesen\n\n\n\nFalls Sie eine Excel-Datei einlesen m√∂chten, k√∂nnen Sie dies mit der read_excel()-Funktion aus dem Package readxl() tun: readxl::read_excel().\nFalls Sie nicht wissen, mit welcher Funktion Sie Ihre Daten einlesen k√∂nnen, k√∂nnen Sie dies in RStudio ausprobieren indem Sie beim Reiter Environment auf Import Dataset klicken und dort Ihren Datensatz ausw√§hlen oder √ºber File &gt; Import Dataset. Sie k√∂nnen dort diverse Einstellungen t√§tigen. In der R Console k√∂nnen Sie dann den Code sehen, der zum Einlesen verwendet wurde und die dortige Funktion in Ihren Code kopieren."
  },
  {
    "objectID": "pages/chapters/datawrangling.html#verwenden-der-pipe-oder",
    "href": "pages/chapters/datawrangling.html#verwenden-der-pipe-oder",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Verwenden der Pipe: |> oder %>%\n",
    "text": "Verwenden der Pipe: |&gt; oder %&gt;%\n\nIn R k√∂nnen Sie die Pipe verwenden um mehrere Datenverarbeitungsschritte aneinander zu h√§ngen. Damit sparen Sie sich aufw√§ndige Zwischenschritte und vermeiden das Erstellen von immer neuen Datens√§tzen. Statt zwei einzelne Datenverarbeitungsschritte zu machen wie oben, k√∂nnen mehrere Schritte (hier Daten einlesen und anzeigen) zusammengefasst werden, in dem nach Zeilenende eine Pipe eingef√ºgt wird:\n\nWann Pipes ungeeignet sind wird hier beschrieben.\n\nd_stroop &lt;- read.csv(\"data/stroop_example.csv\", sep = \",\") |&gt;\n    glimpse()\n\nDie Base R Pipe |&gt; und die magritter Pipe %&gt;%_ unterscheiden sich in Details, in unseren weiteren Schritten spielt es jedoch keine Rolle, welche Pipe Sie verwenden.\n\n\n\n\n\n\nTipp\n\n\n\nAchtung: Wenn wir zu Beginn ein &lt;- oder = verwenden, wird alles was nach der Pipe kommt wird ebenfalls im Datensatz ver√§ndert. Wird z.B. der Code ‚Ä¶\n\nd_stroop &lt;- read.csv(\"data/stroop_example1.csv\", sep = \",\") |&gt;\n    head()\n\n‚Ä¶eingegeben, besteht der Datensatz d_stroop dann nur noch aus 6 Zeilen.\nWird die Pipe ohne &lt;- oder = verwendet, bleibt der Datensatz unver√§ndert:\n\nd_stroop |&gt;\n    head()"
  },
  {
    "objectID": "pages/chapters/datawrangling.html#daten-filtern-filter",
    "href": "pages/chapters/datawrangling.html#daten-filtern-filter",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Daten filtern: filter()\n",
    "text": "Daten filtern: filter()\n\nMit filter() k√∂nnen bestimmte Beobachtungen oder Untergruppen ausgew√§hlt werden. Hierf√ºr muss in der Funktion filter(.data, filter, ...) der Datensatz, die betreffende Variable, sowie eine Bedingung eingegeben werden. Es wird die ganze Zeile im Datensatz behalten in der die Variable der Bedingung entspricht.\nBeispiele:\n\n# nur die Trials mit den rot angezeigten W√∂rtern behalten\nd_stroop_filtered &lt;- filter(d_stroop, color == \"red\")\n\n# dasselbe mit der Pipe\nd_filtered &lt;- d_stroop |&gt; filter(color == \"red\")\n\n# nur Trials die ohne blau angezeigten W√∂rter behalten\nd_filtered &lt;- d_stroop |&gt; filter(color != \"blue\")\n\n# nur √úbungstrials mit einer Antwortszeit unter oder gleich gross wie 1 Sekunde behalten\nd_filtered &lt;- d_stroop |&gt; filter(respPractice.rt &lt;= 1)\n\n# nur √úbungstrials mit Antwortzeiten zwischen 1 und 2 Sekunden behalten\nd_filtered &lt;- d_stroop |&gt; filter(respPractice.rt &gt; 1 & respPractice.rt &lt; 2)\n\n# mehrere Filter verwenden\nd_filtered &lt;- d_stroop |&gt; \n    filter(color == \"red\") |&gt;\n    filter(respPractice.rt &lt;= 1)\n\nIn unserem Datensatz m√∂chten wir nur die g√ºltigen Experimentdaten behalten, die Color-To-Key (ctk) Bedingung sowie die Practice Trials m√∂chten wir ausschliessen.\nDie Variable trials_test.thisN enth√§lt die Trialnummer, sie enth√§lt nur Eintr√§ge, w√§hrend der g√ºltigen Trials. Wir k√∂nnen dies nutzen und alle Zeilen behalten in welchen die Zelle der Variable trials_test.thisN nicht leer ist:\n\nd_stroop &lt;- d_stroop |&gt; \n    filter(!is.na(trials_test.thisN)) \n\n\n\n\n\n\n\nHands-on: Daten filtern\n\n\n\nErstellen Sie einen neuen Datensatz namens d_stroop_correct und filtern Sie diesen so dass er nur Trials mit richtigen Antworten enth√§lt. Schauen Sie in der Variable keyResp_test_run.corr, ob tats√§chlich nur noch richtige Antworten √ºbrig geblieben sind.\nAchtung: Arbeiten Sie in den weiteren Schritten nicht mit diesem Datensatz weiter, da wir die falschen Antworten in einem n√§chsten Schritt noch im Datensatz brauchen."
  },
  {
    "objectID": "pages/chapters/datawrangling.html#variablen-ausw√§hlen-select",
    "href": "pages/chapters/datawrangling.html#variablen-ausw√§hlen-select",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Variablen ausw√§hlen: select()\n",
    "text": "Variablen ausw√§hlen: select()\n\nEin komplexer Datensatz mit sehr vielen Variablen wird oft f√ºr die Analyse aus Gr√ºnden der Einfachheit oder Anonymisierung reduziert. Das bedeutet, dass man sich die n√∂tigen Variablen herausliest, und nur mit diesem reduzierten Datensatz weiterarbeitet. Hierzu eignet sich die Funktion select() sehr gut: Mit select(.data, variablenname, ...) k√∂nnen die zu behaltenden Variablen ausgew√§hlt werden. Wird ein ! vor einen Variablennamen gesetzt, wird die Variable nicht behalten.\nMit select() k√∂nnen wir auch die Variablen sortieren und umbenennen, damit unser Datensatz so strukturiert ist, wie wir ihn gebrauchen k√∂nnen.\nBeispiele:\n\n# Variable word und color behalten ohne Pipe\nd_simpler &lt;- select(d_stroop, word, color)\n\n# Variable word und color behalten mit Pipe\nd_simpler &lt;- d_stroop |&gt; select(word, color)\n\n# alle Variablen ausser word behalten\nd_simpler &lt;- d_stroop |&gt; select(!word)\n\n# Variablennamen ver√§ndern\nd_simpler &lt;- d_stroop |&gt; select(newvariablename = word)\n\nSollen mehrere Variablen am St√ºck ausgew√§hlt werden, kann man die erste Variable in der Reihe (z.B. word) und die letzte in der Reihe (z.B. congruent) als word:congruent eingeben, dann werden auch alle dazwischen liegenden Variablen ausgew√§hlt.\n\n\n\n\n\n\nHands-on: Variablen ausw√§hlen\n\n\n\nSchauen Sie sich Ihren Datensatz an, welche Variablen ben√∂tigen Sie f√ºr die weitere Analysen?\nErstellen Sie einen neuen Datensatz d_stroop_clean in welchem Sie die entsprechenden Variablen ausw√§hlen und umbennen, wenn Sie Ihnen zu lange/kompliziert erscheinen.\nUntenstehend finden Sie ein Beispiel, wie der Datensatz danach aussehen k√∂nnte.\n\n\n\n\nRows: 120\nColumns: 10\n$ id         &lt;chr&gt; \"sub-154989\", \"sub-154989\", \"sub-154989\", \"sub-154989\", \"su‚Ä¶\n$ experiment &lt;chr&gt; \"stroop_test\", \"stroop_test\", \"stroop_test\", \"stroop_test\",‚Ä¶\n$ trial      &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1‚Ä¶\n$ word       &lt;chr&gt; \"rot\", \"rot\", \"blau\", \"gelb\", \"rot\", \"blau\", \"blau\", \"gelb\"‚Ä¶\n$ color      &lt;chr&gt; \"red\", \"red\", \"blue\", \"yellow\", \"yellow\", \"yellow\", \"red\", ‚Ä¶\n$ corrAns    &lt;chr&gt; \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"b\", \"g\", \"b\", \"b\",‚Ä¶\n$ congruent  &lt;int&gt; 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0,‚Ä¶\n$ response   &lt;chr&gt; \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"b\", \"g\", \"b\", \"b\",‚Ä¶\n$ rt         &lt;dbl&gt; 1.0639791, 0.7370255, 1.1883303, 1.2007897, 1.6688681, 1.58‚Ä¶\n$ accuracy   &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,‚Ä¶"
  },
  {
    "objectID": "pages/chapters/datawrangling.html#neue-variablen-generieren-und-ver√§ndern-mutate-und-case_when",
    "href": "pages/chapters/datawrangling.html#neue-variablen-generieren-und-ver√§ndern-mutate-und-case_when",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Neue Variablen generieren und ver√§ndern: mutate() und case_when()\n",
    "text": "Neue Variablen generieren und ver√§ndern: mutate() und case_when()\n\nMit der mutate(.data, ‚Ä¶) Funktion k√∂nnen im Datensatz neue Variablen generiert oder bestehende ver√§ndert werden.\nBeispiel:\n\n# Neue Variablen erstellen\nd_new &lt;- d_stroop_clean |&gt;\n    mutate(num_variable = 1.434,\n           chr_variable = \"1.434\",\n           sumofxy_variable = rt + 1,\n           copy_variable = word)\n\n# Bestehende Variablen ver√§ndern\nd_new &lt;- d_new |&gt;\n    mutate(num_variable = num_variable * 1000) # z.B. um Sekunden zu Millisekunden zu machen\n\nMit case_when() kann eine neue Variable erstellt werden in Abh√§ngigkeit von Werten anderer Variablen. Damit kann z.B. eine Variable accuracy erstellt werden, die den Wert correct hat, wenn die Aufgabe richtig gel√∂st wurde (z.B. Bedingung rot und Tastendruck r) und sonst den Wert error hat.\nBeispiel:\n\nd_condvariable &lt;- d_stroop_clean |&gt;\n    mutate(cond_variable = case_when(rt &gt; 0.8 ~ \"higher\",\n                                     rt &lt;= 0.8 ~ \"lower\",\n                                     .default = NA))\n\n\n\n\n\n\n\nHands-on: Variablen generieren und ver√§ndern\n\n\n\n\nErstellen Sie im Datensatz d_stroop_clean eine neue Variable mit dem Namen researcher, den Ihren Namen enth√§lt.\nErstellen Sie zudem eine Variable accuracy_check, mit correct f√ºr korrekte und error f√ºr inkorrekte Trials. Kontrollieren Sie mit der Variable keyResp_test_run.corr (oder Ihrem neuen Variablennamen, wenn Sie diese umbenannt haben) im Datensatz, ob Sie die Aufgabe richtig gel√∂st haben.\n√Ñndern Sie die Trialnummer, so dass sie nicht mehr mit 0 beginnt, sondern mit 1."
  },
  {
    "objectID": "pages/chapters/datawrangling.html#variablenklasse-ver√§ndern-as.factor-as.numeric",
    "href": "pages/chapters/datawrangling.html#variablenklasse-ver√§ndern-as.factor-as.numeric",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Variablenklasse ver√§ndern: as.factor(), as.numeric(), ‚Ä¶",
    "text": "Variablenklasse ver√§ndern: as.factor(), as.numeric(), ‚Ä¶\nVariablen k√∂nnen verschiedene Klassen haben, sie k√∂nnen z.B. kategoriale (factor, character) oder numerische (integer, numeric, double) Informationen enthalten. Beim Einlesen ‚Äúr√§t‚Äù R, welche Klasse eine Variable hat. Teilweise m√∂chten wir dies √§ndern. Wenn wir eine Variable zu einem Faktor machen m√∂chten, verwenden wir as.factor(). Dies macht z.B. Sinn, wenn die Versuchspersonennummer als Zahl eingelesen wurde. Um von einem Faktor zu einer numerischen Variable zu kommen, verwenden wir as.numeric().\n\n# Die Variable \"congruent\" zu einem Faktor machen\nd_stroop_clean |&gt; \n    mutate(congruent = as.factor(congruent))\n\n\n\n\n\n\n\nHands-on: Variablenklassen\n\n\n\nSchauen Sie sich den Datensatz mit glimpse() oder mit View() an. Welche Klassen enth√§lt Ihr Datensatz und was bedeuten Sie?"
  },
  {
    "objectID": "pages/chapters/datawrangling.html#daten-gruppieren-und-zusammenfassen-group_by-und-summarise",
    "href": "pages/chapters/datawrangling.html#daten-gruppieren-und-zusammenfassen-group_by-und-summarise",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Daten gruppieren und zusammenfassen: group_by() und summarise()\n",
    "text": "Daten gruppieren und zusammenfassen: group_by() und summarise()\n\nMit diesen beiden Funktionen k√∂nnen wir mit wenig Code den Datensatz gruppieren und zusammenfassen.\n\n# Nach W√∂rter gruppieren\nd_stroop_clean |&gt; group_by(word) |&gt;\n    summarise(mean_rt = mean(rt),\n              sd_rt = sd(rt))\n\n# A tibble: 3 √ó 3\n  word  mean_rt sd_rt\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 blau     1.23 0.490\n2 gelb     1.26 0.447\n3 rot      1.16 0.552\n\n\n\n\n\n\n\n\nHands-on: Daten zusammenfassen\n\n\n\nErstellen Sie einen neuen Datensatz d_stroop_summary\n\nGruppieren Sie den Datensatz f√ºr Wortfarbe und Kongruenz.\nFassen Sie f√ºr diese Gruppen die durchschnittliche Antwortzeit und Accuracy sowie die Standardabweichungen zusammen."
  },
  {
    "objectID": "pages/chapters/datawrangling.html#datens√§tze-speichern-write.csv",
    "href": "pages/chapters/datawrangling.html#datens√§tze-speichern-write.csv",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Datens√§tze speichern: write.csv()\n",
    "text": "Datens√§tze speichern: write.csv()\n\n\nwrite.csv(d_stroop_clean, file = \"data/dataset_stroop_clean.csv\", row.names = FALSE)\n\n\n\n\n\n\n\nHands-on: Datens√§tze speichern\n\n\n\nSpeichern Sie einen neuen Datensatz mit den vorverarbeiteten Daten."
  },
  {
    "objectID": "pages/chapters/datawrangling.html#data-wrangling-workflow-implementieren",
    "href": "pages/chapters/datawrangling.html#data-wrangling-workflow-implementieren",
    "title": "Daten importieren und vorverarbeiten",
    "section": "Data wrangling workflow implementieren",
    "text": "Data wrangling workflow implementieren\n\n\n\n\n\n\nHands-on: Data wrangling workflow\n\n\n\nErstellen Sie nun ein Projekt f√ºr das Random-Dot Experiment und f√ºhren Sie die gelernten data wrangling Schritte selbstst√§ndig durch.\n\n\n\nZu den gelernten Funktionen finden Sie hier Grafiken die evtl. helfen, sich die Funktions-Namen zu merken."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html",
    "href": "pages/chapters/data_visualization_1.html",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "",
    "text": "Hands-on: Vorbereitung\n\n\n\n\nLaden Sie hier den Beispielsdatensatz herunter, speichern Sie diesen in einem data-Folder in einem R-Project.\n√ñffnen Sie ein neues RScript (.R) oder RMarkdown-File (.Rmd). In einem RMarkdown-File k√∂nnen Code und Text verbunden werden und die die Outputs des Codes (z.B. Grafiken) werden anzeigt."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#daten",
    "href": "pages/chapters/data_visualization_1.html#daten",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Daten",
    "text": "Daten\nDie wichtigste Komponente einer Grafik sind die Daten. Bevor eine Grafik erstellt wird, m√ºssen die Eigenschaften des Datensatzes bekannt sein.\n\nDer verwendete Datensatz stammt von @matejka_same_2017.\n\n# Einlesen des √úbungsdatensatzes\nd &lt;- read.csv(\"data/DatasaurusDozen.csv\") %&gt;%\n    mutate(condition = as.factor(condition)) # Variable condition soll ein Faktor sein\n\n# Datensatz anschauen\nglimpse(d)\n\nRows: 1,846\nColumns: 3\n$ condition &lt;fct&gt; away, away, away, away, away, away, away, away, away, away, ‚Ä¶\n$ value1    &lt;dbl&gt; 32.33111, 53.42146, 63.92020, 70.28951, 34.11883, 67.67072, ‚Ä¶\n$ value2    &lt;dbl&gt; 61.411101, 26.186880, 30.832194, 82.533649, 45.734551, 37.11‚Ä¶\n\n\nDatenformat\nAm einfachsten ist das plotten mit ggplot(), wenn die Daten im long-Format vorliegen. Das bedeutet:\n\nJede Variable die gemessen/erhoben wird hat eine Spalte (z.B. Versuchspersonennummer, Reaktionszeit, Taste).\nJede Messung hat eine Zeile. In unserem PsychoPy-Experiment entspricht dies einer Zeile pro Trial.\n\nDie hier eingelesenen Daten sind schon im long-Format.\n\nFalls die Daten im wide-Format abgespeichert sind, lohnt es sich diese umzuformatieren z.B. mit pivot_longer().\nVariablen\nF√ºr die Grafik ist es relevant, welches Skalenniveau die zu visualisierenden Variablen haben. Je nach Anzahl Variablen und den entsprechenden Skalenniveaus eignen sich andere Grafik-Formen.\n\n\nCC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=724035\n\n\n\n\n\n\n\nHands-on: Datensatz anschauen\n\n\n\nSchauen Sie sich den Datensatz an.\n\nWie viele unterschiedliche Variablen gibt es?\nWie heissen die Variablen?\nWelches Skalenniveau haben sie?\n\n\n\nSubsetting\nWenn nur ein gewisser Teil der Daten visualisiert werden soll, muss der Datensatz gefiltert werden. Der aktuelle Datensatz enth√§lt beispielsweise verschiedene Bedingungen, jeweils mit Werten f√ºr Variable value1 und value2. Folgende 13 Bedingungen sind enthalten:\n\nunique(d$condition)\n\n [1] away       bullseye   circle     dino       dots       h_lines   \n [7] high_lines slant_down slant_up   star       v_lines    wide_lines\n[13] x_shape   \n13 Levels: away bullseye circle dino dots h_lines high_lines ... x_shape\n\n\nF√ºrs erste entscheiden wir uns f√ºr die Bedingung away.\n\nd_away &lt;- d %&gt;%\n    filter(condition == \"away\")\n\nWir k√∂nnen f√ºr diese Bedingung zus√§tzlich summary statistics berechnen, hier Mittelwert und Standardabweichung.\n\nd_away_summary &lt;- d_away %&gt;%\n    summarise(mean_v1 = mean(value1),\n              sd_v1 = sd(value1),\n              mean_v2 = mean(value2),\n              sd_v2 = sd(value2))\n\nglimpse(d_away_summary)\n\nRows: 1\nColumns: 4\n$ mean_v1 &lt;dbl&gt; 54.2661\n$ sd_v1   &lt;dbl&gt; 16.76982\n$ mean_v2 &lt;dbl&gt; 47.83472\n$ sd_v2   &lt;dbl&gt; 26.93974\n\n\nDiese Werte geben einen Anhaltspunkt, in welchem Bereich sich die Werte bewegen werden.\nPlot\nIn den folgenden Beispielen werden die Daten der Bedingung away verwendet. Als erstes Argument wird der Funktion ggplot() der Datensatz √ºbergeben (data = data_away).\n\nggplot(data = d_away)"
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#mapping",
    "href": "pages/chapters/data_visualization_1.html#mapping",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Mapping",
    "text": "Mapping\nDas mapping beschreibt, welche Variable auf der x- und y-Achse abgetragen werden sollen. Es wird also definiert, wie die Variablen auf die Formen (aesthetics) gemappt werden sollen. Am einfachsten wir dies zu Beginn in festgelegt (das mapping kann aber auch in der Funktion geom_ selbst definiert werden). Weitere Variablen k√∂nnten als group = ... oder color = ... eingef√ºgt werden.\n\nggplot(data = d_away,\n       mapping = aes(x = value1,\n                     y = value2)) \n\n\n\n\nDie Grafik verf√ºgt nun √ºber Achsen, diese werden automatisch mit den Variablennamen beschriftet. Da noch keine Formen (geoms) hinzugef√ºgt wurde ist die Grafik aber leer."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#geom-formen",
    "href": "pages/chapters/data_visualization_1.html#geom-formen",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Geom / Formen",
    "text": "Geom / Formen\nAls dritte Komponente werden in ggplot() wird die Form mit geom_ hinzugef√ºgt. Jede Form, die eingef√ºgt wird ben√∂tigt Angaben zum mapping, falls kein mapping angegeben wird, wird dieses aus der ggplot()-Funktion in der ersten Zeile √ºbernommen.\nEs gibt viele verschiedene Formen zur Auswahl. Beispielsweise werden mit geom_point() Punkte erstellt, mit geom_line() Linien, mit geom_boxplot Boxplots, usw. Bei der Wahl der passenden Form kommt es einerseits auf die Daten an. Sind die Daten z.B. Faktoren oder numerische Werte (siehe auch Skalenniveau oben)? Wie viele Variablen werden gleichzeitig in die Grafik eingebunden? Andererseits ist es wichtig, was mit der Grafik gezeigt werden soll: Unterschiede? Gemeinsamkeiten? Ver√§nderungen √ºber Zeit?\nGeome zur Visualisierung von Datenpunkten und Verl√§ufen:\n\nPunkte / Scatterplots - geom_point()\n\nLinien - geom_line()\n\n\nGeome zur Visualisierung von zusammenfassenden Werten:\n\nHistogramme - geom_histogram()\n\nMittelwerte und Standardabweichungen - geom_pointrange()\n\nDichteplots - geom_density()\n\nBoxplots - geom_boxplot()\n\nViolinplots - geom_violin()\n\n\n\nEs gibt auch weitere, sehr informative Arten der Visualisierung, wie heat maps oder shift functions, auf die wir in dieser Veranstaltung nicht eingehen.\n\n\n\n\n\n\nHands-on: Geoms\n\n\n\nWelche geoms eignen sich f√ºr welches Skalenniveau und welche Variablenanzahl?\nüëâ Hier finden Sie das ggplot-Cheatsheet.\nSchauen Sie sich die verschiedenen Formen von Plots hier an."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#kombinieren-von-mehreren-geoms-in-einer-grafik",
    "href": "pages/chapters/data_visualization_1.html#kombinieren-von-mehreren-geoms-in-einer-grafik",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Kombinieren von mehreren geoms in einer Grafik",
    "text": "Kombinieren von mehreren geoms in einer Grafik\nTeilweise werden in Visualisierungen mehrere geoms kombiniert. In vielen F√§llen macht es beispielsweise Sinn, nicht nur die tats√§chlichen Werte, sondern in derselben Grafik auch zusammenfassende Masse zu visualisieren.\n\nWeiterf√ºhrende Info zum Kombinieren von Plots finden Sie hier.\nVerwenden verschiedener geoms in einem Plot:\n\nggplot(data = d_away, \n       mapping = aes(x = condition,\n                     y = value2)) +\n    geom_boxplot(width = 0.3) +\n    geom_jitter(width = 0.1) \n\n\n\n\nKombiniert werden k√∂nnen aber nicht nur verschiedene Formen, sondern auch mehrere Datens√§tze. Dies kann in ggplot() einfach umgesetzt werden indem mehrere Geoms √ºbereinandergelegt werden und nicht das mapping aus der ggplot()-Funktion genutzt wird, sondern indem f√ºr jedes geom ein separater Datensatz und ein separates mapping spezifiziert werden.\n\nggplot(data = d_away, \n       mapping = aes(x = condition,\n                     y = value2)) +\n    geom_jitter(width = 0.1) + # verwendet Datensatz \"d_away\"\n    geom_point(data = d_away_summary, # verwendet Datensatz \"d_away_summary\"\n               aes(x = \"away\", y = mean_v1), # condition ist nicht im Datensatz enthalten, deshalb hier hardcoded\n               color = \"red\", # Punkt rot einf√§rben\n               size = 3) # Punkt vergr√∂ssern"
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#beschriftungen-und-themes",
    "href": "pages/chapters/data_visualization_1.html#beschriftungen-und-themes",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Beschriftungen und Themes",
    "text": "Beschriftungen und Themes\nSch√∂nere und informativere Plots lassen sich gestalten, wenn wir einen Titel hinzuf√ºgen, die Achsenbeschriftung anpassen und das theme ver√§ndern:\n\nggplot(data = d_away,\n       mapping = aes(x = value1,\n                     y = value2)) +\n    geom_point() +\n    labs(title = \"Ein etwas sch√∂nerer Plot\", \n         subtitle = \"Verteilung der Rohwerte\",\n        x = \"Wert 1  [a.u.]\",\n        y = \"Wert 2 [a.u.]\") +\n    theme_minimal()\n\n\n\n\n\nAuch theme_classic() oder theme_bw() ergeben schlichte aber sch√∂ne Plots."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#weiterf√ºhrende-ressourcen-zur-datenvisualisierung-mit-ggplot",
    "href": "pages/chapters/data_visualization_1.html#weiterf√ºhrende-ressourcen-zur-datenvisualisierung-mit-ggplot",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Weiterf√ºhrende Ressourcen zur Datenvisualisierung mit ggplot()\n",
    "text": "Weiterf√ºhrende Ressourcen zur Datenvisualisierung mit ggplot()\n\n\nDokumentation von ggplot2\nKurzweilige, kompakte und sehr informative Informationen und Videos √ºber das Erstellen von Grafiken in ggplot finden Sie hier: Website PsyTeachR: Data Skills for reproducible research\nHier ist der Start der PsyTeachR Videoliste von Lisa deBruine, dort finden sich auch hilfreiche Kurzvideos zu Themen von Daten einlesen bis zu statistischen Analysen. Beispielsweise zu Basic Plots, Common Plots und Plot Themes and Customization\nEinf√ºhrung in R von Andrew Ellis und Boris Mayer"
  },
  {
    "objectID": "pages/admin/wichtiges.html",
    "href": "pages/admin/wichtiges.html",
    "title": "Wichtiges zum Kurs",
    "section": "",
    "text": "In diesem anwendungsorientierten Kurs erwerben Sie Wissen √ºber Methoden der Datenerhebung, -verarbeitung und -analyse im Feld der Neurowissenschaften. Wir behandeln im Rahmen der Veranstaltung folgende Inhalte:\n\nWichtige Programmiersprachen und - umgebungen in den Neurowissenschaften\nProgrammieren von computerbasierten Experimenten (mit PsychoPy)\nProgrammieren von Datenverarbeitungspipelines: Datenvorverarbeitung und Visualisierung (‚Äûgood practices‚Äù, Data Cleaning, Reproduzierbarkeit)\nAnalysemethoden und Modelle zugeschnitten auf unterschiedliche neurowissenschaftliche Datens√§tze und Fragestellungen mit frequentistischen wie auch bayesianischen Verfahren (u.a. Reaktionszeiten, Signal detection theory, Drift diffusion models)\nInterpretation und kritische Einordnung von Analyseergebnissen"
  },
  {
    "objectID": "pages/admin/wichtiges.html#ilias",
    "href": "pages/admin/wichtiges.html#ilias",
    "title": "Wichtiges zum Kurs",
    "section": "Ilias",
    "text": "Ilias\nUnter diesen Links finden Sie die Iliasgruppen:\nILIAS (Montag) üëâ 468703-FS2024-0\nILIAS (Mittwoch) üëâ 468703-FS2024-1"
  },
  {
    "objectID": "pages/admin/wichtiges.html#kursvoraussetzungen",
    "href": "pages/admin/wichtiges.html#kursvoraussetzungen",
    "title": "Wichtiges zum Kurs",
    "section": "Kursvoraussetzungen",
    "text": "Kursvoraussetzungen\nWir werden mit der Programmiersprache R und zu einem kleinen Teil mit Python arbeiten. Sie ben√∂tigen in der Veranstaltung deshalb einen eigenen Laptop (Tablets sind nicht geeignet!) mit ca. 20 GB freiem Speicherplatz und mit einer installierten (aktuellen) Version von R und RStudio (Link zum Download von R und RStudio).\nR Kenntnisse (gem√§ss Statistik I-IV in Psychologie) werden vorausgesetzt. Zur Auffrischung dient folgender Link (https://methodenlehre.github.io/einfuehrung-in-R/) oder f√ºr Fortgeschrittene die B√ºcher ‚ÄûAdvanced R‚Äù und ‚ÄûR for Data Scientists‚Äù von Hadley Wickham."
  },
  {
    "objectID": "pages/admin/wichtiges.html#anwesenheit",
    "href": "pages/admin/wichtiges.html#anwesenheit",
    "title": "Wichtiges zum Kurs",
    "section": "Anwesenheit",
    "text": "Anwesenheit\nDie Anwesenheit im Kurs wird vorausgesetzt (2 Abwesenheiten sind ok). Wir w√ºrden den Kurs gerne ohne Anwesenheitskontrollen durchf√ºhren - falls n√∂tig werden wir diese aber einf√ºhren.\nDas Online-Skript erlaubt das Nacharbeiten des wichtigsten Stoffes im Eigenstudium, wir k√∂nnen jedoch nicht f√ºr die Vollst√§ndigkeit garantieren. Hilfestellung beim Programmieren und Verstehen der Inhalte bieten wir w√§hrend der Kurszeiten an, aus zeitlichen Gr√ºnden k√∂nnen wir keine Beantwortung von Fragen zum Kursinhalt per E-Mail anbieten. Bitte stellen Sie Ihre Fragen in der Veranstaltung - auch Ihre Mitstudierenden werden davon profitieren, oft haben mehrere Personen dieselbe Frage."
  },
  {
    "objectID": "pages/admin/wichtiges.html#form-der-leistungsnachweise",
    "href": "pages/admin/wichtiges.html#form-der-leistungsnachweise",
    "title": "Wichtiges zum Kurs",
    "section": "Form der Leistungsnachweise",
    "text": "Form der Leistungsnachweise\nLeistungsnachweise werden in Form von 5 √úbungen und 2 Quizzes erbracht. Hiervon m√ºssen alle abgegeben und als bestanden bewertet werden. Bei Nicht-Bestehen erhalten Sie eine 2. Frist f√ºr die Abgabe oder einen Zusatzauftrag.\nAlle Leistungsnachweise werden in den Veranstaltungen angek√ºndigt. Die Termine f√ºr die Leistungsnachweise finden Sie hier.\n\n√úbungen\nDie √úbungen werden auf der Website aufgeschaltet. Die Ergebnisse der √úbungen m√ºssen in den entsprechenden Ordner auf ILIAS hochgeladen werden. Je nach Umfang der √úbung wird die Zeit bis zur Abgabe unterschiedlich ausfallen. Sie wird jedoch immer mindestens zwei Wochen betragen.\n\n\nQuizzes\nDas erste Quiz wird w√§hrend der ersten Veranstaltung durchgef√ºhrt und dient vor allem dazu zu erheben, welche Kenntnisse schon vorhanden sind. Das zweite Quiz wird gegen Ende des Semesters stattfinden und das Gelernte pr√ºfen."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Neurowissenschaft Computerlab",
    "section": "",
    "text": "Fr√ºhjahrssemester 2024"
  },
  {
    "objectID": "pages/admin/termine.html",
    "href": "pages/admin/termine.html",
    "title": "Termin√ºbersicht",
    "section": "",
    "text": "Termine der Leistungsnachweise\n\nGruppe Montag\n\n\n\nLeistungsnachweis\nForm\nBeginn\nAbgabetermin\nLink\nInhalt\n\n\n\n\nQ1: Vorkenntnisse\nQuiz auf Ilias\n19.02.2024\n28.02.2024 23:55\nQ1\nErheben der Vorkenntnisse\n\n\n√ú1: PsychoPy Experiment\n√úbung\n11.03.2024\n21.03.2024 23:55\n√ú1\nDatenerheben mit einem PsychoPy Experiment\n\n\n√ú2: Data wrangling\n√úbung\n25.03.2024\n17.04.2024 23:55\n√ú2\nDatens√§tze automatisiert einlesen und vorverarbeiten\n\n\n√ú3: Data visualization\n√úbung\n08.04.2024\n28.04.2024 23:55\n√ú3\nDaten visualisieren: Galerie\n\n\n√ú4: Data analysis I\n√úbung\n22.04.2024\n10.05.2024 23:55\n\n\n\n\n√ú5: Data analysis II\n√úbung\n13.05.2024\n31.05.2024 23:55\n\n\n\n\nQ2: Kursinhalte\nQuiz auf Ilias\n20.05.2024\n27.05.2024 23:55\n\n\n\n\n\n\n\nGruppe Mittwoch\n\n\n\nLeistungsnachweis\nForm\nBeginn\nAbgabetermin\nLink\nInhalt\n\n\n\n\nQ1: Vorkenntnisse\nQuiz auf Ilias\n21.02.2024\n28.02.2024 23:55\nQ1\nErheben der Vorkenntnisse\n\n\n√ú1: PsychoPy Experiment\n√úbung\n13.03.2024\n23.03.2024 23:55\n√ú1\nDatenerheben mit einem PsychoPy Experiment\n\n\n√ú2: Data wrangling\n√úbung\n27.03.2024\n17.04.2024 23:55\n√ú2\nDatens√§tze automatisiert einlesen und vorverarbeiten\n\n\n√ú3: Data visualization\n√úbung\n10.04.2024\n30.04.2024 23:55\n√ú3\nDaten visualisieren: Galerie\n\n\n√ú4: Data analysis I\n√úbung\n24.04.2024\n12.05.2024 23:55\n\n\n\n\n√ú5: Data analysis II\n√úbung\n15.05.2024\n02.06.2024 23:55\n\n\n\n\nQ2: Kursinhalte\nQuiz auf Ilias\n20.05.2024\n27.05.2024 23:55\n\n\n\n\n\n\n\n\nInhalte\nAn den 13 Sitzungen werden wir folgende Themen behandeln (kleine √Ñnderungen vorbehalten):\n\n1 Einf√ºhrung\nSitzung 1 (19./21. Februrar 2024)\n\nEinf√ºhrung in Programmiersprachen und -umgebungen im neurowissenschaftlichen Kontext (Python, R, Matlab, Julia, Bash) und ihre Programmierumgebungen (z.B. RStudio, PsychoPy, usw.)\n\n\n\n\nInstallieren der f√ºr den Kurs ben√∂tigten Software\nDatacamp-Kurse anschauen und belegen.\nQuiz 1 ausf√ºllen (siehe Ilias)\n\n\n\n2 Experimente programmieren\nSitzung 2 (26./28. Februrar 2024)\nSitzung 3 (4./6. M√§rz 2024)\n\n√úbersicht Leistungsnachweise,\nExperimente in den Neurowissenschaften: Elemente und Herausforderungen\nErstellen von zwei computerbasierten Experimenten mit Python und PsychoPy\n√úbung 1: Datenerhebung\n\n\n\n3 Data Wrangling & Daten visualisieren\nSitzung 4 (11./13. M√§rz 2024)\nSitzung 5 (18./20. M√§rz 2024)\nSitzung 6 (25./27. M√§rz 2024)\nFerien: 1./3. April: Vorlesungsfreie Zeit\nSitzung 7 (8./.10. April 2024)\nSitzung 8 (15./17. April 2024)\n\nArbeiten in R mit Projekten und Rmarkdown\nDaten mit R einlesen, bearbeiten und visualisieren\nDatenverarbeitung automatisieren\nOpen Science, Reproduzierbarkeit und Datenmanagement: wie neurowissenschaftliche Daten und Datenverarbeitungspipelines sinnvoll gestaltet und geteilt werden k√∂nnen\n√úbung 2 und 3: Datenverarbeiten und visualisieren\n\n\n\n4 Analysemethoden\nSitzung 8 (15./17. April 2024)\nSitzung 9 (22./24. April 2024)\nSitzung 10 (29. April und 1. Mai 2024)\n\nBesonderheiten neurowissenschaftlicher Daten und Analysen\nfrequentistische und bayesianische Analyseverfahren\n√úbung 4: Datensatz analysieren\n\n\n\n5 Modellieren von neurowissenschaftlichen Daten\nSitzung 11 (6../8. Mai 2024)\nSitzung 12 (13./15. Mai 2024)\nTermine von Mo 20. Mai 2024 und Mi 22. Mai 2024 fallen aus (Pfingstmontag) stattdessen wird Quiz 2 ausgef√ºllt.\nSitzung 13 (27./29. Mai 2014)\n\nSignalentdeckungstheorie (signal detection theory, SDT)\nDrift Diffusion Models (DDM)\nQuiz 2: Abschlussquiz\n√úbung 5: Datensatz analysieren\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "pages/chapters/computerlab.html",
    "href": "pages/chapters/computerlab.html",
    "title": "Computerlab",
    "section": "",
    "text": "In diesem anwendungsbasierten Kurs lernen Sie mit Daten zu arbeiten. Der Computer ist dabei ein absolut notwendiges Werkzeug. Unser Fokus liegt auf der Vermittlung von Anwendungskenntnisse. Die Termine setzen sich deshalb aus Inputs und Hands-on Sessions zusammen.\nAls Einstieg schauen wir uns an, wo der Computer in einem Forschungsprojekt gebraucht wird, wo er die Arbeit erleichtert."
  },
  {
    "objectID": "pages/chapters/computerlab.html#neurocomp-lab",
    "href": "pages/chapters/computerlab.html#neurocomp-lab",
    "title": "Computerlab",
    "section": "",
    "text": "In diesem anwendungsbasierten Kurs lernen Sie mit Daten zu arbeiten. Der Computer ist dabei ein absolut notwendiges Werkzeug. Unser Fokus liegt auf der Vermittlung von Anwendungskenntnisse. Die Termine setzen sich deshalb aus Inputs und Hands-on Sessions zusammen.\nAls Einstieg schauen wir uns an, wo der Computer in einem Forschungsprojekt gebraucht wird, wo er die Arbeit erleichtert."
  },
  {
    "objectID": "pages/chapters/datacamp.html",
    "href": "pages/chapters/datacamp.html",
    "title": "DataCamp",
    "section": "",
    "text": "DataCamp ist eine Online-Lernplattform, welche sich auf Data Science und Datenanalyse konzentriert. Es bietet interaktive Kurse, Tutorials und Projekte in verschiedenen Programmiersprachen wie Python, R und SQL auf unterschiedlichen Niveaus an; sowohl f√ºr Anf√§nger als auch f√ºr Fortgeschrittene gibt es ein breites Angebot.\nIm Rahmen dieser Lehrveranstaltung k√∂nnen alle Teilnehmenden sich unter folgendem Link mit ihrer Uni Bern E-Mail Adresse (*students.unibe.ch) registrieren:\nüëâüèº Einladungslink DataCamp Registration\nWir werden jeweils die empfohlenen Datacamp Kurse verlinken. Sie haben mit dem Link jedoch Zugriff auf alle Kurse bis Ende FS24.\nüëâüèº Zur Auffrischung von R-Kenntnissen eignet sich dieser Kurs: Introduction to R\nüëâüèº Als Einf√ºhrung in Python eignet sich folgender Kurs: Introduction to Python"
  },
  {
    "objectID": "pages/chapters/datacamp.html#datacamp",
    "href": "pages/chapters/datacamp.html#datacamp",
    "title": "DataCamp",
    "section": "",
    "text": "DataCamp ist eine Online-Lernplattform, welche sich auf Data Science und Datenanalyse konzentriert. Es bietet interaktive Kurse, Tutorials und Projekte in verschiedenen Programmiersprachen wie Python, R und SQL auf unterschiedlichen Niveaus an; sowohl f√ºr Anf√§nger als auch f√ºr Fortgeschrittene gibt es ein breites Angebot.\nIm Rahmen dieser Lehrveranstaltung k√∂nnen alle Teilnehmenden sich unter folgendem Link mit ihrer Uni Bern E-Mail Adresse (*students.unibe.ch) registrieren:\nüëâüèº Einladungslink DataCamp Registration\nWir werden jeweils die empfohlenen Datacamp Kurse verlinken. Sie haben mit dem Link jedoch Zugriff auf alle Kurse bis Ende FS24.\nüëâüèº Zur Auffrischung von R-Kenntnissen eignet sich dieser Kurs: Introduction to R\nüëâüèº Als Einf√ºhrung in Python eignet sich folgender Kurs: Introduction to Python"
  },
  {
    "objectID": "pages/chapters/datawrangling_automatisiert.html",
    "href": "pages/chapters/datawrangling_automatisiert.html",
    "title": "Automatisiertes importieren und vorverarbeiten",
    "section": "",
    "text": "F√ºr diesen Teil ben√∂tigen Sie das R-Project complab_datawrangling_stroop mit den 3 von Ihnen erhobenen Datens√§tzen des Stroop Experiments."
  },
  {
    "objectID": "pages/chapters/datawrangling_automatisiert.html#setup",
    "href": "pages/chapters/datawrangling_automatisiert.html#setup",
    "title": "Automatisiertes importieren und vorverarbeiten",
    "section": "Setup",
    "text": "Setup\n\n# Package laden (bei jedem √ñffnen von R zu Beginn des Skripts ausf√ºhren)\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "pages/chapters/datawrangling_automatisiert.html#stroop-experiment-data-wrangling",
    "href": "pages/chapters/datawrangling_automatisiert.html#stroop-experiment-data-wrangling",
    "title": "Automatisiertes importieren und vorverarbeiten",
    "section": "\nStroop-Experiment data wrangling",
    "text": "Stroop-Experiment data wrangling\n\n# Daten vorverarbeiten\nd_stroop = read_csv(\"data/stroop_example_1.csv\") |&gt;\n    filter(!is.na(trials_test.thisN)) |&gt;\n    mutate(trial = trials_test.thisN + 1) |&gt;\n    select(id = participant, \n           trial,\n           word, \n           color, \n           congruent, \n           resp = keyResp_test_run.keys, \n           corr = keyResp_test_run.corr, \n           rt = keyResp_test_run.rt)"
  },
  {
    "objectID": "pages/chapters/datawrangling_automatisiert.html#daten-mit-eigener-funktion-einlesen",
    "href": "pages/chapters/datawrangling_automatisiert.html#daten-mit-eigener-funktion-einlesen",
    "title": "Automatisiertes importieren und vorverarbeiten",
    "section": "Daten mit eigener Funktion einlesen",
    "text": "Daten mit eigener Funktion einlesen\n\nread_stroop = function(path){\n    # Code kopiert von oben\n    d_stroop = read_csv(path) |&gt;\n    filter(!is.na(trials_test.thisN)) |&gt;\n    mutate(trial = trials_test.thisN + 1) |&gt;\n    select(id = participant, \n           trial,\n           word, \n           color, \n           congruent, \n           resp = keyResp_test_run.keys, \n           corr = keyResp_test_run.corr, \n           rt = keyResp_test_run.rt)\n    # ---------------------\n    d_stroop\n}\n\nread_stroop(path = \"data/stroop_example_1.csv\")"
  },
  {
    "objectID": "pages/chapters/datawrangling_automatisiert.html#einlesen-automatisieren",
    "href": "pages/chapters/datawrangling_automatisiert.html#einlesen-automatisieren",
    "title": "Automatisiertes importieren und vorverarbeiten",
    "section": "Einlesen Automatisieren",
    "text": "Einlesen Automatisieren\nWir ben√∂tigen eine Liste aller Daten files. Die Funktion list.files() gibt einer liste aller Dokumente in einem Ordner zur√ºck.\n\nlist.files(path = 'data/')\n\nlist.files(path = 'data/', pattern = 'stroop')\n\nUm die Files einzulesen, reichen nur die Namen der Dateien nicht aus. Dazu ben√∂tigen wir die kompletten Pfade.\n\nfiles = list.files(path = 'data/', pattern = 'stroop') %&gt;% \n    paste('data/', ., sep = '')\n\n\nHier wird die Pipe des magritter-Packages verwendet (%&gt;%) statt die Base-R Pipe (|&gt;). Mit %&gt;% haben wir die M√∂glichkeit mit dem . zu bestimmen wo die weitergeleiteten Inhalte der Pipe eingef√ºgt werden (nach data/). Informationen zu den Unterschieden der Pipes finden Sie hier.\nAlle Files von Hand einlesen\nJedes Daten File wird einzeln eingelesen. Anschliessend m√ºssen alle Files zusammengef√ºgt werden. Diese L√∂sung ist einfach zu verstehen, ist bei vielen Dokumenten aber zu aufw√§ndig.\n\nfile1 = files[1]\nfile2 = files[2]\nfile3 = files[3]\n\nd1 = read_stroop(file1)\nd2 = read_stroop(file2)\nd3 = read_stroop(file3)\n\nd_hand = bind_rows(d1, d2, d3)\n\nAlle Files mit for-Loop einlesen\nDas Einlesen kann mit einem for-Loop automatisiert werden. Der Loop iteriert √ºber alle Daten Files. Als erstes muss ein leerer Data Frame d_loop erstellt werden. Bei jeder Iteration des Loops wird ein Daten File eingelesen und dem erstellten Data Frame d_loop angeh√§ngt.\n\nd_loop = tibble()\n\nfor (file in files){\n    d_tmp = read_stroop(file)\n    d_loop = bind_rows(d_loop, d_tmp)\n}\n\nAlle Files mit der Funktion map() einlesen\nmap() wendet eine Funktion auf alle Elemente eines Vektors an. Der Vektor files enth√§lt die Pfade zu den Daten Files. Mit map() k√∂nnen wir also unsere selbst erstellte Funktion read_stroop() auf jeden Pfad anwenden. Im Anschluss m√ºssen die Dataframes noch verbunden werden.\n\nd_map1 = files |&gt;\n    map(read_stroop) %&gt;%\n    bind_rows()\n\nDie Funktion map_dfr() macht das gleiche wie map() f√ºgt aber zus√§tzlich die einzelnen Data Frames automatisch zusammen.\n\nd_map2 = files |&gt;\n    map_dfr(read_stroop)"
  },
  {
    "objectID": "pages/chapters/datawrangling_automatisiert.html#kompletter-stroop-code-an-einem-ort",
    "href": "pages/chapters/datawrangling_automatisiert.html#kompletter-stroop-code-an-einem-ort",
    "title": "Automatisiertes importieren und vorverarbeiten",
    "section": "Kompletter Stroop Code an einem Ort",
    "text": "Kompletter Stroop Code an einem Ort\n\nread_stroop = function(path){\n    d_stroop = read_csv(path) |&gt;\n    filter(!is.na(trials_test.thisN)) |&gt;\n    mutate(trial = trials_test.thisN + 1) |&gt;\n    select(id = participant, \n           trial,\n           word, \n           color, \n           congruent, \n           resp = keyResp_test_run.keys, \n           corr = keyResp_test_run.corr, \n           rt = keyResp_test_run.rt)\n    d_stroop\n}\n\nd = list.files(path = 'data/', pattern = 'stroop') %&gt;% \n    paste('data/', ., sep = '') |&gt;\n    map_dfr(read_stroop)\n\nd |&gt; write.csv(file = \"data/clean/dataset_stroop_clean.csv\", row.names = FALSE) # neuer Datensatz in anderen Ordner speichern um Verdoppelung zu vermeiden"
  },
  {
    "objectID": "pages/chapters/goodpractices_data.html",
    "href": "pages/chapters/goodpractices_data.html",
    "title": "Neurowissenschaftliche Daten & Good Practices in der Datenverarbeitung",
    "section": "",
    "text": "Neuroimaging experiments result in complicated data that can be arranged in many different ways. So far there is no consensus how to organize and share data obtained in neuroimaging experiments. Even two researchers working in the same lab can opt to arrange their data in a different way. Lack of consensus (or a standard) leads to misunderstandings and time wasted on rearranging data or rewriting scripts expecting certain structure. BIDS Website (2024)"
  },
  {
    "objectID": "pages/chapters/goodpractices_data.html#datenquellen",
    "href": "pages/chapters/goodpractices_data.html#datenquellen",
    "title": "Neurowissenschaftliche Daten & Good Practices in der Datenverarbeitung",
    "section": "Datenquellen",
    "text": "Datenquellen\nNeurowissenschaftliche Daten von Verhaltensdaten zu Bildgebungsdaten stammen aus unterschiedlichsten Quellen und haben alle spezifische Eigenschaften, die in der Datenverarbeitung ber√ºcksichtigt werden m√ºssen."
  },
  {
    "objectID": "pages/chapters/goodpractices_data.html#datenformate",
    "href": "pages/chapters/goodpractices_data.html#datenformate",
    "title": "Neurowissenschaftliche Daten & Good Practices in der Datenverarbeitung",
    "section": "Datenformate",
    "text": "Datenformate\nBevor mit einem Datensatz gearbeitet wird, empfiehlt es sich den Datensatz anzuschauen und folgendes zu identifizieren:\n\nIn welchem Dateiformat ist der Datensatz gespeichert? z.B. in .csv, .xlsx oder anderen?`\nIn welchem Datenformat ist der Datensatz geordnet? (long oder wide oder mixed?)\nGibt es ein data dictionnary mit Erkl√§rungen zu den Variablen?"
  },
  {
    "objectID": "pages/chapters/goodpractices_data.html#replizierbarkeit",
    "href": "pages/chapters/goodpractices_data.html#replizierbarkeit",
    "title": "Neurowissenschaftliche Daten & Good Practices in der Datenverarbeitung",
    "section": "Replizierbarkeit",
    "text": "Replizierbarkeit\nReplizierbarkeit (replicability) bedeutet, dass ein Experiment von einer anderen Forschungsgruppe mit einer neuen Stichprobe durchgef√ºhrt werden kann, und √§hnliche oder dieselben Resultate hervorbringt, wie die Originalstudie. Wird eine Studie mehrmals repliziert, steigt die Wahrscheinlichkeit, dass kein Zufallsbefund vorliegt.\n\nReplicability refers to the ability of a researcher to duplicate the results of a prior study if the same procedures are followed but new data are collected. Cacioppo et al. (2015)"
  },
  {
    "objectID": "pages/chapters/goodpractices_data.html#reproduzierbarkeit",
    "href": "pages/chapters/goodpractices_data.html#reproduzierbarkeit",
    "title": "Neurowissenschaftliche Daten & Good Practices in der Datenverarbeitung",
    "section": "Reproduzierbarkeit",
    "text": "Reproduzierbarkeit\nReproduzierbarkeit (reproducibility) h√§ngt eng mit der Replizierbarkeit zusammen. Der Begriff wird teilweise sehr allgemein verwendet, und bedeutet so dass Forschungsergebnisse wiederholt gefunden werden. Reproduzierbarkeit im engeren Sinn hingegen bezieht sich darauf, ob die durchgef√ºhrte Analyse wiederholt werden kann. Die Reproduzierbarkeit ist somit hoch, wenn Forschende die Daten und Datenanalyseskripts bereitstellen und andere Forschende damit dieselben Analysen durchf√ºhren k√∂nnen und zu gleichen Resultaten kommen.\n\nReproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. That is, a second researcher might use the same raw data to build the same analysis files and implement the same statistical analysis in an attempt to yield the same results‚Ä¶. Reproducibility is a minimum necessary condition for a finding to be believable and informative. Cacioppo et al. (2015)\n\nUm die Begriffe zusammenzufassen schlugen Goodman, Fanelli, and Ioannidis (2016) vor von Reproduzierbarkeit der Methoden (Daten und Prozesse k√∂nnen exakt wiederholt werden), Reproduzierbarkeit der Resultate (andere Studien kommen auf dieselben Resultate) und Reproduzierbarkeit der wissenschaftlichen Schlussfolgerung (bei Repetition der Analyse oder der Experimente werden dieselben Schl√ºsse gezogen) zu sprechen.\nGrunds√§tzlich besteht das Ziel, dass in der Forschung m√∂glichst viel Evidenz f√ºr eine Schlussfolgerung gesammelt werden kann. Dies gelingt, wenn die Prozesse transparent, fehlerfrei und wiederholbar sind."
  },
  {
    "objectID": "pages/chapters/goodpractices_data.html#hindernisse-bei-der-reproduzierbarkeit",
    "href": "pages/chapters/goodpractices_data.html#hindernisse-bei-der-reproduzierbarkeit",
    "title": "Neurowissenschaftliche Daten & Good Practices in der Datenverarbeitung",
    "section": "Hindernisse bei der Reproduzierbarkeit",
    "text": "Hindernisse bei der Reproduzierbarkeit\nReproduzierbarkeit kann laut Nosek et al. (2022) vor allem aus zwei Gr√ºnden nicht gegeben sein: Weil die Daten/Skripte nicht zur Verf√ºgung stehen, oder weil diese Fehler enthalten:\n\nIn principle, all reported evidence should be reproducible. If someone applies the same analysis to the same data, the same result should occur. Reproducibility tests can fail for two reasons. A process reproducibility failure occurs when the original analysis cannot be repeated because of the unavailability of data, code, information needed to recreate the code, or necessary software or tools. An outcome reproducibility failure occurs when the reanalysis obtains a different result than the one reported originally. This can occur because of an error in either the original or the reproduction study. Nosek et al. (2022)\n\nF√ºhrt die Reproduktion nicht zum selben Resultat, l√∂st das Zweifel am Forschungsergebnis aus. Wenn die Reproduzierbarkeit am Prozess scheitert, etwa weil die Daten nicht vorhanden sind, kann kein Schluss gezogen werden, ob die Resultate stimmen.\n\nAchieving reproducibility is a basic foundation of credibility, and yet many efforts to test reproducibility reveal success rates below 100%. ‚Ä¶ Whereas an outcome reproducibility failure suggests that the original result may be wrong, a process reproducibility failure merely indicates that the original result cannot be verified. Either reason challenges credibility and increases uncertainty about the value of investing additional resources to replicate or extend the findings (Nuijten et al.¬†2018). Sharing data and code reduces process reproducibility failures (Kidwell et al.¬†2016), which can reveal more outcome reproducibility failures (Hardwicke et al.¬†2018, 2021; Wicherts et al.¬†2011). Nosek et al. (2022)\n\nDas Teilen von Daten und Datenverarbeitungsskripten erh√∂ht die Wahrscheinlichkeit, dass m√∂gliche Fehler im Prozess gefunden werden, da auch andere Forschende die Daten/Skripts verwenden k√∂nnen. Das ist vorerst unangenehm, geh√∂rt aber zum Prozess der Wissenschaft dazu. Reproduzierbarkeit erh√∂ht also indirekt auch die Replizierbarkeit."
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html",
    "title": "Neurowissenschaftliche Experimente",
    "section": "",
    "text": "Nothing in neuroscience makes sense except in the light of behavior.\nShepherd (1988)"
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html#besondere-herausforderungen-von-experimenten-in-den-verhaltens-neurowissenschaften",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html#besondere-herausforderungen-von-experimenten-in-den-verhaltens-neurowissenschaften",
    "title": "Neurowissenschaftliche Experimente",
    "section": "Besondere Herausforderungen von Experimenten in den Verhaltens-/Neurowissenschaften",
    "text": "Besondere Herausforderungen von Experimenten in den Verhaltens-/Neurowissenschaften\n\nPr√§zision: Hohe r√§umliche und zeitliche Aufl√∂sung\nEine grosse Schwierigkeit neurowissenschaftlicher Experimente ist oft, dass eine pr√§zise Kontrolle von r√§umlichen und zeitliche Eigenschaften der Experimente n√∂tig ist um sinnvolle Daten zu erhalten. Visuelle Stimuli m√ºssen z.B. sehr genau und immer gleich pr√§sentiert werden k√∂nnen. Die zeitliche Aufl√∂sung ist gerade bei EEG Experimenten von enormer Bedeutung, da EEG eine sehr hohe zeitliche Aufl√∂sung hat. R√§umliche Aufl√∂sung kann bedeuten, dass sehr pr√§zise visuelle Darbietung m√∂glich sein muss, sowie dass die Versuchsperson sich im Setup nicht bewegen darf, weil dies die Distanzen verschiebt (z.B. im MRT, oder der Abstand zum Bildschirm beim Eyetracking).\n\n\nSynchronisation: Mehrere Datenspuren\nNeurowissenschaftliche Experimente beinhalten oft die Datenerhebung auf mehreren Ebenen, z.B. wird gleichzeitig Hirnaktivit√§t und das Dr√ºcken von Antwortbuttons aufgenommen. Das bedeutet, dass Bildschirm, MRT/EEG/Eyetracking/etc., sowie die Antwort zeitlich koregistriert/synchronisiert werden m√ºssen, um die Daten im Nachhinein auswerten zu k√∂nnen. Technisch ist das oft mit grossem Aufwand verbunden und ben√∂tigt einiges an Pilotierung.\n\n\nKomplexit√§t: Zu untersuchender Prozess und St√∂rprozesse\nOft soll ein ganz spezifischer Prozess untersucht werden, aber das ist eine sehr komplexe Aufgabe, weil im menschlichen Gehirn gleichzeitig sehr viele verschiedene Prozesse ablaufen, kein Hirnareal hat nur eine einzige Aufgabe und aus ethischen Gr√ºnden ist das ‚ÄúAusschalten‚Äù von St√∂rfaktoren nicht immer m√∂glich. Was kann man tun?\nEin Weg den Prozess sichtbar zu machen ist es zum Beispiel einen Kontrast zu rechnen, dies wird beispielsweise bei EEG und fMRI Experimenten, aber auch bei Reaktionszeitexperimenten sehr oft gemacht. Hierf√ºr erhebt man Daten in einer Test-Bedingung in der der Prozess abgerufen wird und eine Kontroll-Bedingung, welche als ‚ÄúBaseline‚Äù dient. Die Baseline enth√§lt alle ‚Äúnicht interessierenden‚Äù Prozesse, die in der Test-Bedingung vorhanden sind. Durch das Vergleichen der Test- und Kontrollbedingung erh√§lt man einen Kontrast: Also das was den interessierenden Prozess ausmacht!\nSie m√ºssen sich beim Erstellen eines Experiments also nicht nur Gedanken dazu machen, was Sie interessiert - sondern genau so auch dar√ºber was Sie nicht interessiert. In der Theorie t√∂nt das einfach, in der Praxis ist das oft recht kniffelig.\n\n\nDatenerhebung: Teuer und anspruchsvoll\nBildgebende Verfahren, ben√∂tigen zum Teil extrem teure Ger√§te, wie z.B. fMRI, und bedeuten oft hohen Aufwand, z.B. das Kleben der Elektroden beim EEG. Bei der Untersuchung von ganz bestimmten Patientengruppen hat man zudem oft nicht sehr viele Personen zur Verf√ºgung die den Einschlusskriterien entsprechen. Oft m√ºssen Personen auch aus dem Experiment ausgeschlossen werden, weil sie z.B. Auff√§lligkeiten im MRI zeigen, die nichts mit dem zu untersuchenden Prozess zu tun hat oder sie brechen w√§hrend der Untersuchung ab. Gerade bei der Untersuchung klinischer Aspekte stellen sich oft Schwierigkeiten, wie beispielsweise fehlende Motivation oder Compliance von Patient:innen. Daher k√∂nnen oft keine sehr grossen Stichproben erhoben werden, was im Gegenzug besonders pr√§zise Experimente erfordert.\n\n\nPassendes Experiment muss selber erstellt werden\nOft muss ein neues Paradigma erstellt werden, d.h. Forschende k√∂nnen kein schon bestehendes Experiment nutzen, sondern untersuchen einen Aspekt eines neuronalen Prozesses mit einer neuen Methode, einer neuen Fragestellung oder einem neuen Ansatz. Dies erfordert breiteKenntnisse im Programmieren, der zu verwendenden Technik, wie auch der Gehirnprozesse."
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html#wichtige-elemente-von-experimenten",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html#wichtige-elemente-von-experimenten",
    "title": "Neurowissenschaftliche Experimente",
    "section": "Wichtige Elemente von Experimenten",
    "text": "Wichtige Elemente von Experimenten\nBeim Programmieren von Experimenten lohnt es sich, sich zuerst dar√ºber im klaren zu sein, welche Bausteine das geplante Experiment hat. Im Folgenden werden einige typische Elemente eines Verhaltensexperiments beschrieben. Oft kommen hier nat√ºrlich noch Stimulations- oder Aufnahmemethoden hinzu.\n\nBegr√ºssung und Einverst√§ndniserkl√§rung\nHier wird die Versuchsperson begr√ºsst, wird √ºber das Experiment aufgekl√§rt und gibt (wenn nicht vorher auf Papier schon geschehen) ihre Einverst√§ndnis zur Teilnahme am Experiment. Dies wird je nach Ethikkommission und Ethikantrag unterschiedlich gehandhabt. Wichtige Informationen sind hierbei, dass die Versuchsperson weiss worauf sie sich einl√§sst (Ist zum Beispiel Hirnstimulation/fMRI/etc. geplant? Wie lange dauert das Experiment ungef√§hr? Was soll sie tun, wenn sie abbrechen m√∂chte?). Die Schwierigkeit ist oft, gen√ºgend Information zu geben aber die Hypothese nicht zu verraten.\n\n\nInstruktion\nDie Instruktion wird oft schriftlich gegeben, um diese zwischen den Versuchspersonen konstant zu halten. Es ist teilweise herausfordernd, einen Task so genau zu erkl√§ren, dass er verst√§ndlich ist, aber die Erkl√§rung auch kurz genug zu halten, dass die Instruktion auch gelesen wird. Oft werden √úbungstrials verwendet um die Instruktion zu verdeutlichen.\n\n\nStimuli\nUnter Stimuli werden die gezeigten Elemente verstanden, die den Task ausmachen. Es k√∂nnen T√∂ne, Bilder, W√∂rter, etc. als Stimuli verwendet werden.\n\n\n\n\n\n\nHands-on: Stimuli\n\n\n\nWelche Stimuli aus neurowissenschaftlichen Experimenten kennen Sie?\nTauschen Sie sich mit Ihren Mitstudierenden aus und schreiben/zeichnen Sie ein paar Beispiele vorne an die Tafel.\n[~5 Minuten]\n\n\n\n\nTrial\nEin Trial beschreibt ein sich wiederholender Vorgang in dem der Stimulus gezeigt wird und z.B. von der Versuchsperson eine Antwort erwartet wird. Ein Trial wird oft sehr viele Male wiederholt. Die Stimuli k√∂nnen zwischen den Trials variieren oder gleich bleiben. Das Timing der Trials kann konstant sein (ein Stimulus wird bspw. immer gleich lang gezeigt) oder variiert werden (unterschiedliche Anzeigedauer).\nZwischen den Trials wird ein Inter-Trial-Interval (ITI) festgelegt. Dies wird z.B. bei fMRI Experimenten dann variiert, damit (je nach Repetition Time/TR) nicht immer in derselben Schicht aufgenommen wird bei Stimuluspr√§sentation.\nW√§hrend einem Trial wird die Antwort / Response der Versuchsperson aufgenommen. Bei der Aufnahme von Reaktiosnzeiten muss festgelegt werden, wann der Trial oder die Stimuluspr√§sentation beginnt und mit welcher Handlung sie endet. Es kann bestimmt werden, welche Antworten zul√§ssig sind (bspw. nur bestimmte Tasten) und was passiert wenn eine richtige oder falsche Antwort gegeben wird: Gibt es z.B. ein Feedback bei falschen Antworten?\n\n\nRun / Block\nEin Run/ein Block bezeichnet eine Einheit mit mehreren Trials. Oft werden Bedingungen z.B. zwischen den Runs randomisiert. Zwischen den Runs sind Pausen m√∂glich, damit sich die Versuchsperson erholen kann. Oft wird vor dem Experimentstart ein ‚Äú√úbungsblock‚Äù durchgef√ºhrt, um sich sicher zu sein, dass die Versuchspersonen die Aufgabe und Instruktion verstanden haben.\n\n\nDebriefing und Verabschiedung\nIm Debriefing wird der Versuchsperson erkl√§rt, um was es im Experiment gegangen ist, welche Hypothesen untersucht wurden und eine eventuelle Coverstory aufgedeckt. Oft werden Personen vor dem Debriefing nach der getesteten Hypothese gefragt, um zu schauen, ob sie diese erraten hatten. Das gibt Aufschluss dar√ºber wie sehr das Experiment dadurch verzerrt sein k√∂nnte, dass die Versuchspersonen Bescheid wissen. Wichtig ist es auch den Versuchspersonen zum Schluss zu danken."
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html#vorgehen-experiment-programmieren",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html#vorgehen-experiment-programmieren",
    "title": "Neurowissenschaftliche Experimente",
    "section": "Vorgehen Experiment programmieren",
    "text": "Vorgehen Experiment programmieren\nWichtige Schritte beim Programmieren von Experimenten sind folgende (nicht unbedingt in dieser Reihenfolge, das kommt auf das Experiment an):\n\nTask ausw√§hlen\nStimuli ausw√§hlen\nTiming festlegen: Dauer Stimuluspr√§sentation? ITIs (Inter-Trial-Intervals)?\nAnzahl Bedingungen und Trials bestimmen (Power bedenken), within oder between Design?\nAblauf des Experiments festlegen: Gesamtdauer? Pausen n√∂tig?\nCoverstory, Stimulus-Masking, etc. n√∂tig?\nEinbindung von allen technischen Ger√§ten (z.B. EEG Recorder, MRT, Brainstimulation-Devices, Eyetracking) und Synchronisation\n\n\nFlowcharts\nBei der Planung und dem Erstellen eines Experiments ist es sehr hilfreich eine Flowchart zu erstellen. In einer Flowchart sind die oben genannten Elemente des Experimentes in Boxen eingezeichnet und mit Pfeilen verbunden um sie zeitlich einzuordnen. Timing-Informationen k√∂nnen unter oder neben den Boxen festgehalten werden. Die Anzahl Repetitionen wird oft neben den Pfeilen eingef√ºgt.\n\nWir werden zu einem sp√§teren Zeitpunkt in diesem Kurs darauf eingehen, wie man ein Experiment m√∂glichst gut planen kann um aussagekr√§ftige Daten zu erhalten. Hier gibt es viele M√∂glichkeiten wie Pilotierung, Datensimulation und die ad√§quate Wahl der statistischen Verfahren in Bezug auf die Fragestellung.\n\nEine Flowchart eignet sich ebenfalls sehr gut, um in einem Artikel darzustellen, wie der Ablauf des Experiments war."
  },
  {
    "objectID": "pages/chapters/programmieren_2.html",
    "href": "pages/chapters/programmieren_2.html",
    "title": "Automatisieren",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nConditionals und Control Flow\nFunktionen erstellen\nLoops anwenden\n\nF√ºhren Sie die folgenden Code Beispiele auf Ihrem Computer aus. Wenn Sie R und RStudio noch nicht installiert haben, verwenden Sie diese online R Konsole.\nWir lernen nun zwei Programmierkonzepte kennen, die uns dabei helfen, Tasks zu automatisieren. Wir werden hier nicht in die Tiefe gehen; es geht uns vielmehr darum, Ihnen einen √úberblick zu geben, was Sie mit diesen Konzepten machen k√∂nnen. Falls Sie tiefer in die Materie einsteigen m√∂chten, gibt es entsprechende Kurse auf Datacamp."
  },
  {
    "objectID": "pages/chapters/programmieren_2.html#alternativen-zu-for-loops",
    "href": "pages/chapters/programmieren_2.html#alternativen-zu-for-loops",
    "title": "Automatisieren",
    "section": "Alternativen zu for-Loops",
    "text": "Alternativen zu for-Loops\nEs gibt in R mehrere M√∂glichkeiten, um √ºber Vektoren oder Listen zu iterieren, ohne dabei explizite for-Loops zu schreiben. Dies hat den Vorteil, dass der Code k√ºrzer und √ºbersichtlicher wird.\n\nlapply und sapply\n\nlapply und sapply sind zwei Funktionen, welche √ºber Listen iterieren. lapply und sapply sind sehr √§hnlich. lapply gibt eine Liste zur√ºck, w√§hrend sapply versucht den output zu vereinfachen (Vektor, Matrix).\nAls Beispiel wollen wir jedes Element eines Vektors verdoppeln (dies kann in R auch einfacher gemacht werden, aber dies ist nur ein √úbungsbeispiel).\n\nnumbers &lt;- c(1, 2, 3, 4, 5)\n\nMit for k√∂nnen wir dies wie folgt tun.\n\nfor (number in numbers) {\n    print(number * 2)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nMit lapply und sapply haben wir zwei M√∂glichkeiten. Wir k√∂nnen entweder eine anonyme Funktion definieren, oder wir k√∂nnen eine Funktion zuerst definieren, und dann verwenden.\n\\(x) x * 2 definiert eine sogenannte anonyme Funktion. Diese Funktion nimmt ein Argument x und multipliziert es mit 2, erh√§lt aber keinen eigenen Namen. Folglich k√∂nnen wir diese Funktion nicht wiederverwenden.\n\nlapply(numbers, \\(x) x * 2)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\nMit einer Funktion, die wir zuerst definieren, sieht unser Beispiel so aus.\n\ndouble &lt;- function(x) {\n    x * 2\n}\n\n\nlapply(numbers, double)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\n\nsapply(numbers, double)\n\n[1]  2  4  6  8 10\n\n\nmap\nEine weitere M√∂glichkeit, √ºber Listen zu iterieren, ist die Funktion map. map ist eine Funktion aus dem Paket purrr (wird automatisch geladen, wenn tidyverse geladen wird). map gibt immer eine Liste zur√ºck.\n\nlibrary(tidyverse)\n\nWarning: Paket 'ggplot2' wurde unter R Version 4.2.3 erstellt\n\n\nWarning: Paket 'tibble' wurde unter R Version 4.2.3 erstellt\n\n\nWarning: Paket 'dplyr' wurde unter R Version 4.2.3 erstellt\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.1     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.0\n‚úî ggplot2   3.4.2     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.1     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nnumbers |&gt; map(double)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\nWenn wir als Output einen Vektor haben wollen, m√ºssen wir die Funktion unlist() verwenden.\n\nnumbers |&gt; map(double) |&gt; unlist()\n\n[1]  2  4  6  8 10"
  },
  {
    "objectID": "pages/chapters/quiz_one.html",
    "href": "pages/chapters/quiz_one.html",
    "title": "Quiz 1",
    "section": "",
    "text": "Sie finden das erste Quiz in Ihrer Iliasgruppe:\nILIAS (Montag) üëâ 468703-FS2024-0\nILIAS (Mittwoch) üëâ 468703-FS2024-1\nSie haben in der Veranstaltung Zeit das Quiz auszuf√ºllen. Falls Sie nicht an der Veranstaltung teilnehmen, k√∂nnen Sie das Quiz bis zum 28. Februar 2024 um 23:55 ausf√ºllen."
  },
  {
    "objectID": "pages/chapters/quiz_one.html#quiz-1",
    "href": "pages/chapters/quiz_one.html#quiz-1",
    "title": "Quiz 1",
    "section": "",
    "text": "Sie finden das erste Quiz in Ihrer Iliasgruppe:\nILIAS (Montag) üëâ 468703-FS2024-0\nILIAS (Mittwoch) üëâ 468703-FS2024-1\nSie haben in der Veranstaltung Zeit das Quiz auszuf√ºllen. Falls Sie nicht an der Veranstaltung teilnehmen, k√∂nnen Sie das Quiz bis zum 28. Februar 2024 um 23:55 ausf√ºllen."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html",
    "href": "pages/chapters/rmarkdown.html",
    "title": "RStudio Projects und RMarkdown",
    "section": "",
    "text": "RStudio Projekte erm√∂glichen vereinfachtes Arbeiten mit R, da alle Dateien, die in diesem Projektordner gespeichert sind, direkt verf√ºgbar sind. So kann die aktuelle R Session abgespeichert werden und beim n√§chsten √ñffnen kann dort weitergearbeitet werden wo man aufgeh√∂rt hat. Projekte erm√∂glichen somit ein stabiles working directory f√ºr ein Datenanalyse-Projekt.\n\n\n\n\n\n\nHands-on: Erstellen eines RStudio Projects\n\n\n\n\n√ñffnen Sie RStudio.\nErstellen Sie ein neues RStudio-Project\n\nKlicken Sie daf√ºr auf File &gt; New Project\nBenennen Sie das Project neurosci_complab_rmarkdown und speichern Sie es an einem sinnvollen Ort auf Ihrem Computer.\n\n\n\n\nEs empfiehlt sich bei RProjekten eine Einstellungs√§nderung (Tools&gt; Project Options...) vorzunehmen, so dass die aktuell gespeicherten Variablen bei jedem Schliessen vom Projekt gel√∂scht werden. Dies verhindert, dass der aktuelle Code nur aufgrund fr√ºherer Speicherung l√§uft."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#r-markdown-file-erstellen-und-ausf√ºhren",
    "href": "pages/chapters/rmarkdown.html#r-markdown-file-erstellen-und-ausf√ºhren",
    "title": "RStudio Projects und RMarkdown",
    "section": "R Markdown File erstellen und ausf√ºhren",
    "text": "R Markdown File erstellen und ausf√ºhren\n\n\n\n\n\n\nHands-on: R Markdown File in einem Projekt erstellen\n\n\n\n\nErstellen Sie ein neues .Rmd-File (File &gt; New File &gt; R Markdown).\nGeben Sie einen Titel und Ihren Namen ein und w√§hlen Sie HTML als Output-Format.\nSpeichern Sie dieses Dokument unter dem Namen rmarkdown_exampleab.\n\nWelches Format (Endung) hat das abgespeicherte R Markdown Skript nun in Ihrem Ordner?\n\n\n\nWeiterf√ºhrende Informationen:\nüëâ Einf√ºhrung in die Verwendung von R/RStudio/Notebooks im Rahmen des Psychologie Studiums von Andrew Ellis und Boris Mayer Einf√ºhrung in R\nüëâ Sehr kompakte, praxisnahe Einf√ºhrung in R Markdown von Danielle Navarro (Slidedeck in englisch) Einf√ºhrung in R Markdown"
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#knitten",
    "href": "pages/chapters/rmarkdown.html#knitten",
    "title": "RStudio Projects und RMarkdown",
    "section": "Knitten",
    "text": "Knitten\nMit Knit wird das R Markdown Skript ausgef√ºhrt und eine zus√§tzliche Datei wird erstellt, z.B. ein html-File.\n\n\n\n\n\n\nHands-on: Knitten\n\n\n\nF√ºhren Sie das File mit Knit aus und vergleichen Sie das R Markdown Skript mit dem Output den Sie erhalten haben. Was f√§llt Ihnen auf?\n\nWas ist nicht mehr zu sehen?\nWas ist zus√§tzlich zu sehen?\nWas hat sich im Projekt-Ordner ver√§ndert?"
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#yaml-header",
    "href": "pages/chapters/rmarkdown.html#yaml-header",
    "title": "RStudio Projects und RMarkdown",
    "section": "YAML header",
    "text": "YAML header\nAm Anfang des R Markdown Skripts befindet sich der YAML header. Hier werden Informationen zu Titel, Autor:Innen, Datum, Outputformat, Literaturverzeichnis und Layout festgelegt.\n\nYAML: Yet Another Markdown Language\n\nDas Layout kann unter themege√§ndert werden. Das kann beispielsweise wie folgt aussehen:\noutput:\n  html_document:\n    theme: cosmo\nAchtung: Die Einr√ºckungen m√ºssen genau stimmen! Hier wurde das theme namens cosmo ausgew√§hlt. M√∂gliche andere themessind z.B. default, cerulean, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, yeti.\n\n\n\n\n\n\nHands-on: Namen und Einstellungen anpassen\n\n\n\n\nGeben Sie dem Dokument einen neuen Titel z.B. R Markdown Einf√ºhrung\n√Ñndern Sie das Layout so, dass es Ihnen gef√§llt."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#text-erstellen-in-r-markdown",
    "href": "pages/chapters/rmarkdown.html#text-erstellen-in-r-markdown",
    "title": "RStudio Projects und RMarkdown",
    "section": "Text erstellen in R Markdown",
    "text": "Text erstellen in R Markdown\nText kann in R Markdown Files nicht nur geschrieben, sondern auch relativ simpel formatiert werden.\nüëâ Hier k√∂nnen Sie das Cheatsheet herunterladen. Auf der rechten Seite finden Sie die Informationen f√ºr die Textformatierung.\nEs empfiehlt sich das Skript anfangs h√§ufig zu knitten, so findet man den Fehler schneller, weil man noch weiss, was man als letztes ver√§ndert hat. Code kann aber auch einfach innerhalb der Code-Chunks √ºberpr√ºft werden.\n\n\n\n\n\n\nHands-on: Texte, Formeln und Bilder in R Markdown einf√ºgen\n\n\n\n\nL√∂schen Sie alles bis auf den YAML-Header\nSchreiben Sie im Textbereich eine √úberschrift f√ºr ein Kapitel, ein Unterkapitel und normalen Text.\nSchreiben Sie im Text etwas kursiv und etwas fett.\nErstellen Sie im Textbereich eine Liste mit 3 Punkten.\nSchreiben Sie alpha innerhalb von $, was passiert?\nF√ºgen Sie die untenstehende Formel in den Text ein. Verwenden Sie daf√ºr zwei Dollarzeichen am Anfang und am Ende. Was passiert?\n\n\\[\na^2 + b^2 = c^2\n\\]\n\nF√ºgen Sie einen Link ein, knitten Sie das File und schauen Sie ob der Link funktioniert. K√∂nnen Sie einen Link nur mit einem unterstrichenen Text anzeigen, so dass die Linkadresse nicht sichtbar ist?\nF√ºgen Sie ein Bild ein. Speichern Sie dieses Bild zuerst in einem Ordner namens img im Projektordner.\n\n\n\n\nHier finden Sie weiterf√ºhrende Hilfe zum Einf√ºgen von Mathnotationen.\n\nMathematics in RMarkdown\nRMarkdown: The definitive Guide"
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#code-erstellen-in-r-markdown",
    "href": "pages/chapters/rmarkdown.html#code-erstellen-in-r-markdown",
    "title": "RStudio Projects und RMarkdown",
    "section": "Code erstellen in R Markdown",
    "text": "Code erstellen in R Markdown\nCode muss jeweils in einem Code-Chunk eingef√ºgt werden. Ein Code-Chunk kann unter Code &gt; Insert Chunk eingef√ºgt werden oder mit dem K√ºrzel Ctrl+Alt+ I.\nCode-Chunks werden mit ``` begonnen und beendet. In den geschweiften Klammern steht r, das bedeutet dass der Code in R geschrieben ist. In dieser Klammer kann dem Code-Chunk einen Namen gegeben und bestimmt werden, ob der Code ausgef√ºhrt und z.B. nur angezeigt werden soll, sowie ob der Output des Codes angezeigt werden soll.\nMit dem gr√ºnen Pfeil kann der Code-Chunk einzeln ausgef√ºhrt werden. Aber auch einzelne Zeilen k√∂nnen ausgef√ºhrt werden, genau so wie in einem .R- Skript.\n\n\n\n\n\n\nHands-on: Code in R Markdown einf√ºgen\n\n\n\n\nErstellen Sie einen Code-Chunk, der ausgef√ºhrt, aber nicht angezeigt wird. Erstellen Sie eine Variable mit dem Namen numbers, die 10 Zahlen enth√§lt.\nErstellen Sie ein Code-Chunk, der ausgef√ºhrt wird und dessen Output angezeigt wird. Berechnen Sie in diesem Chunk den Mittelwert und die Standardabweichung von numbers.\nErstellen Sie einen Plot mit plot(numbers).\nKnitten Sie das File, um zu √ºberpr√ºfen, ob alles funktioniert\n\nüëâ Schauen Sie f√ºr Hilfe nochmals im Cheatsheet nach oder dr√ºcken Sie auf das Zahnr√§dchen-Symbol beim Code-Chunk.\nF√ºr Fortgeschrittene:\n\nTesten Sie, ob Sie Ihr File auch zu einem PDF knitten k√∂nnen.\nErstellen Sie eine Tabelle\nErstellen Sie einen Glossar\nErstellen Sie ein Dokument mit Reitern oben (z.B. Data, Preprocessing, Analysis, Conclusions)\nF√ºgen Sie interaktive Elemente ein."
  },
  {
    "objectID": "pages/chapters/stroop_experiment.html",
    "href": "pages/chapters/stroop_experiment.html",
    "title": "Stroop Paradigma",
    "section": "",
    "text": "Der Stroop Task wurde 1935 zum ersten Mal beschrieben (Stroop, 1935) und ist einer der meist zitierten und verwendeten neuropsychologischen Aufgaben (MacLeod, 1991). In der Neuropsychologie wird der Stroop Color and Word Test (SCWT) verwendet, um die F√§higkeit zur Inhibition kognitiver Interferenz zu messen, welche entsteht wenn zwei Stimuluseigenschaften gleichzeitig verarbeitet werden sich aber widersprechen (Scarpina & Tagini, 2017). Teilweise misst der Task auch andere kognitive Funktionen, wie visuelle Suche oder Arbeitsged√§chtnis, weshalb der Vergleich von Bedingungen relevant ist (Peri√°√±ez et al., 2021).\nW√§hrend dem Stroop Task wird ein Text mit Farbw√∂rtern pr√§sentiert. Im kongruenten Durchgang entsprechen die Farben des Textes dem Farbwort (das Wort ‚Äúrot‚Äù wird in rot pr√§sentiert), im inkongruenten Durchgang unterscheiden sich die Farben des Textes vom Farbwort (das Wort ‚Äúrot‚Äù wird in gelber Farbe pr√§sentiert). Die Person muss angeben in welcher Farbe das Wort abgedruckt ist. In der kongruenten Bedingung f√§llt dies leichter, weil das gelesene Wort auch der Farbe entspricht. In der inkongruenten Bedingung verlangsamt sich die Geschwindigkeit durch die entstehende Interferenz von Wort und Farbe, da das Wort automatisch gelesen wird. Oft wird auch noch eine neutrale Bedingung verwendet, wo nur die Farbe oder das Wort pr√§sentiert werden.\n\n\n\nDaten Stroop-Task (Stroop, 1935)\n\n\n\nHier finden Sie eine Online-Version des Originalpapers. Interessierte finden das Review von MacLeod (1991) auf Ilias.\n\n\n\n\n\n\n\nHands-on: Stroop Task ausprobieren\n\n\n\nHier finden Sie eine englische Online-Version eines Stroop Tasks.\nTesten Sie die Demo und diskutieren Sie dann in kleinen Gruppen folgende Fragen:\n\nF√ºr welche neurowissenschaftlichen Forschungsfragen eignet sich dieser Task? Mit welchen weiteren Methoden (fMRI, EEG, Hirnstimulation, etc.) liesse er sich kombinieren und was k√∂nnte man dabei lernen? Welche Patientengruppen zeigen auff√§llige Antworten in diesem Task?\nWelche ‚ÄúElemente‚Äù des Experiments konnten Sie identifizieren?\nWelche Stimuluseigenschaften sind relevant f√ºr das Experiment? Was macht die Aufgabe einfach? Was macht sie schwieriger?\nWelche Antwortm√∂glichkeiten haben die Versuchspersonen?\nWelche Bedingungen w√ºrden Sie vergleichen?\nWelche Stimuluseigenschaften sind wichtig, damit Sie die Resultate nicht verf√§lschen oder auf was muss geachtet werden bei der Stimulusauswahl?\nWas denken Sie, misst der Task was er soll? Wie werden die Verhaltensdaten Ihrer Sch√§tzung nach aussehen?\n\n[~10 Minuten]\n\n\n\n\nIn diesem Experiment l√∂sen die Personen zwei Bedingungen des Stroop Task, einmal geben sie die Farben der W√∂rter an in einer kongruenten Bedingung (Wortinhalt und Wortfarbe) stimmen √ºberein. Einmal l√∂sen sie die Aufgabe in einer inkongruenten Bedingung (Wortinhalt und Wortfarbe stimmen nicht √ºberein).\nDie kongruente und inkongruente Bedingung kommen im selben Block vor. Die Instruktion lautet f√ºr beide Bedingungen gleich, da immer die Wortfarbe angegeben werden muss. Drei Farben werden verwendet: rot, blau und gelb.\nDas Stroop Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Stroop Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Wort-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?\n\n\n\n\n\n\nMacLeod C. M. (1991). Half a century of research on the Stroop effect: an integrative review. Psychological Bulletin. 109(2), 163‚Äì203. https://doi.org/10.1037/0033-2909.109.2.163\nPeri√°√±ez, J. A., Lubrini, G., Garc√≠a-Guti√©rrez, A., & R√≠os-Lago, M. (2021). Construct validity of the stroop color-word test: influence of speed of visual search, verbal fluency, working memory, cognitive flexibility, and conflict monitoring. Archives of Clinical Neuropsychology, 36(1), 99-111. https://doi.org/10.1093/arclin/acaa034\nScarpina, F., & Tagini, S. (2017). The stroop color and word test. Frontiers in psychology, 8, 557. https://doi.org/10.3389/fpsyg.2017.00557\nStroop, J. R. (1935). Studies of interference in serial verbal reactions. Journal of Experimental Psychology, 18(6), 643‚Äì662. https://doi.org/10.1037/"
  },
  {
    "objectID": "pages/chapters/stroop_experiment.html#kurzbeschrieb-kursexperiment",
    "href": "pages/chapters/stroop_experiment.html#kurzbeschrieb-kursexperiment",
    "title": "Stroop Paradigma",
    "section": "",
    "text": "In diesem Experiment l√∂sen die Personen zwei Bedingungen des Stroop Task, einmal geben sie die Farben der W√∂rter an in einer kongruenten Bedingung (Wortinhalt und Wortfarbe) stimmen √ºberein. Einmal l√∂sen sie die Aufgabe in einer inkongruenten Bedingung (Wortinhalt und Wortfarbe stimmen nicht √ºberein).\nDie kongruente und inkongruente Bedingung kommen im selben Block vor. Die Instruktion lautet f√ºr beide Bedingungen gleich, da immer die Wortfarbe angegeben werden muss. Drei Farben werden verwendet: rot, blau und gelb.\nDas Stroop Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Stroop Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Wort-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?"
  },
  {
    "objectID": "pages/chapters/stroop_experiment.html#referenzen",
    "href": "pages/chapters/stroop_experiment.html#referenzen",
    "title": "Stroop Paradigma",
    "section": "",
    "text": "MacLeod C. M. (1991). Half a century of research on the Stroop effect: an integrative review. Psychological Bulletin. 109(2), 163‚Äì203. https://doi.org/10.1037/0033-2909.109.2.163\nPeri√°√±ez, J. A., Lubrini, G., Garc√≠a-Guti√©rrez, A., & R√≠os-Lago, M. (2021). Construct validity of the stroop color-word test: influence of speed of visual search, verbal fluency, working memory, cognitive flexibility, and conflict monitoring. Archives of Clinical Neuropsychology, 36(1), 99-111. https://doi.org/10.1093/arclin/acaa034\nScarpina, F., & Tagini, S. (2017). The stroop color and word test. Frontiers in psychology, 8, 557. https://doi.org/10.3389/fpsyg.2017.00557\nStroop, J. R. (1935). Studies of interference in serial verbal reactions. Journal of Experimental Psychology, 18(6), 643‚Äì662. https://doi.org/10.1037/"
  },
  {
    "objectID": "pages/chapters/uebung_2_datawrangling.html",
    "href": "pages/chapters/uebung_2_datawrangling.html",
    "title": "√úbung 2 - Data Wrangling",
    "section": "",
    "text": "Erstellen Sie eine automatisierte Datenverarbeitungs-Pipeline, die die Daten des Random Dot Experiments einlesen und vorverarbeiten. Erstellen Sie einen neuen Datensatz und einen Data Report."
  },
  {
    "objectID": "pages/chapters/uebung_2_datawrangling.html#auftrag",
    "href": "pages/chapters/uebung_2_datawrangling.html#auftrag",
    "title": "√úbung 2 - Data Wrangling",
    "section": "",
    "text": "Erstellen Sie eine automatisierte Datenverarbeitungs-Pipeline, die die Daten des Random Dot Experiments einlesen und vorverarbeiten. Erstellen Sie einen neuen Datensatz und einen Data Report."
  },
  {
    "objectID": "pages/chapters/uebung_2_datawrangling.html#vorgehen",
    "href": "pages/chapters/uebung_2_datawrangling.html#vorgehen",
    "title": "√úbung 2 - Data Wrangling",
    "section": "Vorgehen",
    "text": "Vorgehen\n\nSetup\n\nErstellen Sie ein R-Project inkl. Ordner namens complab_datawrangling_randomdot.\nErstellen Sie in diesem Projekt-Ordner einen Ordner namens data.\nLaden Sie den Ordner mit den Datens√§tzen hier herunter. Entzippen Sie den Ordner und speichern Sie die Datens√§tze direkt in Ihrem data-Ordner.\nErstellen Sie ein neues .Rmd-File und speichern Sie dieses unter preprocessing_randomdot_data im Projekt-Ordner.\n\nAutomatierter Datenimport inkl. Vorverarbeiten (mit folgenden Schritten):\n\nEinlesen Datensatz (read.csv())\nFiltern der Daten, so dass nur Experimenttrials im Datensatz sind, keine √úbungsaufgaben. (filter())\nErstellen einer neue Variable trial, die die Trialnummer startend mit 1 angibt (mutate())\nDatensatz vereinfachen: Der Datensatz soll in dieser Reihenfolge folgende Informationen/Variablennamen enthalten (select()):\n\nVersuchspersonenidentifikation (id)\nTrialnummer (trial)\nBewegungsrichtung der Punkte (direction)\nInstruktionsbedingung (condition)\nKorrekte Antwort f√ºr diesen Trial (corrAns)\nAntwort der Versuchsperson (resp),\nwar die Antwort der Versuchsperson korrekt? (corr)\nAntwortzeit der Versuchsperson (rt)\n\n\n\n\n\n\n\n\n\nTipp\n\n\n\nAm besten erstellen Sie zuerst f√ºr einen Datensatz einen funktionierenden Vorverarbeitungsablauf. Dann erstellen Sie eine Funktion f√ºr diesen Ablauf. In einem letzten Schritt automatisieren Sie dann diesen Ablauf f√ºr alle Datens√§tze im Datenordner indem Sie eine Liste mit allen Filenamen erstellen. Sie k√∂nnen sich an dem Automatisierungsbeispiel mit dem Stroop Datensatz orientieren.\nDas Einlesen kann eine Weile dauern, es sind sehr viele Datens√§tze.\n\n\n\nDatensatz kontrollieren:\n\nL√∂schen Sie nun alle Variablen in der RStudio Umgebung (Environment) mit dem Besen-Icon oben rechts und f√ºhren Sie den Code nochmals aus. Wenn alles funktioniert, fahren Sie weiter.\nIhr Datensatz sollte nun wie untenstehend aussehen. Benutzen Sie dazu in Ihrem Code den Sie abgeben zwingend die Funktion glimpse().\n\n\n\n\nRows: 32,520\nColumns: 8\n$ id        &lt;chr&gt; \"sub-10209782\", \"sub-10209782\", \"sub-10209782\", \"sub-1020978‚Ä¶\n$ trial     &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1‚Ä¶\n$ direction &lt;chr&gt; \"left\", \"right\", \"left\", \"right\", \"right\", \"left\", \"right\", ‚Ä¶\n$ condition &lt;chr&gt; \"speed\", \"speed\", \"speed\", \"speed\", \"speed\", \"speed\", \"speed‚Ä¶\n$ corrAns   &lt;chr&gt; \"left\", \"right\", \"left\", \"right\", \"right\", \"left\", \"right\", ‚Ä¶\n$ resp      &lt;chr&gt; \"right\", \"right\", \"left\", \"right\", \"right\", \"left\", \"right\",‚Ä¶\n$ corr      &lt;int&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ rt        &lt;dbl&gt; 5.8753379, 0.8221688, 0.9351370, 0.7454416, 1.5085055, 0.939‚Ä¶\n\n\n\nDatensatz speichern\n\nSpeichern Sie den neuen Datensatz (der jetzt alle Datens√§tze vorverarbeitet und zusammengef√ºgt enth√§lt) als .csv-File namens dataset_rdk_clean.csv.\n\nErstellen Data Report in Form eines .html-Files (mit der Knit-Funktion).\n\nDr√ºcken Sie auf das Knit-Zeichen (Wollkn√§uel) um das .Rmd-File zu einem .html-File zu knitten.\n√ñffnen Sie das .html-File zur Kontrolle.\n\nHochladen Ordner auf Ilias unter √úbung 2 mit:\n\npreprocessing_randomdot_data.Rmd-File\npreprocessing_randomdot_data.html-File\ndataset_rdk_clean.csv-File"
  },
  {
    "objectID": "pages/chapters/uebung_2_datawrangling.html#abgabetermine",
    "href": "pages/chapters/uebung_2_datawrangling.html#abgabetermine",
    "title": "√úbung 2 - Data Wrangling",
    "section": "Abgabetermine",
    "text": "Abgabetermine\nGruppe Montag: 17. April 2024 23:55\nGruppe Mittwoch: 17. April 2024 23:55"
  },
  {
    "objectID": "pages/chapters/uebung_2_datawrangling.html#trouble-shooting",
    "href": "pages/chapters/uebung_2_datawrangling.html#trouble-shooting",
    "title": "√úbung 2 - Data Wrangling",
    "section": "Trouble shooting",
    "text": "Trouble shooting\nDas Einlesen funktioniert nicht.\nKontrollieren Sie bei der read.csv()-Funktion das sep = Zeichen. Passt dieses zum Datensatz?\nStimmt die Ordnerstruktur? Arbeiten Sie in einem R-Project, ist das .Rmd-File im selben Ordner wie das .Rproj-File und haben Sie die Daten im data-Ordner gespeichert (ungezippt, also nur die Datenfiles)?\nDie Datens√§tze k√∂nnen nicht alle eingelesen werden, obwohl ein einzelner Datensatz eingelesen werden kann.\nBitte √∂ffnen Sie die Dateien nur in R, nicht in Excel oder in einem anderen Programm, das kann die Formatierung √§ndern und Probleme beim Einlesen verursachen. Falls Sie die Daten schon ge√∂ffnet haben, laden Sie den Datensatz nochmals neu von der Website herunter und speichern Sie ihn im Datenordner.\nHaben Sie die Pfade richtig gesetzt? Haben Sie die Funktion paste() korrekt genutzt?\nWeitere Fehlermeldungen\nLesen Sie die Fehlermeldung genau durch: Finden Sie Informationen zur L√∂sung des Fehlers?\nH√§ufigste Fehlerquellen:\n\nTippfehler\nFormattierung Code-Chunk: Er muss mit ```{r} beginnen und mit ``` enden. Stellen Sie sicher, dass eine L√ºcke zum n√§chsten Code-Chunk besteht.\nReihenfolgenfehler: L√∂schen Sie alle Variablen mit dem ‚ÄúBesen‚Äù-Symbol oben rechts und lassen Sie Ihren Code nochmals von Beginn an durch laufen. Wo stockt der Code?\n\nBei Problemen, fragen Sie bitte in der n√§chsten Veranstaltung nach."
  }
]