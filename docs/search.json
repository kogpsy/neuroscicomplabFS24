[
  {
    "objectID": "pages/chapters/uebung_1_experiment.html",
    "href": "pages/chapters/uebung_1_experiment.html",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "",
    "text": "F√ºhren Sie selbst und mit 2 weiteren Personen das Stroop und das Random Dot Experiment durch. Laden Sie anschliessend die 6 Datens√§tze auf Ilias hoch. Die beiden Experimente dauern zusammen ca. 30 Minuten (auch abh√§ngig von den Versuchspersonen).\nWichtig: Die erhobenen Daten werden wir dann in den kommenden Sitzungen verwenden, achten Sie also auf gute Datenqualit√§t."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#auftrag",
    "href": "pages/chapters/uebung_1_experiment.html#auftrag",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "",
    "text": "F√ºhren Sie selbst und mit 2 weiteren Personen das Stroop und das Random Dot Experiment durch. Laden Sie anschliessend die 6 Datens√§tze auf Ilias hoch. Die beiden Experimente dauern zusammen ca. 30 Minuten (auch abh√§ngig von den Versuchspersonen).\nWichtig: Die erhobenen Daten werden wir dann in den kommenden Sitzungen verwenden, achten Sie also auf gute Datenqualit√§t."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#vorgehen",
    "href": "pages/chapters/uebung_1_experiment.html#vorgehen",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "Vorgehen",
    "text": "Vorgehen\n\nLaden Sie die 2 Experimente herunter und testen Sie, ob Sie einwandfrei laufen. Die Experimente befinden sich auf Github. Sie k√∂nnen sie unter den untenstehenden Links downloaden. Klicken Sie daf√ºr auf den ZIP-Ordner, und dann auf View Raw oder auf das Icon mit ... und dort auf Download. Sie m√ºssen das File dann evtl. entzippen, bevor Sie das Experiment starten k√∂nnen. Bei Problemen finden Sie unten einen Abschnitt Troubleshooting. Wenn das nichts hilft, k√∂nnen Sie sich bei der n√§chsten Veranstaltung an uns wenden.\n\nStroop Experiment\nRandom Dot Experiment\n\nF√ºhren Sie selber die beiden Experimente durch.\n\nStellen Sie sicher, dass hier ein vollst√§ndiger Datensatz abgespeichert wird. Testen Sie erst dann zus√§tzliche Personen.\n\nLassen Sie 2 weitere Personen die beiden Experimente ausf√ºhren (jede Person soll beide Experimente ausf√ºhren).\n\nDie Personen m√ºssen zwischen 18 und 60 Jahren alt sein.\nDie Personen sollten eine normale oder korrigiert-zu-normale (Brille/Kontaktlinsen) Sehst√§rke haben.\nKeine Mitstudierenden aus dem Computerlab testen.\nAchten Sie darauf, dass die Personen die Aufgaben unabgelenkt l√∂sen k√∂nnen.\n\nLaden Sie die 6 Datens√§tze auf ILIAS hoch.\n\nZippen Sie bitte die 6 .csv-Datens√§tze vor dem Hochladen zu einem (!) Ordner.\nLaden Sie den ZIP-Ordner auf Ilias unter √úbung 1 hoch."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#abgabetermine",
    "href": "pages/chapters/uebung_1_experiment.html#abgabetermine",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "Abgabetermine",
    "text": "Abgabetermine\nGruppe Montag: 21. M√§rz 2024 23:55\nGruppe Mittwoch: 23. M√§rz 2024 23:55"
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#trouble-shooting",
    "href": "pages/chapters/uebung_1_experiment.html#trouble-shooting",
    "title": "√úbung 1 - Psychopy Experiment",
    "section": "Trouble shooting",
    "text": "Trouble shooting\nBitte Fehlermeldung im Fenster genau durchlesen. Dort finden Sie Hinweise darauf, was schief gelaufen ist.\nDas Experiment startet nicht.\n\nUnter Einstellungen (Radsymbol) den Reiter Basic ausw√§hlen. Bei Use PsychoPy version die neuste PsychoPy Version ausw√§hlen.\n\nDas Experiment startet zwar, der Bildschirm ist aber dann einfach f√ºr eine kurze Zeit grau und das Fenster schliesst sich wieder.\n\nZugriffsrechte gegeben? (Bei Windows: Als Administrator starten, bei MacOS: Zugriffsrechte erteilen)\nUnter Einstellungen (Radsymbol) den Reiter Input ausw√§hlen. Keyboard Backend auf PsychToolbox statt ioHub setzen."
  },
  {
    "objectID": "pages/chapters/setup.html",
    "href": "pages/chapters/setup.html",
    "title": "Setup",
    "section": "",
    "text": "Wir haben uns entschieden, in dieser Veranstaltung Python zu verwenden, um ein Experiment zu erstellen, und R f√ºr die Analyse der Daten. Matlab wird nicht verwendet; einerseits da es kommerziell ist, andererseits weil es aus unserer Sicht nicht die beste Wahl f√ºr die Analyse von Verhaltensdaten ist. Ausserdem ist es schon schwierig genug, eine Programmiersprache zu lernen, ohne gleichzeitig noch zwei weitere zu lernen."
  },
  {
    "objectID": "pages/chapters/setup.html#in-dieser-veranstaltung-verwendete-software",
    "href": "pages/chapters/setup.html#in-dieser-veranstaltung-verwendete-software",
    "title": "Setup",
    "section": "",
    "text": "Wir haben uns entschieden, in dieser Veranstaltung Python zu verwenden, um ein Experiment zu erstellen, und R f√ºr die Analyse der Daten. Matlab wird nicht verwendet; einerseits da es kommerziell ist, andererseits weil es aus unserer Sicht nicht die beste Wahl f√ºr die Analyse von Verhaltensdaten ist. Ausserdem ist es schon schwierig genug, eine Programmiersprache zu lernen, ohne gleichzeitig noch zwei weitere zu lernen."
  },
  {
    "objectID": "pages/chapters/setup.html#python",
    "href": "pages/chapters/setup.html#python",
    "title": "Setup",
    "section": "Python",
    "text": "Python\nWenn Sie Python suf Ihrem Rechner installieren wollen, k√∂nnen Sie entweder den offiziellen Installer https://www.python.org/downloads/ downloaden, oder die Anaconda Distribution https://www.anaconda.com/products/distribution verwenden. Die Anaconda Distribution ist eine Python-Distribution, die viele n√ºtzliche Pakete enth√§lt, die f√ºr wissenschaftliches Rechnen und Datenanalyse verwendet werden. Wenn man tats√§chlich mit Python arbeiten will, empfiehlt es sich, die Anaconda Distribution zu benutzen. Wir werden in dieser Veranstaltung Python benutzen, um ein Experiment zu programmieren. Daf√ºr reicht es aus, den PsychoPy Installer zu verwenden; diesen finden Sie unter diesem Link: PsychoPy. PsychoPy ist ein Python-basiertes Tool, mit dem sich sowohl in einer grafischen Benutzeroberfl√§che (GUI) als auch mit Python Code Experimente programmieren lassen."
  },
  {
    "objectID": "pages/chapters/setup.html#r",
    "href": "pages/chapters/setup.html#r",
    "title": "Setup",
    "section": "R",
    "text": "R\nAb der vierten Sitzung werden wir viel mit R arbeiten, um Daten aufzubereiten und grafisch darzustellen. Daf√ºr m√ºssen Sie die aktuelle Version von R installieren. Diese ist zurzeit R 4.3.2, und kann unter folgender URL geladen werden:\nR üëâ https://cloud.r-project.org/\nWir empfehlen f√ºr die Arbeit mit R die RStudio IDE zu verwenden. Diese ist kostenlos und kann unter folgender URL heruntergeladen werden:\nRStudio üëâ https://www.rstudio.com/products/rstudio/download/#download"
  },
  {
    "objectID": "pages/chapters/setup.html#jasp",
    "href": "pages/chapters/setup.html#jasp",
    "title": "Setup",
    "section": "JASP",
    "text": "JASP\nEinen Teil der Bayesianischen Analysen werden wir mit JASP durchf√ºhren. Die aktuelle Version von JASP ist 0.18.3 und kann unter folgender URL heruntergeladen werden:\nJASP üëâ https://jasp-stats.org/download/"
  },
  {
    "objectID": "pages/chapters/quiz_one.html",
    "href": "pages/chapters/quiz_one.html",
    "title": "Quiz 1",
    "section": "",
    "text": "Sie finden das erste Quiz in Ihrer Iliasgruppe:\nILIAS (Montag) üëâ 468703-FS2024-0\nILIAS (Mittwoch) üëâ 468703-FS2024-1\nSie haben in der Veranstaltung Zeit das Quiz auszuf√ºllen. Falls Sie nicht an der Veranstaltung teilnehmen, k√∂nnen Sie das Quiz bis zum 28. Februar 2024 um 23:55 ausf√ºllen."
  },
  {
    "objectID": "pages/chapters/quiz_one.html#quiz-1",
    "href": "pages/chapters/quiz_one.html#quiz-1",
    "title": "Quiz 1",
    "section": "",
    "text": "Sie finden das erste Quiz in Ihrer Iliasgruppe:\nILIAS (Montag) üëâ 468703-FS2024-0\nILIAS (Mittwoch) üëâ 468703-FS2024-1\nSie haben in der Veranstaltung Zeit das Quiz auszuf√ºllen. Falls Sie nicht an der Veranstaltung teilnehmen, k√∂nnen Sie das Quiz bis zum 28. Februar 2024 um 23:55 ausf√ºllen."
  },
  {
    "objectID": "pages/chapters/programmieren_2.html",
    "href": "pages/chapters/programmieren_2.html",
    "title": "Automatisieren",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nConditionals und Control Flow\nFunktionen erstellen\nLoops anwenden\n\nF√ºhren Sie die folgenden Code Beispiele auf Ihrem Computer aus. Wenn Sie R und RStudio noch nicht installiert haben, verwenden Sie diese online R Konsole.\nWir lernen nun zwei Programmierkonzepte kennen, die uns dabei helfen, Tasks zu automatisieren. Wir werden hier nicht in die Tiefe gehen; es geht uns vielmehr darum, Ihnen einen √úberblick zu geben, was Sie mit diesen Konzepten machen k√∂nnen. Falls Sie tiefer in die Materie einsteigen m√∂chten, gibt es entsprechende Kurse auf Datacamp."
  },
  {
    "objectID": "pages/chapters/programmieren_2.html#alternativen-zu-for-loops",
    "href": "pages/chapters/programmieren_2.html#alternativen-zu-for-loops",
    "title": "Automatisieren",
    "section": "Alternativen zu for-Loops",
    "text": "Alternativen zu for-Loops\nEs gibt in R mehrere M√∂glichkeiten, um √ºber Vektoren oder Listen zu iterieren, ohne dabei explizite for-Loops zu schreiben. Dies hat den Vorteil, dass der Code k√ºrzer und √ºbersichtlicher wird.\n\nlapply und sapply\n\nlapply und sapply sind zwei Funktionen, welche √ºber Listen iterieren. lapply und sapply sind sehr √§hnlich. lapply gibt eine Liste zur√ºck, w√§hrend sapply versucht den output zu vereinfachen (Vektor, Matrix).\nAls Beispiel wollen wir jedes Element eines Vektors verdoppeln (dies kann in R auch einfacher gemacht werden, aber dies ist nur ein √úbungsbeispiel).\n\nnumbers &lt;- c(1, 2, 3, 4, 5)\n\nMit for k√∂nnen wir dies wie folgt tun.\n\nfor (number in numbers) {\n    print(number * 2)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nMit lapply und sapply haben wir zwei M√∂glichkeiten. Wir k√∂nnen entweder eine anonyme Funktion definieren, oder wir k√∂nnen eine Funktion zuerst definieren, und dann verwenden.\n\\(x) x * 2 definiert eine sogenannte anonyme Funktion. Diese Funktion nimmt ein Argument x und multipliziert es mit 2, erh√§lt aber keinen eigenen Namen. Folglich k√∂nnen wir diese Funktion nicht wiederverwenden.\n\nlapply(numbers, \\(x) x * 2)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\nMit einer Funktion, die wir zuerst definieren, sieht unser Beispiel so aus.\n\ndouble &lt;- function(x) {\n    x * 2\n}\n\n\nlapply(numbers, double)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\n\nsapply(numbers, double)\n\n[1]  2  4  6  8 10\n\n\nmap\nEine weitere M√∂glichkeit, √ºber Listen zu iterieren, ist die Funktion map. map ist eine Funktion aus dem Paket purrr (wird automatisch geladen, wenn tidyverse geladen wird). map gibt immer eine Liste zur√ºck.\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nnumbers |&gt; map(double)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\nWenn wir als Output einen Vektor haben wollen, m√ºssen wir die Funktion unlist() verwenden.\n\nnumbers |&gt; map(double) |&gt; unlist()\n\n[1]  2  4  6  8 10"
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html",
    "title": "Neurowissenschaftliche Experimente",
    "section": "",
    "text": "In der Neurowissenschaft wird mit naturwissenschaftlichem Schwerpunkt der Aufbau und die Funktionen des Nervensystems untersucht. Neurowissenschaften sind ein sehr weites Forschungsbereich in dem unterschiedlichste und zahlreiche Themen bearbeitet werden. Zur Neurowissenschaft z√§hlen u.a. folgende Bereiche:\n\n\n\n\n\n\n\nBereich\nBeschreibung\n\n\n\n\nAffective neuroscience\nZusammenhang Gehirn und emotionale Zust√§nde\n\n\nBehavioral neuroscience\nEinfluss des Gehirns auf Verhalten\n\n\nClinical neuroscience\nSt√∂rungen des Nervensystems, Vorbeugung, Behandlung und Rehabilitation\n\n\nCognitive neuroscience\nNeuronale Grundlagen von kognitiven Prozessen\n\n\nComputational neuroscience\nSimulation und Modellierung von Hirnfunktionen\n\n\nCultural neuroscience\nEinfluss kultureller Faktoren auf das Gehirn\n\n\nDevelopmental neuroscience\nEntwicklung des Nervensystems √ºber die ganze Alterspanne\n\n\nEvolutionary neuroscience\nEvolution des Nervensystems\n\n\nMolecular and cellular neuroscience\nRolle einzelner Molek√ºle, Gene und Proteine bei der Funktion des Nervensystems sowie meuronale Prozesse auf Zellebene\n\n\nNeuroanatomy\nAnatomie des Nervensystems\n\n\nNeuroengineering\nneuronale Systeme verstehen, ersetzen, reparieren oder verbessern\n\n\nNeurochemistry\nChemische Prozesse im Nervensystem und Neurotransmitter sowie psychopharmakologische Anwendungen\n\n\nNeuroimaging\nTeilbereich medizinischer Bildgebung mit Fokus auf dem Gehirn\n\n\nNeuroinformatics\nEntwicklung von Methoden zur Sammlung, Analyse, Nutzung und Ver√∂ffentlichung von Daten\n\n\nNeurolinguistics\nRolle des Gehirns beim Erwerben, Speichern, Verstehen und Ausdr√ºcken von Sprache\n\n\nNeurophysiology\nRolle des Nervensystems von der subzellul√§ren Ebene bis hin zu ganzen Organen\n\n\nNeuropsychology\nNeuropsychologische Prozesse und Krankheitsbilder\n\n\nSensory neuroscience\nSensorische Systeme und die Interpretation deren Informationen durch das Nervensystem\n\n\nSocial neuroscience\nNeuronale Grundlagen von sozialen Prozessen und Verhalten\n\n\nSystems neuroscience\nFunktion von neuronalen Verbindungen und Systemen\n\n\n\n\nDas Nebenfach Neurowissenschaften an der Universit√§t Bern fokussiert auf Aspekte der Neurowissenschaft, die f√ºr das Gebiet der Psychologie relevant sind, wie z. B. die neuronalen Grundlagen von Kognition, Emotion oder Sozialverhalten.\n\nQuelle: Wikipedia\nNeurowissenschaftliche Forschung wird oft an Organismen und Tieren durchgef√ºhrt (z.B. Einzelzellableitungen in Affen), in diesem Kurs fokussieren wir uns auf neurowissenschaftliche Forschung am Menschen im Bereich der kognitiven Neurowissenschaft und Neuropsychologie. Das bedeutet wir besprechen die Datenerhebung und -verarbeitung in verhaltenswissenschaftlichen Experimenten (teilweise auch im Zusammenhang mit bildgebenden Verfahren), welche Gehirnprozesse von Menschen untersuchen.\nKognitive Neurowissenschaften sind eng verkn√ºpft mit Forschungsbereichen, wie beispielsweise der Psychologie, der Linguistik, k√ºnstlicher Intelligenz, Philosophie und Anthropologie:\n\n\n\nGrafik von O. Guest (2024) modifiziert nach dem Paper van Rooji et al.¬†2023: Reclaiming AI as a theoretical tool for cognitive science\n\n\n\nWer sich f√ºr die Bedeutung von AI im Zusammenhang mit den Neurowissenschaften interessiert findet im Paper von Rooji et al.¬†eine kritische Auseinandersetzung mit Chancen und Herausforderungen dieser Verkn√ºpfung."
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html#besondere-herausforderungen-von-experimenten-in-den-verhaltens-neurowissenschaften",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html#besondere-herausforderungen-von-experimenten-in-den-verhaltens-neurowissenschaften",
    "title": "Neurowissenschaftliche Experimente",
    "section": "Besondere Herausforderungen von Experimenten in den Verhaltens-/Neurowissenschaften",
    "text": "Besondere Herausforderungen von Experimenten in den Verhaltens-/Neurowissenschaften\n\nPr√§zision: Hohe r√§umliche und zeitliche Aufl√∂sung\nEine grosse Schwierigkeit neurowissenschaftlicher Experimente ist oft, dass eine pr√§zise Kontrolle von r√§umlichen und zeitliche Eigenschaften der Experimente n√∂tig ist um sinnvolle Daten zu erhalten. Visuelle Stimuli m√ºssen z.B. sehr genau und immer gleich pr√§sentiert werden k√∂nnen. Die zeitliche Aufl√∂sung ist gerade bei EEG Experimenten von enormer Bedeutung, da EEG eine sehr hohe zeitliche Aufl√∂sung hat. R√§umliche Aufl√∂sung kann bedeuten, dass sehr pr√§zise visuelle Darbietung m√∂glich sein muss, sowie dass die Versuchsperson sich im Setup nicht bewegen darf, weil dies die Distanzen verschiebt (z.B. im MRT, oder der Abstand zum Bildschirm beim Eyetracking).\n\n\nSynchronisation: Mehrere Datenspuren\nNeurowissenschaftliche Experimente beinhalten oft die Datenerhebung auf mehreren Ebenen, z.B. wird gleichzeitig Hirnaktivit√§t und das Dr√ºcken von Antwortbuttons aufgenommen. Das bedeutet, dass Bildschirm, MRT/EEG/Eyetracking/etc., sowie die Antwort zeitlich koregistriert/synchronisiert werden m√ºssen, um die Daten im Nachhinein auswerten zu k√∂nnen. Technisch ist das oft mit grossem Aufwand verbunden und ben√∂tigt einiges an Pilotierung.\n\n\nKomplexit√§t: Zu untersuchender Prozess und St√∂rprozesse\nOft soll ein ganz spezifischer Prozess untersucht werden, aber das ist eine sehr komplexe Aufgabe, weil im menschlichen Gehirn gleichzeitig sehr viele verschiedene Prozesse ablaufen, kein Hirnareal hat nur eine einzige Aufgabe und aus ethischen Gr√ºnden ist das ‚ÄúAusschalten‚Äù von St√∂rfaktoren nicht immer m√∂glich. Was kann man tun?\nEin Weg den Prozess sichtbar zu machen ist es zum Beispiel einen Kontrast zu rechnen, dies wird beispielsweise bei EEG und fMRI Experimenten, aber auch bei Reaktionszeitexperimenten sehr oft gemacht. Hierf√ºr erhebt man Daten in einer Test-Bedingung in der der Prozess abgerufen wird und eine Kontroll-Bedingung, welche als ‚ÄúBaseline‚Äù dient. Die Baseline enth√§lt alle ‚Äúnicht interessierenden‚Äù Prozesse, die in der Test-Bedingung vorhanden sind. Durch das Vergleichen der Test- und Kontrollbedingung erh√§lt man einen Kontrast: Also das was den interessierenden Prozess ausmacht!\nSie m√ºssen sich beim Erstellen eines Experiments also nicht nur Gedanken dazu machen, was Sie interessiert - sondern genau so auch dar√ºber was Sie nicht interessiert. In der Theorie t√∂nt das einfach, in der Praxis ist das oft recht kniffelig.\n\n\nDatenerhebung: Teuer und anspruchsvoll\nBildgebende Verfahren, ben√∂tigen zum Teil extrem teure Ger√§te, wie z.B. fMRI, und bedeuten oft hohen Aufwand, z.B. das Kleben der Elektroden beim EEG. Bei der Untersuchung von ganz bestimmten Patientengruppen hat man zudem oft nicht sehr viele Personen zur Verf√ºgung die den Einschlusskriterien entsprechen. Oft m√ºssen Personen auch aus dem Experiment ausgeschlossen werden, weil sie z.B. Auff√§lligkeiten im MRI zeigen, die nichts mit dem zu untersuchenden Prozess zu tun hat oder sie brechen w√§hrend der Untersuchung ab. Gerade bei der Untersuchung klinischer Aspekte stellen sich oft Schwierigkeiten, wie beispielsweise fehlende Motivation oder Compliance von Patient:innen. Daher k√∂nnen oft keine sehr grossen Stichproben erhoben werden, was im Gegenzug besonders pr√§zise Experimente erfordert.\n\n\nPassendes Experiment muss selber erstellt werden\nOft muss ein neues Paradigma erstellt werden, d.h. Forschende k√∂nnen kein schon bestehendes Experiment nutzen, sondern untersuchen einen Aspekt eines neuronalen Prozesses mit einer neuen Methode, einer neuen Fragestellung oder einem neuen Ansatz. Dies erfordert breiteKenntnisse im Programmieren, der zu verwendenden Technik, wie auch der Gehirnprozesse."
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html#wichtige-elemente-von-experimenten",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html#wichtige-elemente-von-experimenten",
    "title": "Neurowissenschaftliche Experimente",
    "section": "Wichtige Elemente von Experimenten",
    "text": "Wichtige Elemente von Experimenten\nBeim Programmieren von Experimenten lohnt es sich, sich zuerst dar√ºber im klaren zu sein, welche Bausteine das geplante Experiment hat. Im Folgenden werden einige typische Elemente eines Verhaltensexperiments beschrieben. Oft kommen hier nat√ºrlich noch Stimulations- oder Aufnahmemethoden hinzu.\n\nBegr√ºssung und Einverst√§ndniserkl√§rung\nHier wird die Versuchsperson begr√ºsst, wird √ºber das Experiment aufgekl√§rt und gibt (wenn nicht vorher auf Papier schon geschehen) ihre Einverst√§ndnis zur Teilnahme am Experiment. Dies wird je nach Ethikkommission und Ethikantrag unterschiedlich gehandhabt. Wichtige Informationen sind hierbei, dass die Versuchsperson weiss worauf sie sich einl√§sst (Ist zum Beispiel Hirnstimulation/fMRI/etc. geplant? Wie lange dauert das Experiment ungef√§hr? Was soll sie tun, wenn sie abbrechen m√∂chte?). Die Schwierigkeit ist oft, gen√ºgend Information zu geben aber die Hypothese nicht zu verraten.\n\n\nInstruktion\nDie Instruktion wird oft schriftlich gegeben, um diese zwischen den Versuchspersonen konstant zu halten. Es ist teilweise herausfordernd, einen Task so genau zu erkl√§ren, dass er verst√§ndlich ist, aber die Erkl√§rung auch kurz genug zu halten, dass die Instruktion auch gelesen wird. Oft werden √úbungstrials verwendet um die Instruktion zu verdeutlichen.\n\n\nStimuli\nUnter Stimuli werden die gezeigten Elemente verstanden, die den Task ausmachen. Es k√∂nnen T√∂ne, Bilder, W√∂rter, etc. als Stimuli verwendet werden.\n\n\n\n\n\n\nHands-on: Stimuli\n\n\n\nWelche Stimuli aus neurowissenschaftlichen Experimenten kennen Sie?\nTauschen Sie sich mit Ihren Mitstudierenden aus und schreiben/zeichnen Sie ein paar Beispiele vorne an die Tafel.\n[~5 Minuten]\n\n\n\n\nTrial\nEin Trial beschreibt ein sich wiederholender Vorgang in dem der Stimulus gezeigt wird und z.B. von der Versuchsperson eine Antwort erwartet wird. Ein Trial wird oft sehr viele Male wiederholt. Die Stimuli k√∂nnen zwischen den Trials variieren oder gleich bleiben. Das Timing der Trials kann konstant sein (ein Stimulus wird bspw. immer gleich lang gezeigt) oder variiert werden (unterschiedliche Anzeigedauer).\nZwischen den Trials wird ein Inter-Trial-Interval (ITI) festgelegt. Dies wird z.B. bei fMRI Experimenten dann variiert, damit (je nach Repetition Time/TR) nicht immer in derselben Schicht aufgenommen wird bei Stimuluspr√§sentation.\nW√§hrend einem Trial wird die Antwort / Response der Versuchsperson aufgenommen. Bei der Aufnahme von Reaktiosnzeiten muss festgelegt werden, wann der Trial oder die Stimuluspr√§sentation beginnt und mit welcher Handlung sie endet. Es kann bestimmt werden, welche Antworten zul√§ssig sind (bspw. nur bestimmte Tasten) und was passiert wenn eine richtige oder falsche Antwort gegeben wird: Gibt es z.B. ein Feedback bei falschen Antworten?\n\n\nRun / Block\nEin Run/ein Block bezeichnet eine Einheit mit mehreren Trials. Oft werden Bedingungen z.B. zwischen den Runs randomisiert. Zwischen den Runs sind Pausen m√∂glich, damit sich die Versuchsperson erholen kann. Oft wird vor dem Experimentstart ein ‚Äú√úbungsblock‚Äù durchgef√ºhrt, um sich sicher zu sein, dass die Versuchspersonen die Aufgabe und Instruktion verstanden haben.\n\n\nDebriefing und Verabschiedung\nIm Debriefing wird der Versuchsperson erkl√§rt, um was es im Experiment gegangen ist, welche Hypothesen untersucht wurden und eine eventuelle Coverstory aufgedeckt. Oft werden Personen vor dem Debriefing nach der getesteten Hypothese gefragt, um zu schauen, ob sie diese erraten hatten. Das gibt Aufschluss dar√ºber wie sehr das Experiment dadurch verzerrt sein k√∂nnte, dass die Versuchspersonen Bescheid wissen. Wichtig ist es auch den Versuchspersonen zum Schluss zu danken."
  },
  {
    "objectID": "pages/chapters/neurowissenschaftliche_experimente.html#vorgehen-experiment-programmieren",
    "href": "pages/chapters/neurowissenschaftliche_experimente.html#vorgehen-experiment-programmieren",
    "title": "Neurowissenschaftliche Experimente",
    "section": "Vorgehen Experiment programmieren",
    "text": "Vorgehen Experiment programmieren\nWichtige Schritte beim Programmieren von Experimenten sind folgende (nicht unbedingt in dieser Reihenfolge, das kommt auf das Experiment an):\n\nTask ausw√§hlen\nStimuli ausw√§hlen\nTiming festlegen: Dauer Stimuluspr√§sentation? ITIs (Inter-Trial-Intervals)?\nAnzahl Bedingungen und Trials bestimmen (Power bedenken), within oder between Design?\nAblauf des Experiments festlegen: Gesamtdauer? Pausen n√∂tig?\nCoverstory, Stimulus-Masking, etc. n√∂tig?\nEinbindung von allen technischen Ger√§ten (z.B. EEG Recorder, MRT, Brainstimulation-Devices, Eyetracking) und Synchronisation\n\n\nFlowcharts\nBei der Planung und dem Erstellen eines Experiments ist es sehr hilfreich eine Flowchart zu erstellen. In einer Flowchart sind die oben genannten Elemente des Experimentes in Boxen eingezeichnet und mit Pfeilen verbunden um sie zeitlich einzuordnen. Timing-Informationen k√∂nnen unter oder neben den Boxen festgehalten werden. Die Anzahl Repetitionen wird oft neben den Pfeilen eingef√ºgt.\n\nWir werden zu einem sp√§teren Zeitpunkt in diesem Kurs darauf eingehen, wie man ein Experiment m√∂glichst gut planen kann um aussagekr√§ftige Daten zu erhalten. Hier gibt es viele M√∂glichkeiten wie Pilotierung, Datensimulation und die ad√§quate Wahl der statistischen Verfahren in Bezug auf die Fragestellung.\n\nEine Flowchart eignet sich ebenfalls sehr gut, um in einem Artikel darzustellen, wie der Ablauf des Experiments war."
  },
  {
    "objectID": "pages/chapters/datacamp.html",
    "href": "pages/chapters/datacamp.html",
    "title": "DataCamp",
    "section": "",
    "text": "DataCamp ist eine Online-Lernplattform, welche sich auf Data Science und Datenanalyse konzentriert. Es bietet interaktive Kurse, Tutorials und Projekte in verschiedenen Programmiersprachen wie Python, R und SQL auf unterschiedlichen Niveaus an; sowohl f√ºr Anf√§nger als auch f√ºr Fortgeschrittene gibt es ein breites Angebot.\nIm Rahmen dieser Lehrveranstaltung k√∂nnen alle Teilnehmenden sich unter folgendem Link mit ihrer Uni Bern E-Mail Adresse (*students.unibe.ch) registrieren:\nüëâüèº Einladungslink DataCamp Registration\nWir werden jeweils die empfohlenen Datacamp Kurse verlinken. Sie haben mit dem Link jedoch Zugriff auf alle Kurse bis Ende FS24.\nüëâüèº Zur Auffrischung von R-Kenntnissen eignet sich dieser Kurs: Introduction to R\nüëâüèº Als Einf√ºhrung in Python eignet sich folgender Kurs: Introduction to Python"
  },
  {
    "objectID": "pages/chapters/datacamp.html#datacamp",
    "href": "pages/chapters/datacamp.html#datacamp",
    "title": "DataCamp",
    "section": "",
    "text": "DataCamp ist eine Online-Lernplattform, welche sich auf Data Science und Datenanalyse konzentriert. Es bietet interaktive Kurse, Tutorials und Projekte in verschiedenen Programmiersprachen wie Python, R und SQL auf unterschiedlichen Niveaus an; sowohl f√ºr Anf√§nger als auch f√ºr Fortgeschrittene gibt es ein breites Angebot.\nIm Rahmen dieser Lehrveranstaltung k√∂nnen alle Teilnehmenden sich unter folgendem Link mit ihrer Uni Bern E-Mail Adresse (*students.unibe.ch) registrieren:\nüëâüèº Einladungslink DataCamp Registration\nWir werden jeweils die empfohlenen Datacamp Kurse verlinken. Sie haben mit dem Link jedoch Zugriff auf alle Kurse bis Ende FS24.\nüëâüèº Zur Auffrischung von R-Kenntnissen eignet sich dieser Kurs: Introduction to R\nüëâüèº Als Einf√ºhrung in Python eignet sich folgender Kurs: Introduction to Python"
  },
  {
    "objectID": "pages/admin/wichtiges.html",
    "href": "pages/admin/wichtiges.html",
    "title": "Wichtiges zum Kurs",
    "section": "",
    "text": "In diesem anwendungsorientierten Kurs erwerben Sie Wissen √ºber Methoden der Datenerhebung, -verarbeitung und -analyse im Feld der Neurowissenschaften. Wir behandeln im Rahmen der Veranstaltung folgende Inhalte:\n\nWichtige Programmiersprachen und - umgebungen in den Neurowissenschaften\nProgrammieren von computerbasierten Experimenten (mit PsychoPy)\nProgrammieren von Datenverarbeitungspipelines: Datenvorverarbeitung und Visualisierung (‚Äûgood practices‚Äù, Data Cleaning, Reproduzierbarkeit)\nAnalysemethoden und Modelle zugeschnitten auf unterschiedliche neurowissenschaftliche Datens√§tze und Fragestellungen mit frequentistischen wie auch bayesianischen Verfahren (u.a. Reaktionszeiten, Signal detection theory, Drift diffusion models)\nInterpretation und kritische Einordnung von Analyseergebnissen"
  },
  {
    "objectID": "pages/admin/wichtiges.html#ilias",
    "href": "pages/admin/wichtiges.html#ilias",
    "title": "Wichtiges zum Kurs",
    "section": "Ilias",
    "text": "Ilias\nUnter diesen Links finden Sie die Iliasgruppen:\nILIAS (Montag) üëâ 468703-FS2024-0\nILIAS (Mittwoch) üëâ 468703-FS2024-1"
  },
  {
    "objectID": "pages/admin/wichtiges.html#kursvoraussetzungen",
    "href": "pages/admin/wichtiges.html#kursvoraussetzungen",
    "title": "Wichtiges zum Kurs",
    "section": "Kursvoraussetzungen",
    "text": "Kursvoraussetzungen\nWir werden mit der Programmiersprache R und zu einem kleinen Teil mit Python arbeiten. Sie ben√∂tigen in der Veranstaltung deshalb einen eigenen Laptop (Tablets sind nicht geeignet!) mit ca. 20 GB freiem Speicherplatz und mit einer installierten (aktuellen) Version von R und RStudio (Link zum Download von R und RStudio).\nR Kenntnisse (gem√§ss Statistik I-IV in Psychologie) werden vorausgesetzt. Zur Auffrischung dient folgender Link (https://methodenlehre.github.io/einfuehrung-in-R/) oder f√ºr Fortgeschrittene die B√ºcher ‚ÄûAdvanced R‚Äù und ‚ÄûR for Data Scientists‚Äù von Hadley Wickham."
  },
  {
    "objectID": "pages/admin/wichtiges.html#anwesenheit",
    "href": "pages/admin/wichtiges.html#anwesenheit",
    "title": "Wichtiges zum Kurs",
    "section": "Anwesenheit",
    "text": "Anwesenheit\nDie Anwesenheit im Kurs wird vorausgesetzt (2 Abwesenheiten sind ok). Wir w√ºrden den Kurs gerne ohne Anwesenheitskontrollen durchf√ºhren - falls n√∂tig werden wir dies aber einf√ºhren.\nDas Online-Skript erlaubt das Nacharbeiten des wichtigsten Stoffes im Eigenstudium, wir k√∂nnen jedoch nicht f√ºr die Vollst√§ndigkeit garantieren. Hilfestellung beim Programmieren und Verstehen der Inhalte bieten wir w√§hrend der Kurszeiten an, aus zeitlichen Gr√ºnden k√∂nnen wir keine Beantwortung von Fragen zum Kursinhalt per E-Mail anbieten. Bitte stellen Sie Ihre Fragen in der Veranstaltung - auch Ihre Mitstudierenden werden davon profitieren, oft haben mehrere Personen dieselbe Frage."
  },
  {
    "objectID": "pages/admin/wichtiges.html#form-der-leistungsnachweise",
    "href": "pages/admin/wichtiges.html#form-der-leistungsnachweise",
    "title": "Wichtiges zum Kurs",
    "section": "Form der Leistungsnachweise",
    "text": "Form der Leistungsnachweise\nLeistungsnachweise werden in Form von vier √úbungen, zwei Quizzes und einem Glossareintrag erbracht. Hiervon m√ºssen alle abgegeben und als bestanden bewertet werden. Bei Nicht-Bestehen erhalten Sie eine 2. Frist f√ºr die Abgabe oder einen Zusatzauftrag.\nAlle Leistungsnachweise werden in den Veranstaltungen angek√ºndigt. Die schon bekannten Termine (oder die ungef√§hre Planung) f√ºr die Leistungsnachweise finden Sie hier.\n\n√úbungen\nDie √úbungen werden auf der Website aufgeschaltet. Die Ergebnisse der √úbungen m√ºssen in den entsprechenden Ordner auf ILIAS hochgeladen werden. Je nach Umfang der √úbung wird die Zeit bis zur Abgabe unterschiedlich ausfallen. Sie wird jedoch immer mindestens zwei Wochen betragen.\n\n\nQuizzes\nDas erste Quiz wird w√§hrend der ersten Veranstaltung durchgef√ºhrt und dient vor allem dazu zu erheben, welche Kenntnisse schon vorhanden sind. Das zweite Quiz wird gegen Ende des Semesters stattfinden und das Gelernte pr√ºfen.\n\n\nGlossareintrag\nWir erstellen als Kurs gemeinsam einen Glossar zu den wichtigen Begriffen im Themenbereich. Dieser wird auf der Kurswebsite publiziert, und kann als Nachschlagewerk verwendet werden."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Neurowissenschaft Computerlab",
    "section": "",
    "text": "Fr√ºhjahrssemester 2024"
  },
  {
    "objectID": "pages/admin/termine.html",
    "href": "pages/admin/termine.html",
    "title": "Termin√ºbersicht",
    "section": "",
    "text": "Termine und Leistungsnachweise\nAn den 13 Sitzungen werden wir folgende Themen behandeln (kleine √Ñnderungen vorbehalten):\n\n1 Einf√ºhrung\nSitzung 1 (19./21. Februrar 2024)\n\nEinf√ºhrung in Programmiersprachen und -umgebungen im neurowissenschaftlichen Kontext (Python, R, Matlab, Julia, Bash) und ihre Programmierumgebungen (z.B. RStudio, PsychoPy, usw.)\n\n\n\n\nInstallieren der f√ºr den Kurs ben√∂tigten Software\nDatacamp-Kurse anschauen und belegen.\nQuiz 1 ausf√ºllen (siehe Ilias)\n\n\n\n2 Experimente programmieren\nSitzung 2 (26./28. Februrar 2024)\nSitzung 3 (4./6. M√§rz 2024)\n\n√úbersicht Leistungsnachweise,\nExperimente in den Neurowissenschaften: Elemente und Herausforderungen\nErstellen von zwei computerbasierten Experimenten mit Python und PsychoPy\n√úbung 1: Datenerhebung\n\n\n\n3 Data Wrangling & Daten visualisieren\nSitzung 4 (11./13. M√§rz 2024)\nSitzung 5 (18./20. M√§rz 2024)\nSitzung 6 (25./27. M√§rz 2024)\nSitzung 7 (8./.10. April 2024)\n\nArbeiten in R mit Projekten und Rmarkdown\nDaten mit R einlesen, bearbeiten und visualisieren\nOpen Science, Reproduzierbarkeit und Datenmanagement: wie neurowissenschaftliche Daten und Datenverarbeitungspipelines sinnvoll gestaltet und geteilt werden k√∂nnen\n√úbung 2: Datenverarbeiten und visualisieren\n\nFerien: 1./3. April: Vorlesungsfreie Zeit\n\n\n4 Analysemethoden\nSitzung 8 (15./17. April 2024)\nSitzung 9 (22./24. April 2024)\nSitzung 10 (29. April und 1. Mai 2024)\n\nBesonderheiten neurowissenschaftlicher Daten und Analysen\nfrequentistische und bayesianische Analyseverfahren\n√úbung 3: Datensatz analysieren\n\n\n\n5 Modelle\nSitzung 11 (6../8. Mai 2024)\nSitzung 12 (13./15. Mai 2024)\nTermine von Mo 20. Mai 2024 und Mi 22. Mai 2024 fallen aus (Pfingstmontag)\nSitzung 13 (27./29. Mai 2014)\n\nSignalentdeckungstheorie (signal detection theory, SDT)\nDrift Diffusion Models (DDM)\n√úbung 4: Datensatz analysieren\nQuiz 2: Abschlussquiz\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "pages/chapters/computerlab.html",
    "href": "pages/chapters/computerlab.html",
    "title": "Computerlab",
    "section": "",
    "text": "In diesem anwendungsbasierten Kurs lernen Sie mit Daten zu arbeiten. Der Computer ist dabei ein absolut notwendiges Werkzeug. Unser Fokus liegt auf der Vermittlung von Anwendungskenntnisse. Die Termine setzen sich deshalb aus Inputs und Hands-on Sessions zusammen.\nAls Einstieg schauen wir uns an, wo der Computer in einem Forschungsprojekt gebraucht wird, wo er die Arbeit erleichtert."
  },
  {
    "objectID": "pages/chapters/computerlab.html#neurocomp-lab",
    "href": "pages/chapters/computerlab.html#neurocomp-lab",
    "title": "Computerlab",
    "section": "",
    "text": "In diesem anwendungsbasierten Kurs lernen Sie mit Daten zu arbeiten. Der Computer ist dabei ein absolut notwendiges Werkzeug. Unser Fokus liegt auf der Vermittlung von Anwendungskenntnisse. Die Termine setzen sich deshalb aus Inputs und Hands-on Sessions zusammen.\nAls Einstieg schauen wir uns an, wo der Computer in einem Forschungsprojekt gebraucht wird, wo er die Arbeit erleichtert."
  },
  {
    "objectID": "pages/chapters/neurowissenschaft.html",
    "href": "pages/chapters/neurowissenschaft.html",
    "title": "Neurowissenschaft",
    "section": "",
    "text": "In der Neurowissenschaft wird mit naturwissenschaftlichem Schwerpunkt der Aufbau und die Funktionen des Nervensystems untersucht.\nLink Uni\n\n\n\n\n\n\n\n\n\nBereich\nBeschreibung\n\n\n\n\nBehavioral neuroscience\nEinfluss des Gehirns auf Verhalten\n\n\nClinical neuroscience\nSt√∂rungen des Nervensystems, Vorbeugung, Behandlung und Rehabilitation\n\n\nComputational neuroscience\nSimulation und Modellierung von Hirnfunktionen\n\n\nCultural neuroscience\nEinfluss kultureller Faktoren auf das Gehirn\n\n\nDevelopmental neuroscience\nEntwicklung des Nervensystems √ºber die ganze Alterspanne\n\n\nMolecular and cellular neuroscience\nRolle einzelner Molek√ºle, Gene und Proteine bei der Funktion des Nervensystems\n\n\nNeuroengineering\nneuronale Systeme verstehen, ersetzen, reparieren oder verbessern\n\n\nNeuroimaging\nTeilbereich medizinischer Bildgebung mit Fokus auf dem Gehirn\n\n\nNeuroinformatics\nEntwicklung von Methoden zur Sammlung, Analyse, Nutzung und Ver√∂ffentlichung von Daten\n\n\nNeurolinguistics\nRolle des Gehirns beim erwerben, speichern, verstehen und ausdr√ºcken von Sprache\n\n\nNeurophysiology\nRolle des Nervensystems von der subzellul√§ren Ebene bis hin zu ganzen Organen\n\n\n\nQuelle\nAufteilung nach:\n\nUntersuchter Spezies\n\nz.B. Mensch, Affe, Zebrafisch, Fruchtfliege\n\nverwendeter Methode\n\nz.B. EEG, fMRI, Verhalten"
  },
  {
    "objectID": "pages/chapters/neurowissenschaft.html#hauptbereiche-der-neurowissenschaften",
    "href": "pages/chapters/neurowissenschaft.html#hauptbereiche-der-neurowissenschaften",
    "title": "Neurowissenschaft",
    "section": "",
    "text": "Bereich\nBeschreibung\n\n\n\n\nBehavioral neuroscience\nEinfluss des Gehirns auf Verhalten\n\n\nClinical neuroscience\nSt√∂rungen des Nervensystems, Vorbeugung, Behandlung und Rehabilitation\n\n\nComputational neuroscience\nSimulation und Modellierung von Hirnfunktionen\n\n\nCultural neuroscience\nEinfluss kultureller Faktoren auf das Gehirn\n\n\nDevelopmental neuroscience\nEntwicklung des Nervensystems √ºber die ganze Alterspanne\n\n\nMolecular and cellular neuroscience\nRolle einzelner Molek√ºle, Gene und Proteine bei der Funktion des Nervensystems\n\n\nNeuroengineering\nneuronale Systeme verstehen, ersetzen, reparieren oder verbessern\n\n\nNeuroimaging\nTeilbereich medizinischer Bildgebung mit Fokus auf dem Gehirn\n\n\nNeuroinformatics\nEntwicklung von Methoden zur Sammlung, Analyse, Nutzung und Ver√∂ffentlichung von Daten\n\n\nNeurolinguistics\nRolle des Gehirns beim erwerben, speichern, verstehen und ausdr√ºcken von Sprache\n\n\nNeurophysiology\nRolle des Nervensystems von der subzellul√§ren Ebene bis hin zu ganzen Organen\n\n\n\nQuelle\nAufteilung nach:\n\nUntersuchter Spezies\n\nz.B. Mensch, Affe, Zebrafisch, Fruchtfliege\n\nverwendeter Methode\n\nz.B. EEG, fMRI, Verhalten"
  },
  {
    "objectID": "pages/chapters/programmieren_1.html",
    "href": "pages/chapters/programmieren_1.html",
    "title": "Sprachen & Umgebungen",
    "section": "",
    "text": "Programmiersprachen sind essentielle Werkzeuge f√ºr die Neurowissenschaftliche Forschung. Wir werden uns zuerst einen kurzen √úberblick √ºber h√§ufig verwendete Programmiersprachen verschaffen und kurz deren Verwendungszwecke und Vor- und Nachteile diskutieren.\n\n\n\n\n\nMatlab ist ein Software f√ºr numerische Anwendung, welche in den Ingenieurwissenschaften, Naturwissenschaften und der Mathematik weit verbreitet ist.\n\n\n\nLeistungsstarke Matrix- und Vektoroperationen, gut geeignet f√ºr Matrix-basierte Operationen, die in der Neurowissenschaftlichen Forschung h√§ufig vorkommen.\nUmfangreiche Bibliothek von integrierten Funktionen f√ºr wissenschaftliches Rechnen.\n\n\n\n\n\nTeuer\nWeniger flexibel als Python oder R in Bezug auf Datenarten und Strukturen.\nMatlab is kommerziell und propriet√§r. Dies bedeutet man muss teuere Lizenzen kaufen, und der Source Code der Software ist nicht offen.\n\n\n\n\n\nDatenverarbeitung und -analyse\nVisualisierung\nViele fMRI Forscher arbeiten mit Matlab, da es daf√ºr eine spezielle Toolbox gibt: SPM\nExperimente programmieren, z.B. mit Psychtoolbox\n\n\n\n\nload('data.mat')\nfs = 1000;\nt = (0:numel(data)-1)/fs;\nplot(t, data)\n\n\n\n\n\nPython ist eine allgemeine (general purpose) Programmiersprache, die in vielen verschiedenen Bereichen wie wissenschaftlichem Rechnen, Datenanalyse und maschinellem Lernen weit verbreitet ist.\n\n\n\n\nEine Vielzahl von Bibliotheken und Modulen wie NumPy, SciPy und Pandas, die leistungsstarke Werkzeuge f√ºr wissenschaftliches Rechnen und Datenanalyse bieten.\nDatenanalysewerkzeuge wie Pandas-Dataframes, die Seaborn-Visualisierungsbibliothek, und Jupyter Notebooks.\nOpen-source und kostenlos\n\n\n\n\n\nKann in einigen numerischen Berechnungen langsamer sein als Matlab.\nDa Python eine allgemeine Sprache ist, muss man f√ºr numerische Anwendungen immer verschiedene Packages importieren (z.B.) numpy, wenn man damit rechnen will. Dies f√ºhrt zu weniger gut lesbarem Code.\n\n\n\n\n\nDatenverarbeitung und -analyse,\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\nExperimente programmieren, z.B. mit PsychoPy\n\n\n\n\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('data.csv')\nsns.lineplot(data=data, x='time', y='voltage')\n\n\n\n\n\nR ist eine Programmiersprache f√ºr statistisches Rechnen und Grafiken.\n\n\n\n\nEntwickelt von Statistikern f√ºr statistisches Rechnen und Grafiken.\nEine gro√üe Bibliothek von statistischen Werkzeugen und Paketen, einschliesslich Visualisierungspackages (grammar of graphics).\nOpen-source und kostenlos\ntidyverse Packages f√ºr Data Wrangling (sehr elegante Syntax, um mit Daten zu arbeiten).\n\n\n\n\n\nSteilere Lernkurve als Python.\nKann in einigen numerischen Berechnungen langsamer sein als Matlab oder Python.\nEntwickelt von Statistiker (nicht von Software Designers). R gilt als sehr idiosynkratisch.\n\n\n\n\n\nStatistische Analyse\nDatenvisualisierung. R hat eine sehr gute Bibliothek f√ºr Grafiken, die ggplot2 Bibliothek. Diese Bibliothek verwendet die sogenannte grammar of graphics (GoG) - eine Methode, um Daten in Grafiken zu visualisieren. Die GoG ist eine sehr elegante und effiziente Methode, um Daten zu visualisieren.\n\n\n\n\nlibrary(tidyverse)\ndata &lt;- read.csv('data.csv')\nggplot(data, aes(x=time, y=voltage)) + geom_line()\n\n\n\n\n\nJulia ist eine allgemeine (general purpose) Programmierspache, die vor allem f√ºr numerisches und wissenschaftliches Rechnen entwickelt wurde.\n\n\n\n\nEntwickelt von Mathematikern f√ºr scientific computing\nLeistungsstark und schnell\nOpen-source und kostenlos\n\n\n\n\n\nwenig verbreitet\n\n\n\n\n\nDatenverarbeitung und -analyse,\nSignalverarbeitung\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\n\n\n\n\nusing CSV, DataFrames, AlgebraOfGraphics, CairoMakie\ndat = CSV.read('data.csv', DataFrame)\ndata(dat) * visual(Lines) * mapping(:time, :voltage) |&gt; draw()\n\n\n\n\n\nBash ist eine Mensch-Maschine-Schnittstelle und dient als Grundlage unixbasierter Betriebssysteme (Linux, macOS). Mit Bash-Skripts k√∂nnen repetitive Aufgaben automatisiert werden, was Fehler vermeidet und komplexe Aufgaben vereinfacht.\n\n\n\n\nEinfaches Konzept und Verwendung\nBereits instaliert (nicht auf Windows)\n\n\n\n\n\nSteile Lernkurve\nUmstellung notwendig von GUI\n\n\n\n\n\nAutomatisierung\neinfache bis komplexe Applikationen\nInteraktion mit dem High Performance Computing Cluster der Universit√§t Bern\n\n\n\n\n#!/bin/bash\necho \"Enter Your Name\"\nread name\nprintf \"\\n Welcome $name \\n\\n\"\n\n\n\nDiese Sprachen sind leistungsstarke Werkzeuge f√ºr die neurowissenschaftliche Forschung. Die Wahl der Sprache h√§ngt unter anderem von der spezifischen Aufgabe ab. Weitere Faktoren ist Tradition: bestimmte Gruppen bevorzugen eher eine Sprache als andere. So ist Matlab unter Ingenieuren weit verbreiten und R unter Statistikern. Python ist im Bereich K√ºnstliche Intelligenz und Machine Learning die beliebteste Sprache. Eine neuere Sprache ist Julia - diese vereint die Vorteile aller oben genannten Sprachen (ohne viele deren Nachteile), ist aber weniger weit verbreitet.\nUm mehr zu erfahren, erkunden Sie die umfangreichen Online-Ressourcen und Dokumentationen f√ºr jede Sprache."
  },
  {
    "objectID": "pages/chapters/programmieren_1.html#programmiersprachen",
    "href": "pages/chapters/programmieren_1.html#programmiersprachen",
    "title": "Sprachen & Umgebungen",
    "section": "",
    "text": "Programmiersprachen sind essentielle Werkzeuge f√ºr die Neurowissenschaftliche Forschung. Wir werden uns zuerst einen kurzen √úberblick √ºber h√§ufig verwendete Programmiersprachen verschaffen und kurz deren Verwendungszwecke und Vor- und Nachteile diskutieren.\n\n\n\n\n\nMatlab ist ein Software f√ºr numerische Anwendung, welche in den Ingenieurwissenschaften, Naturwissenschaften und der Mathematik weit verbreitet ist.\n\n\n\nLeistungsstarke Matrix- und Vektoroperationen, gut geeignet f√ºr Matrix-basierte Operationen, die in der Neurowissenschaftlichen Forschung h√§ufig vorkommen.\nUmfangreiche Bibliothek von integrierten Funktionen f√ºr wissenschaftliches Rechnen.\n\n\n\n\n\nTeuer\nWeniger flexibel als Python oder R in Bezug auf Datenarten und Strukturen.\nMatlab is kommerziell und propriet√§r. Dies bedeutet man muss teuere Lizenzen kaufen, und der Source Code der Software ist nicht offen.\n\n\n\n\n\nDatenverarbeitung und -analyse\nVisualisierung\nViele fMRI Forscher arbeiten mit Matlab, da es daf√ºr eine spezielle Toolbox gibt: SPM\nExperimente programmieren, z.B. mit Psychtoolbox\n\n\n\n\nload('data.mat')\nfs = 1000;\nt = (0:numel(data)-1)/fs;\nplot(t, data)\n\n\n\n\n\nPython ist eine allgemeine (general purpose) Programmiersprache, die in vielen verschiedenen Bereichen wie wissenschaftlichem Rechnen, Datenanalyse und maschinellem Lernen weit verbreitet ist.\n\n\n\n\nEine Vielzahl von Bibliotheken und Modulen wie NumPy, SciPy und Pandas, die leistungsstarke Werkzeuge f√ºr wissenschaftliches Rechnen und Datenanalyse bieten.\nDatenanalysewerkzeuge wie Pandas-Dataframes, die Seaborn-Visualisierungsbibliothek, und Jupyter Notebooks.\nOpen-source und kostenlos\n\n\n\n\n\nKann in einigen numerischen Berechnungen langsamer sein als Matlab.\nDa Python eine allgemeine Sprache ist, muss man f√ºr numerische Anwendungen immer verschiedene Packages importieren (z.B.) numpy, wenn man damit rechnen will. Dies f√ºhrt zu weniger gut lesbarem Code.\n\n\n\n\n\nDatenverarbeitung und -analyse,\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\nExperimente programmieren, z.B. mit PsychoPy\n\n\n\n\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('data.csv')\nsns.lineplot(data=data, x='time', y='voltage')\n\n\n\n\n\nR ist eine Programmiersprache f√ºr statistisches Rechnen und Grafiken.\n\n\n\n\nEntwickelt von Statistikern f√ºr statistisches Rechnen und Grafiken.\nEine gro√üe Bibliothek von statistischen Werkzeugen und Paketen, einschliesslich Visualisierungspackages (grammar of graphics).\nOpen-source und kostenlos\ntidyverse Packages f√ºr Data Wrangling (sehr elegante Syntax, um mit Daten zu arbeiten).\n\n\n\n\n\nSteilere Lernkurve als Python.\nKann in einigen numerischen Berechnungen langsamer sein als Matlab oder Python.\nEntwickelt von Statistiker (nicht von Software Designers). R gilt als sehr idiosynkratisch.\n\n\n\n\n\nStatistische Analyse\nDatenvisualisierung. R hat eine sehr gute Bibliothek f√ºr Grafiken, die ggplot2 Bibliothek. Diese Bibliothek verwendet die sogenannte grammar of graphics (GoG) - eine Methode, um Daten in Grafiken zu visualisieren. Die GoG ist eine sehr elegante und effiziente Methode, um Daten zu visualisieren.\n\n\n\n\nlibrary(tidyverse)\ndata &lt;- read.csv('data.csv')\nggplot(data, aes(x=time, y=voltage)) + geom_line()\n\n\n\n\n\nJulia ist eine allgemeine (general purpose) Programmierspache, die vor allem f√ºr numerisches und wissenschaftliches Rechnen entwickelt wurde.\n\n\n\n\nEntwickelt von Mathematikern f√ºr scientific computing\nLeistungsstark und schnell\nOpen-source und kostenlos\n\n\n\n\n\nwenig verbreitet\n\n\n\n\n\nDatenverarbeitung und -analyse,\nSignalverarbeitung\nVisualisierung\nMachine learning und K√ºnstliche Intelligenz\n\n\n\n\nusing CSV, DataFrames, AlgebraOfGraphics, CairoMakie\ndat = CSV.read('data.csv', DataFrame)\ndata(dat) * visual(Lines) * mapping(:time, :voltage) |&gt; draw()\n\n\n\n\n\nBash ist eine Mensch-Maschine-Schnittstelle und dient als Grundlage unixbasierter Betriebssysteme (Linux, macOS). Mit Bash-Skripts k√∂nnen repetitive Aufgaben automatisiert werden, was Fehler vermeidet und komplexe Aufgaben vereinfacht.\n\n\n\n\nEinfaches Konzept und Verwendung\nBereits instaliert (nicht auf Windows)\n\n\n\n\n\nSteile Lernkurve\nUmstellung notwendig von GUI\n\n\n\n\n\nAutomatisierung\neinfache bis komplexe Applikationen\nInteraktion mit dem High Performance Computing Cluster der Universit√§t Bern\n\n\n\n\n#!/bin/bash\necho \"Enter Your Name\"\nread name\nprintf \"\\n Welcome $name \\n\\n\"\n\n\n\nDiese Sprachen sind leistungsstarke Werkzeuge f√ºr die neurowissenschaftliche Forschung. Die Wahl der Sprache h√§ngt unter anderem von der spezifischen Aufgabe ab. Weitere Faktoren ist Tradition: bestimmte Gruppen bevorzugen eher eine Sprache als andere. So ist Matlab unter Ingenieuren weit verbreiten und R unter Statistikern. Python ist im Bereich K√ºnstliche Intelligenz und Machine Learning die beliebteste Sprache. Eine neuere Sprache ist Julia - diese vereint die Vorteile aller oben genannten Sprachen (ohne viele deren Nachteile), ist aber weniger weit verbreitet.\nUm mehr zu erfahren, erkunden Sie die umfangreichen Online-Ressourcen und Dokumentationen f√ºr jede Sprache."
  },
  {
    "objectID": "pages/chapters/programmieren_1.html#programmierumgebungen",
    "href": "pages/chapters/programmieren_1.html#programmierumgebungen",
    "title": "Sprachen & Umgebungen",
    "section": "Programmierumgebungen",
    "text": "Programmierumgebungen\nEine IDE kombiniert h√§ufig verwendete Entwicklertools in einer grafischen Benutzeroberfl√§che. Typischerweise handelt es sich dabei um Funktionen wie Softwarebearbeitung, Erstellung und Testen von Code.\nIn diesem Kurs werden wir RStudio verwenden."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html",
    "href": "pages/chapters/psychopy_experiments.html",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "",
    "text": "In diesem Kurs fokussieren wir auf verhaltenswissenschaftliche Forschung, die sich f√ºr die Gehirnprozesse von Menschen interessiert. Wir erstellen in PsychoPy selber zwei Experimente aus der Wahrnehmungs- und Entscheidungsforschung sowie der Neuropsychologie an. Das Random Dot Experiment ist ein perzeptuelles Entscheidungsexperiment mit welchem wir den Einfluss von Anweisungen/Instruktionen auf Entscheidungen untersuchen. Das Stroop Experiment beinhaltet eine typische Aufgabe aus der (klinischen) Neuropsychologie zur Untersuchung von exekutiven Funktionen.\nPsychoPy ist eine kostenfreie Software zum Erstellen von verhaltenswissenschaftlichen Experimenten im Labor oder Online. Die Software basiert auf der Programmiersprache Python, man kann die Experimente (mit gewissen Begrenzungen) jedoch auch in einem GUI (guided user interface) erstellen und braucht so (fast) keine Programmierkenntnisse. PsychoPy-Experimente erm√∂glichen pr√§zise r√§umliche und zeitliche Kontrolle. (Peirce et al.¬†2019)\nIn PsychoPy erstellen Experimente k√∂nnen direkt auf Pavlovia hochgeladen, und so als Online-Experimente gehostet und durchgef√ºhrt werden. Die Speicherung des Experimentes auf gitlab erm√∂glicht dabei eine Versionskontrolle sowie das Teilen des Experimentalcodes."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#experiment-file-erstellen-und-abspeichern",
    "href": "pages/chapters/psychopy_experiments.html#experiment-file-erstellen-und-abspeichern",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "1.1 Experiment-File erstellen und abspeichern",
    "text": "1.1 Experiment-File erstellen und abspeichern\n\n√ñffnen Sie PsychoPy und speichern Sie in einem daf√ºr erstellten Ordner (z.B. psychopy_experiment) das Experiment-File ab (z.B. unter experiment_stroop-task)."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#builder-gui-und-coder",
    "href": "pages/chapters/psychopy_experiments.html#builder-gui-und-coder",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "1.2 Builder (GUI) und Coder?",
    "text": "1.2 Builder (GUI) und Coder?\nExperimente k√∂nnen in PsychoPy mit dem Builder (in einem GUI) erstellt werden, der Python Code wird so automatisch f√ºr Sie generiert. Sie k√∂nnen sich diesen Code auch anschauen und ver√§ndern. Leider k√∂nnen Sie sobald Sie den Code ver√§ndert haben, diese √Ñnderungen nicht zur√ºck in den Builder √ºbertragen. Im Builder-Modus k√∂nnen Sie aber Codest√ºcke einf√ºgen um einzelne Teile des Experiments in Python (oder anderen Programmiersprachen) zu programmieren und dennoch im Builder weiterarbeiten zu k√∂nnen.\n\nFalls Sie planen ein Online-Experiment durchzuf√ºhren, eignet sich der Builder besonders, da die Experimente direkt online durchgef√ºhrt werden k√∂nnen."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#stimuli",
    "href": "pages/chapters/psychopy_experiments.html#stimuli",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.1 Stimuli",
    "text": "2.1 Stimuli\nIn PsychoPy finden Sie schon vorprogrammierte Stimulus Elemente, wie Gratings oder Rating Scales und k√∂nnen Texte, geometrische Figuren, Bilder und Filme einf√ºgen. Auch komplexere Stimuluselemente wie Random Dots k√∂nnen sehr einfach konfiguriert werden ohne dass sie von Grund auf neu programmiert werden m√ºssen.\n\nErstellen Sie einen Stimulus. Beachten Sie folgende Aspekte:\n\nFarbe\nGr√∂sse\nweitere Eigenschaften, wie Bedingung/Kongruenz?\nTiming (Stimulusdauer, Stimulusende)\n\nNotieren Sie, welche Eigenschaften des Stimulus sich √ºber die Trials hinweg ver√§ndern sollte. Dies k√∂nnen auch mehrere Eigenschaften sein. Diese Liste ben√∂tigen Sie sp√§ter."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#trial",
    "href": "pages/chapters/psychopy_experiments.html#trial",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.2 Trial",
    "text": "2.2 Trial\n\nErg√§nzen Sie alle Elemente, die f√ºr einen vollst√§ndigen Trial notwendig sind:\n\nAntwort der Versuchsperson / Response (siehe auch 2.4)\nInter-Trial-Intervall (ITI): kann vor oder nach dem Stimulus eingef√ºgt werden. (Die Zeit des ITI wird oft variiert. Dies m√ºsste also auch auf die Liste oben)\nFixationskreuz?\nMask?\nFeedback?"
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#trialschleife",
    "href": "pages/chapters/psychopy_experiments.html#trialschleife",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.3 Trialschleife",
    "text": "2.3 Trialschleife\nSie m√ºssen nicht alle Trials (oder in PsychoPy: Routines) des Experiments einzeln programmieren, sondern k√∂nnen diese wiederholen, in dem Sie eine Trial-Schleife (loop) um den Trial herum erstellen.\n\nErstellen Sie einen loopindem Sie im Feld Flow auf Insert loop klicken.\n\nMit loopType k√∂nnen Sie steuern, die Bedingungen randomisiert/gemischt oder sequentiell/der Reihe nach angezeigt werden sollen.\nMit nReps k√∂nnen Sie angeben, wie oft jeder Stimulus wiederholt werden soll. Haben Sie also einen Stimulus mit zwei zu varierenden Eigenschaften (die je 3 Stufen haben) (also 9 Zeilen im conditions-File und nReps= 2, ergibt das 18 Trials.\n\n\nMittels diesen Schleifen k√∂nnen die Bedingungen implementiert werden z.B. dass sich der Stimulus bei jedem Trial ver√§ndert. Dies kann mit einer conditions-Datei spezifiziert werden, idealerweise im .csv oder .xlsx-Format.\n\nDie Endung .csv bedeutet, dass die Daten als comma separated values abgespeichert werden, also durch ein Komma getrennt. Dieses Dateiformat eignet sich besser als .xlsx, weil es mit vielen Programmen kompatibel und gut einlesbar ist.\n\nBeispielsweise wollen wir drei verschiedene Worte anzeigen (dog, cat und rabbit) und dieses Wort unterschiedlich lange anzeigen (Dauer: 1, 10 und 100 Frames). Die Versuchspersonen sollen dann den Anfangsbuchstaben des Wortes dr√ºcken, also d f√ºr dog, c f√ºr cat und r f√ºr rabbit.\n\nUm die Bedingungen (in unserem Fall: die sich ver√§ndernden Stimuluseigenschaften) zu definieren, erstellen wir eine .csvoder .xlsx-Datei (z.B. in Excel/Notepad/etc.) mit dem Namen conditions und speichern dieses im selben Ordner wie das Experiment.\n\nF√ºgen Sie f√ºr jedes sich ver√§ndernde Element einen Variablennamen und die entsprechenden Werte ein (dies sind die Eigenschaften, die Sie sich bei Punkt 2.1 notiert haben). Die Variablennamen schreiben wir immer in die oberste Zeile der Datei.\nWenn wir z.B. einen Text anzeigen m√∂chten, schreiben wir in die erste Zeile word und duration.\nIn die Spalte unter die Variablennamen schreiben wir die Werte.\nAls Beispiel k√∂nnten die Worte die wir anzeigen lassen wollen cat, dog und rabbit lauten. Dann stehen in der Spalte word, diese 3 W√∂rter unter dem Variablennamen. Unter dem Variablennamen duration geben wir die Anzahl Frames ein, also 1, 10 und 100. Wir wollen jedes Wort mit jeder Dauer kombinieren. Das ergibt 9 Zeilen.\nF√ºgen Sie in jeder Zeile unter dem Variablennamen corrAns die jeweils korrekte Antwort ein.\nF√ºgen Sie, falls vorhanden, in jeder Zeile weitere wichtige Information zum Stimulus ein.\nIm Beispiel m√∂chten Sie z.B. sp√§ter fleischfressende mit pflanzenfressenden Tieren vergleichen, deshalb eine Spalte meat. Dies ver√§ndert im Experiment nichts, dient aber am Schluss zur Auswertung, weil diese Variable auch immer in den Datensatz geschrieben wird.\n\n\nF√ºgen Sie nun im Loop-Fenster die conditions-Datei ein.\n\n\n\n\n\n\n\n\nTipp\n\n\n\nJede Zeile in der conditions-Datei unterhalb des Variablennamens entspricht einer Bedingung (condition).\nSetzen Sie nReps auf 1 w√§hrend Sie das Experiment erstellen, so sparen Sie Zeit.\n\n\nIm PsychoPy k√∂nnen Sie Variablen mit einem vorangestellten $einf√ºgen.\n\n√ñffnen Sie nun wieder das Stimulusfenster und passen Sie dort die Stimuluseigenschaften an. Anstatt von hard-coded values (also einmalig, fix festgelegten Werten) geben wir nun einen Variablennamen ein. Der Stimulus darf nicht auf constant gesetzt sein, sonst kann er sich nicht Trial f√ºr Trial ver√§ndern, setzen Sie ihn deshalb unbedingt auf set every repeat.\nIn unserem Beispiel f√ºgen wir bei text die Laufvariable (ver√§ndernde Eigenschaft) ein: $word. Die Anzeigedauer des Textes soll $duration in Frames sein.\n\n\n\nLassen Sie das Experiment laufen und kontrollieren Sie, ob alles funktioniert hat.\n\n\n\n\n\n\n\nTipp\n\n\n\nMit dieser Methode k√∂nnen Sie auch Instruktionen, ITIs, etc. variieren lassen."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#antworten-aufnehmen",
    "href": "pages/chapters/psychopy_experiments.html#antworten-aufnehmen",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.4 Antworten aufnehmen",
    "text": "2.4 Antworten aufnehmen\nIn PsychoPy muss definiert werden, wie die Antwort der Versuchsperson aufgenommen wird. Dies kann mit der Maus, der Tastatur oder anderen Devices umgesetzt werden. Die M√∂glichkeiten sehen Sie unter Responses.\n\nF√ºgen Sie eine Antwortkomponente hinzu und benennen Sie diese sinnvoll.\nIn unserem Beispiel m√∂chten wir, dass die Versuchsperson mittels Keyboard antwortet.\n\nMit Force end of Routine k√∂nnen Sie einstellen, ob eine Antwort den Trial beendet und mit dem n√§chsten fortf√§hrt.\nDer Namen der Antwortkomponente wird sp√§ter im Datensatz als Variable zu finden sein.\nWerden in einer Antwortkomponente namens key_resp mittels Tastendruck Antwort und Response Time aufgenommen, heissen die Variablen dann key_resp.keys(gedr√ºckte Taste) und key_resp.rt (Antwortdauer).\nEntscheiden Sie, ob PsychoPy √ºberpr√ºfen soll, ob die richtige Antwort gegeben wurde.\nWenn Sie dies m√∂chten, gleicht PsychoPy in unserem Beispiel die gegebene Antwort (key_resp.keys) mit der daf√ºr eingegebenen Variable (hier corrAns) ab. Stimmen diese √ºberein, f√ºgt es in die Variable key_resp.corr 1 ein, wenn nicht 0).\nMit first key definieren Sie, dass der erste Tastendruck z√§hlt."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#weitere-elemente",
    "href": "pages/chapters/psychopy_experiments.html#weitere-elemente",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "2.5 Weitere Elemente",
    "text": "2.5 Weitere Elemente\nIn PsychoPy GUI wird Ihnen im Fenster Floweine Art Flowchart angezeigt. Hier sehen Sie, welche Elemente Ihr aktuelles Experiment enth√§lt.\n\nF√ºgen Sie nun alle weiteren Elemente, die Sie zu Beginn auf Ihrer Flowchart eingezeichnet hatten, z.B.\n\nBegr√ºssung\nEinverst√§ndnis\nInstruktion\nDebriefing, Verabschiedung\n\nLassen Sie das Experiment laufen und kontrollieren Sie, ob alles funktioniert hat.\n\n\n\n\n\n\n\nTipp\n\n\n\nBeim Programmieren lohnt es sich oft, die kleinen Schritte zwischenzutesten, weil es dann einfacher ist herauszufinden, wo genau der Fehler passiert ist."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#variable-dauer-von-elementen",
    "href": "pages/chapters/psychopy_experiments.html#variable-dauer-von-elementen",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "5.1 Variable Dauer von Elementen",
    "text": "5.1 Variable Dauer von Elementen\n\nFixationskreuz und ITI mit randomisierter Dauer\nUm das Experiment f√ºr die Versuchsperson unvorhersehbarer zu machen, implementieren wir vor dem eigentlichen Stimulus ein Fixationskreuz mit variabler L√§nge. Diese L√§nge soll 0.2, 0.4, 0.6, oder 0.8 Sekunden betragen.\n\nF√ºgen Sie einen Codeblock code_fixationcross ein und definieren Sie unter Begin Routine die Variable fixationcross_duration.\n\nF√ºgen Sie einen Textblock fixationcross ein mit dem Text + und Schriftgr√∂sse 10. Geben Sie unter duration Ihre vorher definierte Variable ein (vergessen Sie dabei das $nicht): $fixationcross_duration.\n\n\n\n\n\n\n\n\nHands-on: Variable ITI einbauen\n\n\n\nF√ºgen Sie nach dem Stimulus eine ITI mit variabler Dauer hinzu.\nEinfachere Variante: Die ITI soll 10, 20, 30, 40 oder 50 Frames betragen.\nSchwierigere Variante: Die ITI soll eine Zufallszahl zwischen 0.2 und 0.8 Sekunden betragen."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#feedback",
    "href": "pages/chapters/psychopy_experiments.html#feedback",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "5.2 Feedback",
    "text": "5.2 Feedback\nEs gibt Experimente, welche Feedback erfordern. Oft wird vor der Datenerhebung ein √úbungsblock eingebaut, welcher Feedback enth√§lt, so dass die Versuchspersonen wissen, ob sie den Task richtig verstanden haben.\n\nErstellen Sie zuerst eine Trialschleife mit einem Stimulus und einer Response.\nF√ºgen Sie nach dem Stimulus und der Antwort (aber innerhalb der Trialschleife!) eine Routine feedback ein.\nF√ºgen Sie innerhalb der Routine feedback eine Codekomponente hinzu. In dieser Komponente k√∂nnen Sie nun\n\nF√ºgen Sie nun eine Textkomponente hinzu und f√ºgen Sie beim Textfeld die Variable $response_msg ein, damit die Versuchsperson abh√§ngig von ihrer Antwort das entsprechende Feedback erh√§lt, welches zuvor in der Codekomponente definiert wurde.\n\n\n\n\n\n\n\n\nHands-on: Feedback geben\n\n\n\nSie k√∂nnen mittels einer Codekomponente auch reagieren, wenn die Versuchsperson zu schnell, zu langsam oder gar nicht antwortet.\n\nErstellen Sie einen √úbungsdurchgang. F√ºgen Sie eine Code-Komponente hinzu und legen Sie fest, welches Feedback die Versuchsperson erhalten soll.\n\nEinfache Variante: Geben Sie der Person Feedback, ob ihre Antwort richtig oder falsch war.\nMittelschwere Variante: Geben Sie der Person Feedback, wenn Sie zu schnell oder zu langsam antwortet.\nSchwere Variante: Erstellen Sie einen Counter, welcher der Versuchsperson anzeigt, wie gut sie ist, indem f√ºr jede richtige Antwort 5 Punkte erh√§lt, f√ºr jede falsche Antwort 5 Punkte abgezogen werden.\nFalls Sie zur Geschwindigkeit R√ºckmeldung geben wollen oder einen Counter bauen, k√∂nnen Sie etwas in dieser Art machen.\nif dots_keyboard_response.keys is None:\n    response_text = \"miss\"\n\nelif dots_keyboard_response.rt &lt;= 0.1:\n    response_text = \"too fast\"\n\nelse:\n    if (direction == \"left\" and dots_keyboard_response.keys == \"f\" or \n        direction == \"right\" and dots_keyboard_response.keys == \"j\"):\n        response_text = \"+5 points\"\n    else:\n        response_text = \"+0 points\""
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#degrees-of-visual-angle",
    "href": "pages/chapters/psychopy_experiments.html#degrees-of-visual-angle",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "6.1 Degrees of Visual Angle",
    "text": "6.1 Degrees of Visual Angle\nOftmals werden Gr√∂ssenangaben von Stimuli noch in Pixel oder Zentimeter, sondern in degrees of visual angle gemacht. Dies hat den Vorteil, dass die Angaben nicht vom Monitor selber oder der Entferung vom Monitor abh√§ngig sind. Degrees of visual angle gibt die wahrgenommene Gr√∂sse des Stimulus an, und ber√ºcksichtigt die Gr√∂sse des Monitors und des Stimulus, und die Entfernung der Versuchsperson vom Monitor. Weitere Informationen dazu finden Sie auf der Website von OpenSesame. √úblicherweise entspricht ein degrees of visual angle etwa einem cm bei einer Entfernung von 57 cm vom Monitor.\n\nOpenSesame ist ein weiteres, Python-basierendes Programm f√ºr die Erstellung behavioraler Experimente.\n\nZur Umrechnung zwischen cm und degrees of visual angle finden Sie unter diesem Link mehr Information."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#timing",
    "href": "pages/chapters/psychopy_experiments.html#timing",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "6.2 Timing",
    "text": "6.2 Timing\nFrames vs.¬†time (sec or ms): Die pr√§ziseste Art zur Steuerung des Timings von Stimuli besteht darin, sie f√ºr eine festgelegte Anzahl von Frames zu pr√§sentieren. Bei einer Framerate von 60 Hz k√∂nnen Sie Ihren Stimulus nicht z. B. 120 ms lange pr√§sentieren; die Bildperiode w√ºrde Sie auf einen Zeitraum von 116,7 ms (7 Bilder) oder 133,3 ms (8 Bilder) beschr√§nken. Dies ist besonders wichtig f√ºr Reaktionszeit-Aufgaben und EEG-Studien, wo ein pr√§zises Millisekunden-Timing erforderlich ist. Hier finden Sie weitere Informationen zu diesem Thema: Presening Stimuli - Psychopy.\n\nHertz ist eine Einheit die angibt, wie h√§ufig etwas pro Sekunde passiert. Hertz kann wie Mal pro Sekunde ausgesprochen werden. 60 Hertz bedeutet also, 60 Mal pro Sekunde."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#individualisierte-aufgabenschwierigkeit-schwellenmessung",
    "href": "pages/chapters/psychopy_experiments.html#individualisierte-aufgabenschwierigkeit-schwellenmessung",
    "title": "Verhaltensexperimente mit PsychoPy",
    "section": "6.3 Individualisierte Aufgabenschwierigkeit / Schwellenmessung",
    "text": "6.3 Individualisierte Aufgabenschwierigkeit / Schwellenmessung\nIm Random Dot Experiment macht es z.B. f√ºr gewisse Fragestellungen Sinn die Aufgabenschwierigkeit f√ºr jede Person anzupassen, da sonst ceiling/floor-Effekte auftreten k√∂nnen.\nIn PsychoPy kann ein Staircase in einem Loop verwendet werden, um die Schwierigkeit einer Aufgabe basierend auf der Leistung der Teilnehmer dynamisch anzupassen. Sie ist besonders h√§ufig in Experimenten zur Schwellenmessung, bei denen das Ziel darin besteht, die kleinste wahrnehmbare Reizintensit√§t zu bestimmen. Hier finden Sie weitere Informationen zu diesem Thema: Using a Staircase - PsychoPy."
  },
  {
    "objectID": "pages/chapters/random_dot_experiment.html",
    "href": "pages/chapters/random_dot_experiment.html",
    "title": "Random Dot Paradigma",
    "section": "",
    "text": "Jeden Tag treffen wir Tausende von kleinen Entscheidungen, meistens unter gewissem Zeitdruck. Viele davon sind trivial (z. B. welches Paar Socken man anzieht) und automatisch (z. B. ob man die Espresso- oder Lungo-Taste auf der Kaffeemaschine dr√ºckt). Die meisten Entscheidungen im wirklichen Leben setzen sich eigentlich aus zwei Entscheidungen zusammen: Einerseits der Entscheidung, mit dem Abw√§gen aufzuh√∂ren und aufgrund des aktuellen Wissenstandes zu handeln. Andererseits die Wahl oder Entscheidungshandlung selbst. Dieser sequentielle Charakter der Entscheidungsfindung ist eine grundlegende Eigenschaft des menschlichen Nervensystems und spiegelt seine Unf√§higkeit wieder, Informationen sofort zu verarbeiten.\nPerzeptuelle Entscheidungen sind Entscheidungen, welche auf der Wahrnehmung, Einordnung und Integration von Sinnesreizen beruhen. Um beispielsweise eine Strasse sicher √ºberqueren zu k√∂nnen, m√ºssen wir mittels den Sinnesinformationen der Augen und Ohren sowie der Verarbeitung dieser Reize einsch√§tzen mit welcher Geschwindigkeit ein herannahendes Auto unterwegs ist und ob wir lieber abwarten bis es vorbeigefahren ist. Innerhalb der Neurowissenschaften wird perceptual decision making untersucht, um die neuronalen Schaltkreise welche Wahrnehmungssignale kodieren, speichern und analysieren zu verstehen und mit beobachtbarem Verhalten in Verbindung zu bringen. Von Interesse ist zum Beispiel wie die Entscheidung ausf√§llt, wenn die sensorischen Daten undeutlich oder sogar widerspr√ºchlich sind. Besonders spannend ist auch wie Vorwissen (prior knowledge) auf das Entscheidungsverhalten einwirkt.\n\nPerceptual decision making is the process by which sensory information is used to guide behavior toward the external world. This involves gathering information through the senses, evaluating and integrating it according to the current goals and internal state of the subject, and using it to produce motor responses. In contrast to choice behavior and decision making in general (‚Ä¶) perceptual decision making emphasizes the role of sensory information in directing behavior (‚Ä¶) within neuroscience, the goal is to reveal the computational mechanisms whereby neural circuits encode, store, and analyze perceptual signals; combine them with other behaviorally relevant information; and use them to resolve conflicts between competing motor plans. (Hauser and Salinas (2014))\n\nObwohl das Treffen von Entscheidungen f√ºr uns etwas sehr Vertrautes ist, ist das Wissen darum, wie das Gehirn diese Entscheidungsaufgaben l√∂st noch sehr begrenzt. Eine einzelne Entscheidung kann schon sehr komplex sein. Um die Dynamik der Entscheidungsfindung zu verstehen, konzentrieren sich die meisten Studien deshalb auf einfache, wiederholbare Wahlprobleme mit nur zwei (bin√§ren) Antwortm√∂glichkeiten. Ein typisches Paradigma in neurowissenschaftlichen Studien ist das random-dot motion paradigm. Hierbei muss eine Person entscheiden in welche Richtung sich eine Punktewolke bewegt.\n\nDas Experiment Bias in the brain von Mulder et al. (2012) ist eine Reaktionszeit (RT) Version eines random-dot motion direction discrimination task. Sie k√∂nnen hier nachlesen, wie der Task verwendet wurde um den Einfluss von Vorwissen auf neuronale Aktivit√§t im Gehirn mittels fMRI zu untersuchen.\n\n\n\n\n\n\n\nHands-on: Random Dot Experiment\n\n\n\nLesen Sie zuerst hier eine kurze Einf√ºhrung in das Random Dot Paradigma.\nBesprechen Sie dann in kleinen Gruppen folgende Fragen:\n\nF√ºr welche neurowissenschaftlichen Forschungsfragen eignet sich dieser Task? Mit welchen weiteren Methoden (fMRI, EEG, Hirnstimulation, etc.) liesse er sich kombinieren und was k√∂nnte man dabei lernen? Welche Patientengruppen zeigen auff√§llige Antworten in diesem Task?\nWelche ‚ÄúElemente‚Äù des Experiments konnten Sie identifizieren?\nWelche Stimuluseigenschaften sind relevant f√ºr das Experiment? Was macht die Aufgabe einfach? Was macht sie schwieriger?\nWelche Antwortm√∂glichkeiten haben die Versuchspersonen?\nWelche Bedingungen w√ºrden Sie vergleichen?\nWelche Stimuluseigenschaften sind wichtig, damit Sie die Resultate nicht verf√§lschen oder auf was muss geachtet werden bei der Stimulusauswahl?\nWas denken Sie, misst der Task was er soll? Wie werden die Verhaltensdaten Ihrer Sch√§tzung nach aussehen?\n\nTipp: Schauen Sie sich diese Stimulusoption hier an.\n[~10 Minuten]\n\n\n\n\nIn unserem Experiment l√∂sen die Versuchspersonen einen Random Dot Task zweimal (in zwei Bl√∂cken). In jedem Block erhalten sie eine andere Instruktion, die Aufgabe bleibt jedoch dieselbe: Sie m√ºssen herausfinden in welche Richtung sich die Punktewolke bewegt. In einem Block werden sie instruiert die Aufgabe m√∂glichst schnell zu l√∂sen. Im anderen Block werden sie instruiert die Aufgabe m√∂glichst richtig zu l√∂sen. Wir werden dann analysieren, wie sich das Entscheidungsverhalten von Menschen ver√§ndert, je nachdem wie sie instruiert wurden.\nDas Random Dot Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Random Dot Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Dot-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?"
  },
  {
    "objectID": "pages/chapters/random_dot_experiment.html#kurzbeschrieb-kursexperiment",
    "href": "pages/chapters/random_dot_experiment.html#kurzbeschrieb-kursexperiment",
    "title": "Random Dot Paradigma",
    "section": "",
    "text": "In unserem Experiment l√∂sen die Versuchspersonen einen Random Dot Task zweimal (in zwei Bl√∂cken). In jedem Block erhalten sie eine andere Instruktion, die Aufgabe bleibt jedoch dieselbe: Sie m√ºssen herausfinden in welche Richtung sich die Punktewolke bewegt. In einem Block werden sie instruiert die Aufgabe m√∂glichst schnell zu l√∂sen. Im anderen Block werden sie instruiert die Aufgabe m√∂glichst richtig zu l√∂sen. Wir werden dann analysieren, wie sich das Entscheidungsverhalten von Menschen ver√§ndert, je nachdem wie sie instruiert wurden.\nDas Random Dot Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Random Dot Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Dot-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?"
  },
  {
    "objectID": "pages/chapters/stroop_experiment.html",
    "href": "pages/chapters/stroop_experiment.html",
    "title": "Stroop Paradigma",
    "section": "",
    "text": "Der Stroop Task wurde 1935 zum ersten Mal beschrieben (Stroop, 1935) und ist einer der meist zitierten und verwendeten neuropsychologischen Aufgaben (MacLeod, 1991). In der Neuropsychologie wird der Stroop Color and Word Test (SCWT) verwendet, um die F√§higkeit zur Inhibition kognitiver Interferenz zu messen, welche entsteht wenn zwei Stimuluseigenschaften gleichzeitig verarbeitet werden sich aber widersprechen (Scarpina & Tagini, 2017). Teilweise misst der Task auch andere kognitive Funktionen, wie visuelle Suche oder Arbeitsged√§chtnis, weshalb der Vergleich von Bedingungen relevant ist (Peri√°√±ez et al., 2021).\nW√§hrend dem Stroop Task wird ein Text mit Farbw√∂rtern pr√§sentiert. Im kongruenten Durchgang entsprechen die Farben des Textes dem Farbwort (das Wort ‚Äúrot‚Äù wird in rot pr√§sentiert), im inkongruenten Durchgang unterscheiden sich die Farben des Textes vom Farbwort (das Wort ‚Äúrot‚Äù wird in gelber Farbe pr√§sentiert). Die Person muss angeben in welcher Farbe das Wort abgedruckt ist. In der kongruenten Bedingung f√§llt dies leichter, weil das gelesene Wort auch der Farbe entspricht. In der inkongruenten Bedingung verlangsamt sich die Geschwindigkeit durch die entstehende Interferenz von Wort und Farbe, da das Wort automatisch gelesen wird. Oft wird auch noch eine neutrale Bedingung verwendet, wo nur die Farbe oder das Wort pr√§sentiert werden.\n\n\n\nDaten Stroop-Task (Stroop, 1935)\n\n\n\nHier finden Sie eine Online-Version des Originalpapers. Interessierte finden das Review von MacLeod (1991) auf Ilias.\n\n\n\n\n\n\n\nHands-on: Stroop Task ausprobieren\n\n\n\nHier finden Sie eine englische Online-Version eines Stroop Tasks.\nTesten Sie die Demo und diskutieren Sie dann in kleinen Gruppen folgende Fragen:\n\nF√ºr welche neurowissenschaftlichen Forschungsfragen eignet sich dieser Task? Mit welchen weiteren Methoden (fMRI, EEG, Hirnstimulation, etc.) liesse er sich kombinieren und was k√∂nnte man dabei lernen? Welche Patientengruppen zeigen auff√§llige Antworten in diesem Task?\nWelche ‚ÄúElemente‚Äù des Experiments konnten Sie identifizieren?\nWelche Stimuluseigenschaften sind relevant f√ºr das Experiment? Was macht die Aufgabe einfach? Was macht sie schwieriger?\nWelche Antwortm√∂glichkeiten haben die Versuchspersonen?\nWelche Bedingungen w√ºrden Sie vergleichen?\nWelche Stimuluseigenschaften sind wichtig, damit Sie die Resultate nicht verf√§lschen oder auf was muss geachtet werden bei der Stimulusauswahl?\nWas denken Sie, misst der Task was er soll? Wie werden die Verhaltensdaten Ihrer Sch√§tzung nach aussehen?\n\n[~10 Minuten]\n\n\n\n\nIn diesem Experiment l√∂sen die Personen zwei Bedingungen des Stroop Task, einmal geben sie die Farben der W√∂rter an in einer kongruenten Bedingung (Wortinhalt und Wortfarbe) stimmen √ºberein. Einmal l√∂sen sie die Aufgabe in einer inkongruenten Bedingung (Wortinhalt und Wortfarbe stimmen nicht √ºberein).\nDie kongruente und inkongruente Bedingung kommen im selben Block vor. Die Instruktion lautet f√ºr beide Bedingungen gleich, da immer die Wortfarbe angegeben werden muss. Drei Farben werden verwendet: rot, blau und gelb.\nDas Stroop Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Stroop Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Wort-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?\n\n\n\n\n\n\nMacLeod C. M. (1991). Half a century of research on the Stroop effect: an integrative review. Psychological Bulletin. 109(2), 163‚Äì203. https://doi.org/10.1037/0033-2909.109.2.163\nPeri√°√±ez, J. A., Lubrini, G., Garc√≠a-Guti√©rrez, A., & R√≠os-Lago, M. (2021). Construct validity of the stroop color-word test: influence of speed of visual search, verbal fluency, working memory, cognitive flexibility, and conflict monitoring. Archives of Clinical Neuropsychology, 36(1), 99-111. https://doi.org/10.1093/arclin/acaa034\nScarpina, F., & Tagini, S. (2017). The stroop color and word test. Frontiers in psychology, 8, 557. https://doi.org/10.3389/fpsyg.2017.00557\nStroop, J. R. (1935). Studies of interference in serial verbal reactions. Journal of Experimental Psychology, 18(6), 643‚Äì662. https://doi.org/10.1037/"
  },
  {
    "objectID": "pages/chapters/stroop_experiment.html#kurzbeschrieb-kursexperiment",
    "href": "pages/chapters/stroop_experiment.html#kurzbeschrieb-kursexperiment",
    "title": "Stroop Paradigma",
    "section": "",
    "text": "In diesem Experiment l√∂sen die Personen zwei Bedingungen des Stroop Task, einmal geben sie die Farben der W√∂rter an in einer kongruenten Bedingung (Wortinhalt und Wortfarbe) stimmen √ºberein. Einmal l√∂sen sie die Aufgabe in einer inkongruenten Bedingung (Wortinhalt und Wortfarbe stimmen nicht √ºberein).\nDie kongruente und inkongruente Bedingung kommen im selben Block vor. Die Instruktion lautet f√ºr beide Bedingungen gleich, da immer die Wortfarbe angegeben werden muss. Drei Farben werden verwendet: rot, blau und gelb.\nDas Stroop Kursexperiment ist folgendermassen aufgebaut:\n\n\n\n\n\n\n\nHands-on: Stroop Kursexperiment\n\n\n\nLaden Sie das Experiment herunter und testen Sie, ob es auf Ihrem Laptop l√§uft. Hier finden Sie die Anweisungen dazu.\n\nTesten Sie, ob das Experiment startet und ob die √úbungstrials funktionieren. Kontrollieren Sie, ob es ein Datenfile abgespeichert hat und schauen Sie, ob dieses Datenfile alles Relevante enth√§lt. Wenn alles ok ist, ist das Experiment bereit f√ºr √úbung 1. F√ºhren Sie die Testungen ausserhalb des Computerlabs durch.\nBeantworten Sie folgende Fragen zum Experiment:\n\n\nWas wurde im Experiment variiert? Wie viele unterschiedliche Trials gibt es?\nWelche Bedingungen gibt es?\nWieviele Trials werden pro Bedingung durchgef√ºhrt?\nWie lange wird der Wort-Stimulus angezeigt? Wann ist er fertig (zeit oder tasten-definiert?)?\nWie denken Sie, wird sich das Verhalten (Reaktionszeit, Richtigkeit) zwischen den Bedingungen unterscheiden?"
  },
  {
    "objectID": "pages/chapters/stroop_experiment.html#referenzen",
    "href": "pages/chapters/stroop_experiment.html#referenzen",
    "title": "Stroop Paradigma",
    "section": "",
    "text": "MacLeod C. M. (1991). Half a century of research on the Stroop effect: an integrative review. Psychological Bulletin. 109(2), 163‚Äì203. https://doi.org/10.1037/0033-2909.109.2.163\nPeri√°√±ez, J. A., Lubrini, G., Garc√≠a-Guti√©rrez, A., & R√≠os-Lago, M. (2021). Construct validity of the stroop color-word test: influence of speed of visual search, verbal fluency, working memory, cognitive flexibility, and conflict monitoring. Archives of Clinical Neuropsychology, 36(1), 99-111. https://doi.org/10.1093/arclin/acaa034\nScarpina, F., & Tagini, S. (2017). The stroop color and word test. Frontiers in psychology, 8, 557. https://doi.org/10.3389/fpsyg.2017.00557\nStroop, J. R. (1935). Studies of interference in serial verbal reactions. Journal of Experimental Psychology, 18(6), 643‚Äì662. https://doi.org/10.1037/"
  }
]