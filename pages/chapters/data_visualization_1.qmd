---
title: "Grafiken erstellen mit `ggplot`"
description: Einf√ºhrung in das `ggplot2`-Package.
author:
  - name: Gerda Wyssen
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0001-7427-3149
  - name: Daniel Fitze
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0003-0158-7459 
license: CC BY
citation: true
format:
    html:
        toc: true
        code-link: true
execute: 
  cache: false
---

```{r}
#| include: false
# Set working directory of R
knitr::opts_knit$set(root.dir = '../../data/data_visualization')
```

::: callout-caution
## Hands-on: Vorbereitung



-   Laden Sie [hier](../../downloadable_files/DatasaurusDozen.csv) den Beispielsdatensatz herunter, speichern Sie diesen in einem `data`-Folder in einem _R-Project_.

- √ñffnen Sie ein neues RScript (`.R`) oder RMarkdown-File (`.Rmd`). In einem RMarkdown-File k√∂nnen Code und Text verbunden werden und die die Outputs des Codes (z.B. Grafiken) werden anzeigt.

:::


# Grafiken erstellen mit `ggplot` 

Das `gg` im _Package_ `ggplot2` steht f√ºr *Grammar of Graphics*. Diese besagt, dass alle Grafiken aus den unten beschriebenen Komponenten zusammengesetzt werden k√∂nnen und sich damit vollst√§ndig beschreiben lassen. Das Kennen dieser Komponenten macht den anfangs oft etwas unintuitiven Aufbau von `ggplot` verst√§ndlicher.

<aside>Mit `ggplot`k√∂nnte man sogar Kunstwerke erstellen, wie bspw. [hier](https://www.data-imaginist.com/art) gezeigt wird.</aside>

Eine Grafik enth√§lt mindestens folgende 3 Komponenten: 

-   **Daten**

-   **Geome**, also sichtbare Formen (*aesthetics*), z.B. Punkte, Linien oder Boxen.

-   **Koordinatensystem/Mapping**: wie sind Daten und Geome verbunden?

Weitere optionale Komponenten sind:

-   Statistische Parameter

-   Position

-   Koordinatenfunktionen

-   **Facets**

-   Scales

-   **Themes**

In dieser Einf√ºhrung wird auf die ersten drei Komponenten, sowie auf _Facets_ und _Themes_ eingegangen.

Beim Laden des _Packages_ `tidyverse` wird automatisch das _Package `ggplot2` ebenfalls geladen.

```{r}
#| message: false
#| warning: false
library(tidyverse)
```


## Daten
 
Die wichtigste Komponente einer Grafik sind die Daten. Bevor eine Grafik erstellt wird, m√ºssen die Eigenschaften des Datensatzes bekannt sein.

<aside>Der verwendete Datensatz stammt von @matejka_same_2017. </aside>

```{r}
# Einlesen des √úbungsdatensatzes
d <- read.csv("data/DatasaurusDozen.csv") %>%
    mutate(condition = as.factor(condition)) # Variable condition soll ein Faktor sein

# Datensatz anschauen
glimpse(d)
```

### Datenformat

Am einfachsten ist das plotten mit `ggplot()`, wenn die Daten im *long*-Format vorliegen. Das bedeutet:

- Jede Variable die gemessen/erhoben wird hat eine Spalte (z.B. Versuchspersonennummer, Reaktionszeit, Taste). 

- Jede Messung hat eine Zeile. In unserem PsychoPy-Experiment entspricht dies einer Zeile pro Trial. 

Die hier eingelesenen Daten sind schon im *long*-Format. 

<aside> Falls die Daten im *wide*-Format abgespeichert sind, lohnt es sich diese umzuformatieren z.B. mit `pivot_longer()`. </aside>


### Variablen

F√ºr die Grafik ist es relevant, welches Skalenniveau die zu visualisierenden Variablen haben. Je nach Anzahl Variablen und den entsprechenden Skalenniveaus eignen sich andere Grafik-Formen. 

![CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=724035](img/skalenniveau.png)

::: callout-caution
## Hands-on: Datensatz anschauen

Schauen Sie sich den Datensatz an. 

- Wie viele unterschiedliche Variablen gibt es? 
- Wie heissen die Variablen? 
- Welches Skalenniveau haben sie?

:::

### Subsetting

Wenn nur ein gewisser Teil der Daten visualisiert werden soll, muss der Datensatz gefiltert werden. Der aktuelle Datensatz enth√§lt beispielsweise verschiedene Bedingungen, jeweils mit Werten f√ºr Variable `value1` und `value2`. Folgende 13 Bedingungen sind enthalten:

```{r}
unique(d$condition)
```

F√ºrs erste entscheiden wir uns f√ºr die Bedingung `away`.

```{r}
d_away <- d %>%
    filter(condition == "away")
```


Wir k√∂nnen f√ºr diese Bedingung zus√§tzlich *summary statistics* berechnen, hier Mittelwert und Standardabweichung.

```{r}
d_away_summary <- d_away %>%
    summarise(mean_v1 = mean(value1),
              sd_v1 = sd(value1),
              mean_v2 = mean(value2),
              sd_v2 = sd(value2))

glimpse(d_away_summary)
```

Diese Werte geben einen Anhaltspunkt, in welchem Bereich sich die Werte bewegen werden. 


### Plot

In den folgenden Beispielen werden die Daten der Bedingung `away` verwendet. Als erstes Argument wird der Funktion `ggplot()` der Datensatz √ºbergeben (`data = data_away`).

```{r}
ggplot(data = d_away)
```


## Mapping

Das `mapping` beschreibt, welche Variable auf der x- und y-Achse abgetragen werden sollen. Es wird also definiert, wie die Variablen auf die Formen (*aesthetics*) gemappt werden sollen. Am einfachsten wir dies zu Beginn in festgelegt (das `mapping` kann aber auch in der Funktion `geom_` selbst definiert werden). Weitere Variablen k√∂nnten als `group = ...` oder `color = ...` eingef√ºgt werden.



```{r}
ggplot(data = d_away,
       mapping = aes(x = value1,
                     y = value2)) 
```

Die Grafik verf√ºgt nun √ºber Achsen, diese werden automatisch mit den Variablennamen beschriftet. Da noch keine Formen (`geoms`) hinzugef√ºgt wurde ist die Grafik aber leer. 

## Geom / Formen

Als dritte Komponente werden in `ggplot()` wird die Form mit `geom_` hinzugef√ºgt. Jede Form, die eingef√ºgt wird ben√∂tigt Angaben zum `mapping`, falls kein `mapping` angegeben wird, wird dieses aus der `ggplot()`-Funktion in der ersten Zeile √ºbernommen. 

Es gibt viele verschiedene Formen zur Auswahl. Beispielsweise werden mit `geom_point()` Punkte erstellt, mit `geom_line()` Linien, mit `geom_boxplot` Boxplots, usw. Bei der Wahl der passenden Form kommt es einerseits auf die Daten an. Sind die Daten z.B. Faktoren oder numerische Werte (siehe auch Skalenniveau oben)?  Wie viele Variablen werden gleichzeitig in die Grafik eingebunden? Andererseits ist es wichtig, was mit der Grafik gezeigt werden soll: Unterschiede? Gemeinsamkeiten? Ver√§nderungen √ºber Zeit? 

Geome zur Visualisierung von Datenpunkten und Verl√§ufen:

- Punkte / Scatterplots - `geom_point()`
- Linien - `geom_line()`

Geome zur Visualisierung von zusammenfassenden Werten:

- Histogramme - `geom_histogram()`
- Mittelwerte und Standardabweichungen - `geom_pointrange()`
- Dichteplots - `geom_density()`
- Boxplots - `geom_boxplot()`
- Violinplots - `geom_violin()`

<aside>Es gibt auch weitere, sehr informative Arten der Visualisierung, wie *heat maps* oder *shift functions*, auf die wir in dieser Veranstaltung nicht eingehen.</aside>

::: callout-caution
## Hands-on: Geoms

Welche `geoms` eignen sich f√ºr welches Skalenniveau und welche Variablenanzahl?

üëâ [Hier](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf) finden Sie das `ggplot`-Cheatsheet.

Schauen Sie sich die verschiedenen Formen von Plots [hier](https://www.data-to-viz.com) an. 
:::


## Kombinieren von mehreren `geoms` in einer Grafik

Teilweise werden in Visualisierungen mehrere `geoms` kombiniert. In vielen F√§llen macht es beispielsweise Sinn, nicht nur die tats√§chlichen Werte, sondern in derselben Grafik auch zusammenfassende Masse zu visualisieren.

<aside>Weiterf√ºhrende Info zum Kombinieren von Plots finden Sie [hier](https://psyteachr.github.io/reprores-v3/ggplot.html#combo_plots).</aside>

Verwenden verschiedener `geoms` in einem Plot:

```{r}
ggplot(data = d_away, 
       mapping = aes(x = condition,
                     y = value2)) +
    geom_boxplot(width = 0.3) +
    geom_jitter(width = 0.1) 

```
Kombiniert werden k√∂nnen aber nicht nur verschiedene Formen, sondern auch mehrere Datens√§tze. Dies kann in `ggplot()` einfach umgesetzt werden indem mehrere _Geoms_ √ºbereinandergelegt werden und nicht das `mapping` aus der `ggplot()`-Funktion genutzt wird, sondern indem f√ºr jedes `geom` ein separater Datensatz und ein separates `mapping` spezifiziert werden.

```{r}
ggplot(data = d_away, 
       mapping = aes(x = condition,
                     y = value2)) +
    geom_jitter(width = 0.1) + # verwendet Datensatz "d_away"
    geom_point(data = d_away_summary, # verwendet Datensatz "d_away_summary"
               aes(x = "away", y = mean_v1), # condition ist nicht im Datensatz enthalten, deshalb hier hardcoded
               color = "red", # Punkt rot einf√§rben
               size = 3) # Punkt vergr√∂ssern
```


## Beschriftungen und Themes

Sch√∂nere und informativere Plots lassen sich gestalten, wenn wir einen Titel hinzuf√ºgen, die Achsenbeschriftung anpassen und das `theme` ver√§ndern:

```{r}

ggplot(data = d_away,
       mapping = aes(x = value1,
                     y = value2)) +
    geom_point() +
    labs(title = "Ein etwas sch√∂nerer Plot", 
         subtitle = "Verteilung der Rohwerte",
        x = "Wert 1  [a.u.]",
        y = "Wert 2 [a.u.]") +
    theme_minimal()

```

<aside> Auch `theme_classic()` oder `theme_bw()` ergeben schlichte aber sch√∂ne Plots. </aside>

# Daten plotten: Hands on

Im Folgenden k√∂nnen Sie den Datensatz mit Grafiken erkunden. Sie k√∂nnen entweder in Ihrem RSkript/RMarkdown-File weiterarbeiten oder Sie k√∂nnen ein GUI (graphical user interface) verwenden, dass f√ºr Sie den Code schreibt.

::: callout-note
## Tipp: GUI

Um das GUI zu verwenden, gehen Sie wie folgt vor: 

- Installieren Sie das package `esquisse` mit `install.packages("esquisse")` in Ihrer Konsole oder √ºber `Tools` > `Install packages...`

- Geben Sie in Ihrer Konsole `esquisse::esquisser()` ein und w√§hlen Sie dann unter `Import Data` den schon eingelesenen Datensatz `DatasaurusDozen.csv` aus.
:::

<aside>Ein weiteres `R`-basiertes Visualisierungstool in welchem der Code per GUI erstellt wird, ist [trelliscopejs](https://hafen.github.io/trelliscopejs/)</aside>


::: callout-caution
## Hands-on: Informative Grafik erstellen

- Welche `geom_`s/Formen eignen sich gut f√ºr diesen Datensatz? 

- Welche Abbildungen k√∂nnen alle 3 Variablen des Datensatzes ber√ºcksichtigen?

- Wie kann man Bedingungen miteinander vergleichen?

- Wie k√∂nnen Gr√∂sse und Farbe der `geom_`s bestimmt werden?

- Wie passt man Schriftgr√∂ssen an?

- K√∂nnen Sie eine Grafik speichern?

- Lassen Sie sich den Code direkt ins RScript/RMarkdown-File einf√ºgen und ver√§ndern Sie den Code dort weiter.
:::



## Weiterf√ºhrende Ressourcen zur Datenvisualisierung mit `ggplot()`

- [Dokumentation](https://ggplot2.tidyverse.org/) von `ggplot2`

- Kurzweilige, kompakte und sehr informative Informationen und Videos √ºber das Erstellen von Grafiken in `ggplot` finden Sie hier: [Website PsyTeachR: Data Skills for reproducible research](https://psyteachr.github.io/reprores-v3/ggplot.html3)

- [Hier](https://youtu.be/90IdULVGmYY) ist der Start der PsyTeachR Videoliste von Lisa deBruine, dort finden sich auch hilfreiche Kurzvideos zu Themen von Daten einlesen bis zu statistischen Analysen. Beispielsweise zu [Basic Plots](https://youtu.be/tOFQFPRgZ3M), [Common Plots](https://youtu.be/kKlQupjD__g) und [Plot Themes and Customization](https://youtu.be/6pHuCbOh86s)

- [Einf√ºhrung in R](https://methodenlehre.github.io/einfuehrung-in-R/chapters/05-plotting.html) von Andrew Ellis und Boris Mayer

