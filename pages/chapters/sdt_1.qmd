---
title: "Signal-Detektionstheorie"
author:
  - name: Daniel Fitze
    # url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0003-0158-7459  
  - name: Andrew Ellis
    url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0002-2788-936X
  - name: Gerda Wyssen
    # url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0001-7427-3149
license: CC BY-SA 4.0
citation: true
bibliography: ../../bibliography.bib
format:
    html:
        toc: true
---

```{r}
#| echo: false
#| warning: false
library(tidyverse)
library(ggdist)
d = read_csv('data/dataset_rdk_clean.csv')
```


# Das Experiment

:::: {layout="[ 50, 50]"}
:::{}

Im Random Dot Experiment mussten die Versuchspersonen ein perzeptuelle Entscheidungsaufgabe bearbeiten. Dabei musste jeweils entscheiden werden, in welche Richtung sich eine Punktewolke bewegt.

Es gibt verschiedene möglichkeiten die Leistung der Versuchspersonen im Random Dot Task zu beschreiben.  

:::

:::{}

{{< video https://www.youtube.com/watch?v=7OdCe95IiLw >}}

:::
::::

<!-- :::callout-caution -->
<!-- ## Hands-on: Diskussion -->
<!-- Diskutieren Sie, wie die Leistung einer Person im Random Dot Task beschrieben werden kann.  -->
<!-- ::: -->


:::: {layout="[ 50, 50]"}

:::{}

## DAG

```{mermaid}
%%| fig-align: center
flowchart TD
  %%c((Condition)):::A --> r
  s((Sensitivität)):::A --> r((resp)):::B
  
  
  classDef A fill:#ffffff, r:45px
  classDef B fill:#e5e4e4, r:45px
```

:::

:::{}

## Daten
```{r}
#| echo: false
d |>
    select(id, condition, stimulus = direction, resp, corr) |>
    head()
```
:::
::::

# %-Correct
Wir können anschauen, in wie vielen Fällen die perzeptuelle Entscheidung richtig getroffen wurden. In diesem Fall können wir die Sensitivität jeder Versuchsperson aufgrund der gegebenen Antworten (`resp`) berechnen. Im Datensatz habe wir die Variable `corr`. Diese Variable nimmt den Wert `1` an, wenn die Aufgabe richtig gelöst wurde.  Wenn die Aufgabe falsch gelöst wurde, nimmt sie den Wert `0` an. Wenn wir den Durchschnitt (`mean()`) dieser Variable berechnen, erhalten wir die Propotion an korrekten Antworten.

:::callout-caution
## Hands-on:

1. Erstellen Sie ein neues R Projekt.

2. Laden Sie die vollständigen Daten des Random Dot Experiments [hier](../../downloadable_files/dataset_rdk_clean.zip) herunter und speichern Sie diese im erstellten Projekt.

3. Öffnen Sie ein neues Skript und laden Sie die heruntergeladenen Daten.

4. Berechnen Sie die Sensitivität für jede Versuchsperson individuell (vgl. Datensatz unten).

:::: {layout="[ 60, 40]"}
:::{}


```{r}
#| eval: false
d_sens = |>
    ...
    ...
    ...
```


```{r}
#| warning: false
#| echo: false
d_sens = d |>
    group_by(id) |>
    summarise(sens = mean(corr)) |>
    mutate(sens = sens * 100,
           sens = round(sens, digits = 1))
```
:::
:::{}
```{r}
#| echo: false
d_sens |> head()
```
:::
::::

:::


Im Experiment haben wir die Instruktion (`speed`, `accuracy`) innerhalb der Versuchspersonen manipuliert. Jede Versuchsperson wurde also beiden Bedingungen ausgesetzt. Wir erwarten nicht, dass diese Manipulation einen Einfluss auf die Sensitivität hat. Zur Kontrolle können wir diese Erwartung in den Daten Kontrollieren. 

:::callout-caution
## Hands-on:


1. Berechnen Sie nun die Sensitivität für jede Versuchsperson individuell getrennt für die beiden Bedingungn `speed` und `accuracy`.

2. Der resultierende Datensatz der berechneten Sensitivitäten ist im Long-Format. Überführen Sie den Datensatz in das Wide-Format, um die Daten einfacher verständlich zu machen. (vgl. Datensatz unten).


:::: {layout="[ 60, 40]"}
:::{}

```{r}
#| eval: false
d_sens_2 = d |>
    ...
    ...
    ...
```


```{r}
#| warning: false
#| echo: false
d_sens_2 = d |>
    group_by(id, condition) |>
    summarise(sens = mean(corr)) |>
    mutate(sens = sens * 100,
           sens = round(sens, digits = 1))
```
:::
:::{}
```{r}
#| echo: false
d_sens_2 |>
    pivot_wider(names_from = condition, 
                values_from = sens)
```
:::
::::

:::

:::: {layout="[ 50, 50]"}
:::{}
### Problem mit %-Correct

Wir haben gesehen, dass die Proportion der korrekten Antworten (%-Correct) als Mass für die Sensitivität an seine Grenzen stösst. Wir benötigen also ein anderes Modell, dass unsere Daten besser erklären kann. 
:::
:::{}
```{r}
#| echo: false
#| warning: false
d_sens_2 |>
    pivot_wider(names_from = condition, 
                values_from = sens) |>
    mutate(diff = speed - accuracy) |>
    ggplot(aes(x = diff, y = 1)) +
    stat_dots(quantiles = 100,
              side = 'bottom',
              fill = 'springgreen',
              color = 'springgreen',
              alpha = .3) +
    stat_halfeye(geom = 'slab',
                 fill = 'springgreen',
                 alpha = .7,
                 size = 5) +
    geom_vline(xintercept = 0,
               size = 2) +
    theme_minimal() +
    theme(text = element_text(size = 20),
          axis.text.y = element_blank()) +
    labs(
        # title = '%-Correct Difference',
        # subtitle = '(speed - accuracy)',
        x = 'Difference in %-Correct',
         y = '') +
    scale_x_continuous(breaks = seq(-20,20,by=10))
    # lims(x = c(0,2))
```
:::
::::




# Signal-Detektionstheorie (SDT) 

Die SDT ist eine statistische Entscheidungstheorie, deren zentrale Fragestellung lautet: **was ist der (unbekannte) Zustand der Welt, angesichts der verrauschten Daten**, die von den Sinnessystemen bereitgestellt werden? 

Wir werden nun die Signal Detection Theorie anhand unseres Experiments durchgehen. Dieses werden wir aus zwei Perspektiven betrachten: 1) aus der Perspektive einer Person, welche die Aufgabe hat, Stimuli in zwei Klassen zu klassifizieren und 2) aus der Perspektive eines Modells, das die Leistung der Person in der Aufgabe vorhersagt.


### Die Perspektive der Versuchsperson
Wir betrachten ein Experiment, bei dem eine Person einen Stimulus in eine von zwei möglichen Kategorien einordnen muss. Im Random Dot Experiment haben wir die Stimuluskategorien `Bewegung nach links` und `Bewegung nach rechts` verwendet.

Die Aufgabe der Person ist es, eine binäre Klassifikation mit den Antwortoptionen `links` und `rechts` durchzuführen. Die Antwortoptionen entsprechen den beiden möglichen Zuständen der Welt, oder genauer gesagt, Hypothesen der Person über die möglichen Zustände der Welt.

<!-- Gegeben den Reiz hat die Person zwei Antwortmöglichkeiten. Daher betrachten wir nur die `Ja`-Antworten, wenn der Reiz alt (Treffer) oder `neu` (Falschalarme) ist. -->

#### Annahmen

1) Die Person verarbeitet den Stimulus und gelangt zu einer internen Repräsentation des Stimulus. Diese interne Repräsentation ist nicht deterministisch, sondern variiert zufällig. Die interne Repräsentation demzufolge eine Zufallsvariable $X$. Wir nehmen an, dass die interne Repräsentation normalverteilt ist. 

2) Die Zufallsvariable $X$ repräsentiert die Information, die die Person über den Stimulus hat, also die Evidenz.

3) Die Person weiss, dass die $X$ aus einer von zwei Verteilungen gezogen wurde, die sich nur in ihrer Lage (in ihrem Mittelwert) unterscheiden. Welche Verteilung es war, weiss die Person jedoch nicht -- dies muss sie anhand eines Kriteriums entscheiden.

4) Die Person hat ein Kriterium $k$, das sie verwendet, um zu entscheiden, ob der Stimulus `recht` oder `links` ist. Eine einfache Entscheidungsregel lautet: Wenn $X > k$, dann bewegen sich die Punkte nach rechts, andernfalls nach links.


```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(viridis)
xlim <- c(-4.5, 4.5)
alpha <- c(0.6, 0.2)

dprime <- 1
criterion <- -0.0
colors <- viridis(n = 4, 
                  begin = 0, 
                  end = 0.98, 
                  direction = -1)

p1 <- tibble(x = seq(xlim[1], xlim[2], by = 0.1)) |> 
    ggplot(aes(x)) +
    stat_function(fun = dnorm, colour = colors[1], 
                  args = list(mean = -dprime/2, sd = 1),
                  size = 1.5) +
    stat_function(fun = dnorm, colour = colors[4], 
                  args = list(mean = dprime/2, sd = 1),
                  size = 1.5) +
    geom_vline(xintercept = c(-dprime/2, dprime/2), size = 1, linetype = "dotted", 
               alpha =  0.4) +
    scale_y_continuous(breaks = NULL) +
    scale_x_continuous(breaks = c(-2,0,2),
                       labels = c('-x', 0, 'x')) +
    labs(x = "Motion direction", y = "") +
    # annotate("text", 
    #        x = 0.1, 
    #        y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.03,
    #        label = "d'", 
    #        size = 8) +
    # annotate("segment", x = -dprime/2, 
    #              xend = dprime/2, 
    #              y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.01, 
    #              yend = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.01,
    #        size = 1) +
    annotate("text", 
           x = -1.5, 
           y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.03,
           label = "left", 
           size = 6, 
           color = "grey60") +
      annotate("text", 
           x = 1.5, 
           y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.03,
           label = "right", 
           size = 6, 
           color = "grey60") +
    geom_vline(xintercept = criterion, size = 1, 
               linetype = 1) +
    annotate("text", 
           x = 0.15,
           y = -0.02,
           label = "k", 
           size = 8) +
  theme_linedraw()
p1
```

### Die Perspektive des/der externen Beobachter*in

Die Leistung der Versuchsperson kann durch die Wahrscheinlichkeit beschrieben werden, dass sie einen Treffer (`Hit`) oder einen `False Alarm` produziert. Diese Wahrscheinlichkeiten werden als _Hit Rate_ und _False Alarm Rate_ bezeichnet. Die _Hit Rate_ ist die Wahrscheinlichkeit, dass die Person einen Treffer produziert, wenn der Stimulus rechts ist. Die _False Alarm Rate_ ist die Wahrscheinlichkeit, dass die Person einen Falschalarm produziert, wenn der Stimulus links ist.

Die Antworten der Versuchspersonen können in einer Tabelle zusammengefasst werden, mit vier möglichen Ergebnissen.


|              | **Stimulus**   |                        |
|------------- |--------------- |------------------------|
| **Antwort**  | Rechts         | Links                  |
| Rechts       | Hit            | False alarm (FA)       |
| Links        | Miss           | Correct rejection (CR) |


- **Hit**:  Stimulus ist `rechts`, Antwort ist `rechts`
- Miss: Stimulus ist `rechts`, Antwort ist `links`
- **False alarm**: Stimulus ist `links`, Antwort ist `rechts`
- Correct rejection: Stimulus is `links`,  Antwort ist `links`

:::callout-caution
## Hands-on:

Setzen Sie diese verbale Beschreibung in r-Code um. 

1. Erstellen Sie dazu im Random Dot Datensatz mit der Funktion `mutate()` eine Variable `type`. In dieser Variable soll für jeden Trial stehen, ob es sich um einen `Hit`, einen `Miss`, einen `FA` oder eine `CR` handelt (vgl. Daten unten). 

:::: {layout="[ 60, 40]"}
:::{}

```{r}
#| eval: false
d_sdt = d |>
    mutate(type = ___)
```



:::
:::{}
```{r}
#| echo: false
d |>
    select(id, stimulus = direction, resp) |>
    mutate(type = "...") |>
    head()
```
:::
::::
:::

# SDT Parameter

Die beiden wichtigsten Parameter der Signal-Detektionstheorie sind $d'$ und $c$. 

- $d'$ ist ein Mass für die Sensitivität eines Beobachters bei der Unterscheidung zwischen zwei Stimulusklassen. Ein größerer $d'$-Wert zeigt eine grössere Sensitivität an. Dies bedeutet, dass die Verteilungen der beiden  Stimulusklassen stärker voneinander getrennt sind und somit leichter unterscheidbar sind. 

- $c$ ist ein Mass dafür, ob eine Voreingenommenheit (bias) für eine der beiden Antwortoptionen besteht. Genauer gesagt ist $c$ der Abstand vom tatsächlichen Kriterium zum Punkt welcher genau zwischen den Verteilungen liegt.


:::: {layout="[ 50, 50]"}

:::{}

## DAG

```{mermaid}
%%| fig-align: center
flowchart TD
  %%c((Condition)):::A --> r
  c((c)):::A --> r
  s((d')):::A --> r((resp)):::B
  
  classDef A fill:#ffffff, r:30px
  classDef B fill:#e5e4e4, r:30px
```

:::

:::{}

## Daten
```{r}
#| echo: false
d |>
    select(id, condition, stimulus = direction, resp, corr) |>
    head()
```
:::
::::


Um $d'$ und $c$ aus den beobachteten Antworthäufigkeiten zu berechnen, müssen wir zuerst die relativen Häufigkeiten der Hits (Hit Rate) und der False Alarms (FA Rate) berechnen.

Die Hits sind die `rechts`-Antworten auf `rechts`-Stimuli. Dies bedeutet, dass wir zählen, wie oft bei einem `rechts` Stimulus die Antwort `rechts` war. Die False Alarms sind die `rechts`-Antworten auf `links`-Stimuli. Dies bedeutet, dass wir zählen, wie oft bei einem `links` Stimulus die Antwort `rechts`` war.
$$ Hit~Rate = \frac{Hits}{Hits + Misses} $$
$$ FA~Rate = \frac{False Alarms}{False Alarms + Correct Rejections} $$


Mit den folgenden Gleichungen können wir nun $d'$ und $c$ berechnen. 


$$d' = z(Hit~Rate) - z(FA~Rate)$$

$$ c = - \frac{z(Hit~Rate)+z(FA~Rate)}{2} $$




