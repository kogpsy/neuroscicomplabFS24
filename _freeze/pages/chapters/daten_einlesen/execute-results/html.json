{
  "hash": "f2d401a9f01e06a99dc7c5f606acde28",
  "result": {
    "markdown": "---\ntitle: \"Daten einlesen\"\nauthor:\n  - name: Daniel Fitze\n    # url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0003-0158-7459 \n  - name: Gerda Wyssen\n    # url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography_gw.bib\nformat:\n    html:\n        code-fold: false\n        toc: true\n---\n\n\nEvt. Reproduzierbarkeit hier machen\n\n## Pfade\nabsolut vs. relativ\n\n## Ein File einlesen\n::: callout-caution\n## Hands-on: Eine *.csv Datei einlesen\n1. Set-Up\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-1_9ec1289c65edb1abf217b40461588350'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n2. Speichern Sie den Pfad zur Datei **auf Ihrem Computer** in einer Variable ab. So finden Sie den Pfad auf [Mac](https://macpaw.com/how-to/copy-file-path-mac) und auf [Windows](https://www.wikihow.com/Find-a-File%27s-Path-on-Windows).\n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-2_cca32a020417592abbfa6ca3e968c8c3'}\n\n```{.r .cell-code}\nfile_path = 'data/random_dot_1.csv'\n```\n:::\n\n\n2. Mit der Funktion `read_csv()` können Sie die *.csv Datei nun einlesen. \n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-3_7e075a8ef525971ce9dfe4b478cb1eca'}\n\n```{.r .cell-code}\nd = read_csv(file_path)\n```\n:::\n\n\n3. Schauen Sie sich nun den Datensatz an. Vergleichen Sie den Output der Funktionen `head()` und `glimpse()`. Sie können den DataFrame auch in rStudio öffnen. Klicken Sie dazu auf den Datensatz `d` im Environment Panel. \n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-4_094ff58733caf529cfbd442094bdd462'}\n\n```{.r .cell-code}\nhead(d)\nglimpse(d)\n```\n:::\n\n\n:::\n\n## Spezifisches Wrangling\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-5_cffcd39ed3dbe814ea265a1ffbc5d458'}\n\n```{.r .cell-code}\n# Stroop\n# read_csv(file_path) |>\n#     select(participant, trials_test.thisN, word, color, congruent, resp = keyResp_test_run.keys, corr = keyResp_test_run.corr, rt = keyResp_test_run.rt) |>\n#     filter(!is.na(trials_test.thisN)) |>\n#     mutate(corr = as_factor(corr),\n#            congruent = as_factor(congruent)) |>\n#     select(-trials_test.thisN)\n\n# RDK\n# => AUFGABE\n```\n:::\n\n\n\n## Custom Funktion\n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-6_82938ffdec22423dc6d07a7fc0b6b62c'}\n\n```{.r .cell-code}\n# read_stroop = function(path){\n#     # ---------\n#     read_csv(path) |>\n#         select(participant, trials_test.thisN, word, color, congruent, resp = keyResp_test_run.keys, corr = keyResp_test_run.corr, rt = keyResp_test_run.rt) |>\n#         filter(!is.na(trials_test.thisN)) |>\n#         mutate(corr = as_factor(corr),\n#                congruent = as_factor(congruent)) |>\n#         select(-trials_test.thisN)\n#     # ---------\n# }\n```\n:::\n\n\n::: callout-caution\n\n## Hands-on: Mehrere *.csv Datei einlesen\nUm mehrere Datenfiles einzulesen könnte jedes File einzeln eingelesen und die DataFrames dann zusammengefügt werden. Diese Methode ist bei nur zwei Datenfiles gerade noch akzeptabel. \n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-7_624f6a8042a5f488cf3e2d5c45c6b489'}\n\n```{.r .cell-code}\nd1 = read_csv('data/random_dot_1.csv')\nd2 = read_csv('data/random_dot_2.csv')\n\nd = bind_rows(d1, d2)\n```\n:::\n\n\nSobald mehr Files verarbeitet werden, braucen wir eine elegantere Methode. Wir beginnen mit dem Speichern des Pfads zum Ordner, in dem sich die Files befinden. \n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-8_94b3a86eea2ad89857c8991695adc148'}\n\n```{.r .cell-code}\nfolder_path = 'data/'\n```\n:::\n\n\nMit der Funktion `list.files()` können wir uns die Dokumente in diesem Ordner anzeigen lassen. \n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-9_acf7192be6038926e0ccc7fe533bf572'}\n\n```{.r .cell-code}\nlist.files(folder_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"random_dot_1.csv\" \"random_dot_2.csv\"\n```\n:::\n:::\n\n\nUm die Daten einzulesen verwenden wir nun die Funktion `map_dfr()`. Diese Funktion macht das Gleiche wie die Funktion `map()` [LINK ZU PROGRAMMIEREN 2 DA WIRD MAP AUSFÜHRLICH ERKLÄRT], speichert den Output aber automatisch in einen DataFrame.\nFühren Sie den folgenden Code Zeile für Zeile aus und schauen Sie, wie sich der Inhalt der Variable `d` verändert.\n\n\n::: {.cell hash='daten_einlesen_cache/html/unnamed-chunk-10_4b39f7c96e6ad1be421802a6c05d7702'}\n\n```{.r .cell-code}\n# d = list.files(folder_path) %>%\n#     paste(folder_path, ., sep = '') |>\n#     map_dfr(read_stroop)\n```\n:::\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}