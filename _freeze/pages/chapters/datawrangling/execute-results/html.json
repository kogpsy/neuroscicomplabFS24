{
  "hash": "7f135f6d4bda5837d4720ecf80960926",
  "result": {
    "markdown": "---\ntitle: \"Daten importieren und vorverarbeiten\"\ndescription: \"\"\nauthor:\n  - name: Gerda Wyssen\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography_nsci24.bib\nformat:\n    html:\n        toc: true\n        code-link: true\n---\n\n\n\n\nIn R gibt es sehr viele hilfreiche Funktionen und _Packages_, die für die Vorverarbeitung und Analyse neurowissenschaftlicher Verhaltensdaten (oder extrahierten Daten aus bildgebenden Verfahren) verwendet werden können. Es empfiehlt sich durchgehend in einem _R-Markdown_ Dokument (`.Rmd`) innerhalb eines _RStudio-Projects_ zu arbeiten, da so ein reproduzierbarer Workflow erstellt werden kann. Rohdaten müssen so __nicht__ verändert werden. \n\n![](img/allison_horst_rasafriend.png)\n[Illustration by Allison Horst](https://allisonhorst.com/everything-else)\n\n<aside>Hilfreiche Datacamp Kurse:\n\n- Starthilfe zu RStudio brauchen: [RStudio Tutorial](https://www.datacamp.com/tutorial/r-studio-tutorial).\n\n- `R` und den `tidyverse` Packages (1. Kapitel): [Introduction to the Tidyverse](https://app.datacamp.com/learn/courses/introduction-to-the-tidyverse).\n</aside>\n\n:::callout-caution\n## Hands-on: Vorbereitung\n\n1. Öffnen Sie RStudio.\n\n2. Erstellen Sie ein neues RStudio-Project \n\n    - Klicken Sie dafür auf `File` > `New Project` \n    \n    - Benennen Sie das Project `neurosci_complab_datawrangling_stroop` und speichern Sie es an einem sinnvollen Ort auf Ihrem Computer.\n    \n3. Erstellen Sie in diesem Projekt-Ordner einen Ordner namens `data`.\n\n4. Kopieren Sie in den `data`-Ordner Ihre erhobenen Daten des Stroop Experiments. Falls Sie noch keine Daten erhoben haben, dann laden Sie [hier](https://kogpsy.github.io/neuroscicomplabFS24/downloadable_files/import-data.zip)  Beispiels-Datensätze herunter. Sie müssen den Ordner entzippen und den Stroop-Datensatz in Ihren `data`-Ordner kopieren.\n\n5. Erstellen Sie ein neues `.Rmd`-File (`File` > `New File` > `R Markdown`) und speichern Sie dieses unter `data-import` im Projekt-Ordner.\n\n:::\n\n:::callout-tip\n## Tipp: Namensgebung beim Speichern von Files\n\nWenn Sie Filenamen auswählen, achten Sie darauf dass diese _machine-readible_ sind:\n\n- keine Lücken (nehmen Sie stattdessen `-` oder `_`)\n\n- keine `ä`, `ö`, `ü` oder andere Sonderzeichen\n:::\n\n## Datenformate\n\nBevor mit einem Datensatz gearbeitet wird, empfiehlt es sich den Datensatz anzuschauen und folgendes zu identifizieren:\n\n- In welchem Dateiformat ist der Datensatz gespeichert? z.B. in `.csv`, `.xlsx` oder anderen?`\n\n- In welchem Datenformat ist der Datensatz geordnet? (`long` oder `wide` oder `mixed`?)\n\n- Gibt es ein `data dictionnary` mit Erklärungen zu den Variablen?\n\n\n## Packages installieren und laden\n\nFür das Bearbeiten der Daten verwenden wir Funktionen aus dem _Package_ `tidyverse`, eine Sammlung von verschiedenen für _data science_ sehr geeigneten _R Packages_. Funktionen aus dem `tidyverse` ermöglichen und vereinfachen viele Schritte der Datenverarbeitung. Im Folgenden werden die wichtigsten und häufigst verwendeten Funktionen beschrieben. Das `tidyverse` können Sie direkt in _R_ herunterladen:\n\n<aside>Mehr Informationen zum `tidyverse`finden Sie [hier](https://r4ds.had.co.nz/).</aside>\n\n\n::: {.cell warnings='false' errors='false' hash='datawrangling_cache/html/unnamed-chunk-2_8f4e9cecf25a3861f65eae9ef91e0c7e'}\n\n```{.r .cell-code}\n# download tidyverse package (only do this once)\n# install.packages(\"tidyverse\") \n\n# load library (run this at the beginning of your script)\nlibrary(\"tidyverse\") \n```\n:::\n\n\nEin _Package_ muss nur einmal heruntergeladen werden (`install.packages()`), dann ist es lokal auf dem Computer gespeichert. Jedes Mal wenn _R_ geöffnet wird, muss es jedoch wieder neu geladen werden (`library()`).\n\nSobald ein _Package_ installiert ist, können die Funktionen auch verwendet werden ohne, dass das ganze _Package_ mit `library()` geladen wird mit `packagename::packagefunction`. Dies macht Sinn, wenn verschiedene _Packages_ dieselben Namen für verschiedene Funktionen nutzen und es so zu Konflikten kommt.\n\n# Daten importieren in R: `read.csv()`\n\nEinen Datensatz in `.csv`-Format kann mit der Funktion `read.csv` importiert werden. Teilweise muss innerhalb der Klammer zusätzlich der _Separator_ mit `sep = \",\"` angegeben werden, also mit welchem Zeichen die Spalten getrennt sind. Normalerweise ist dies `,` in `.csv` (_comma separated values_), es kann aber auch `;`, `.` oder eine Lücke ` ` sein. \n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-3_fe4a6493ba634a0a02fa964de8e71d7f'}\n\n```{.r .cell-code}\n# Daten laden und anschauen\nd_stroop <- read.csv(\"../../data/stroop_example1.csv\", sep = \",\")\nhead(d_stroop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  wordCTK colorCTK corrAnsCTK congruentCTK wordPractice colorPractice\n1                                       NA                           \n2                                       NA                           \n3    test     blue          b            1                           \n4    test      red          r            1                           \n5    test   yellow          g            1                           \n6    test   yellow          g            1                           \n  corrAnsPractice congruentPractice word color corrAns congruent\n1                                NA                           NA\n2                                NA                           NA\n3                                NA                           NA\n4                                NA                           NA\n5                                NA                           NA\n6                                NA                           NA\n  trials_CTK.thisRepN trials_CTK.thisTrialN trials_CTK.thisN\n1                  NA                    NA               NA\n2                  NA                    NA               NA\n3                   0                     0                0\n4                   0                     1                1\n5                   0                     2                2\n6                   1                     0                3\n  trials_CTK.thisIndex trials_practice.thisRepN trials_practice.thisTrialN\n1                   NA                       NA                         NA\n2                   NA                       NA                         NA\n3                    2                       NA                         NA\n4                    0                       NA                         NA\n5                    1                       NA                         NA\n6                    1                       NA                         NA\n  trials_practice.thisN trials_practice.thisIndex trials_test.thisRepN\n1                    NA                        NA                   NA\n2                    NA                        NA                   NA\n3                    NA                        NA                   NA\n4                    NA                        NA                   NA\n5                    NA                        NA                   NA\n6                    NA                        NA                   NA\n  trials_test.thisTrialN trials_test.thisN trials_test.thisIndex thisRow.t\n1                     NA                NA                    NA        NA\n2                     NA                NA                    NA        NA\n3                     NA                NA                    NA  193.5270\n4                     NA                NA                    NA  197.0311\n5                     NA                NA                    NA  200.3689\n6                     NA                NA                    NA  202.1793\n  notes instruction.started instr_text.started instr_image.started\n1    NA           0.0125093          0.0699617           0.0699617\n2    NA                  NA                 NA                  NA\n3    NA                  NA                 NA                  NA\n4    NA                  NA                 NA                  NA\n5    NA                  NA                 NA                  NA\n6    NA                  NA                 NA                  NA\n  instr_resp.started instruction.stopped instr_resp.keys instr_resp.rt\n1          0.0699617            187.1745           space      187.1005\n2                 NA                  NA                            NA\n3                 NA                  NA                            NA\n4                 NA                  NA                            NA\n5                 NA                  NA                            NA\n6                 NA                  NA                            NA\n  instr_resp.duration instr_color_to_key.started instr_ctk.started\n1                None                         NA                NA\n2                                       187.1746          187.1947\n3                                             NA                NA\n4                                             NA                NA\n5                                             NA                NA\n6                                             NA                NA\n  resp_ctk.started instr_color_to_key.stopped resp_ctk.keys resp_ctk.rt\n1               NA                         NA                        NA\n2         187.1947                   193.4541         space    6.252503\n3               NA                         NA                        NA\n4               NA                         NA                        NA\n5               NA                         NA                        NA\n6               NA                         NA                        NA\n  resp_ctk.duration ITI.started fixcross.started fixcross.stopped ITI.stopped\n1                            NA               NA               NA          NA\n2              None          NA               NA               NA          NA\n3                      193.5119         194.2690         195.1040    195.0576\n4                      197.0175         198.2207         199.0374    199.0175\n5                      200.3529         200.4636         201.2810    201.2586\n6                      202.1606         203.3668         204.1751    204.1514\n  color_to_key_run.started stimulus_CTK.started keyResp_CTK.started\n1                       NA                   NA                  NA\n2                       NA                   NA                  NA\n3                 195.0577             195.1040            195.1040\n4                 199.0176             199.0374            199.0374\n5                 201.2587             201.2810            201.2810\n6                 204.1514             204.1751            204.1751\n  color_to_key_run.stopped keyResp_CTK.keys keyResp_CTK.corr keyResp_CTK.rt\n1                       NA                                NA             NA\n2                       NA                                NA             NA\n3                 196.9878                b                1      1.8719126\n4                 200.3518                r                1      1.3079718\n5                 202.1582                g                1      0.8613760\n6                 204.9855                g                1      0.8027307\n  keyResp_CTK.duration instr_practice.started instr_practice_text.started\n1                                          NA                          NA\n2                                          NA                          NA\n3                 None                     NA                          NA\n4                 None                     NA                          NA\n5                 None                     NA                          NA\n6                 None                     NA                          NA\n  instr_practice_resp.started instr_practice.stopped instr_practice_resp.keys\n1                          NA                     NA                         \n2                          NA                     NA                         \n3                          NA                     NA                         \n4                          NA                     NA                         \n5                          NA                     NA                         \n6                          NA                     NA                         \n  instr_practice_resp.rt instr_practice_resp.duration practice_run.started\n1                     NA                                                NA\n2                     NA                                                NA\n3                     NA                                                NA\n4                     NA                                                NA\n5                     NA                                                NA\n6                     NA                                                NA\n  stimulus_practice.started respPractice.started practice_run.stopped\n1                        NA                   NA                   NA\n2                        NA                   NA                   NA\n3                        NA                   NA                   NA\n4                        NA                   NA                   NA\n5                        NA                   NA                   NA\n6                        NA                   NA                   NA\n  respPractice.keys respPractice.corr respPractice.rt respPractice.duration\n1                                  NA              NA                      \n2                                  NA              NA                      \n3                                  NA              NA                      \n4                                  NA              NA                      \n5                                  NA              NA                      \n6                                  NA              NA                      \n  feedback.started textFeedback.started feedback.stopped instr_test.started\n1               NA                   NA               NA                 NA\n2               NA                   NA               NA                 NA\n3               NA                   NA               NA                 NA\n4               NA                   NA               NA                 NA\n5               NA                   NA               NA                 NA\n6               NA                   NA               NA                 NA\n  instr_test_text.started instr_test_resp.started instr_test.stopped\n1                      NA                      NA                 NA\n2                      NA                      NA                 NA\n3                      NA                      NA                 NA\n4                      NA                      NA                 NA\n5                      NA                      NA                 NA\n6                      NA                      NA                 NA\n  instr_test_resp.keys instr_test_resp.rt instr_test_resp.duration\n1                                      NA                         \n2                                      NA                         \n3                                      NA                         \n4                                      NA                         \n5                                      NA                         \n6                                      NA                         \n  test_run.started stimulus_test_run.started keyResp_test_run.started\n1               NA                        NA                       NA\n2               NA                        NA                       NA\n3               NA                        NA                       NA\n4               NA                        NA                       NA\n5               NA                        NA                       NA\n6               NA                        NA                       NA\n  test_run.stopped keyResp_test_run.keys keyResp_test_run.corr\n1               NA                                          NA\n2               NA                                          NA\n3               NA                                          NA\n4               NA                                          NA\n5               NA                                          NA\n6               NA                                          NA\n  keyResp_test_run.rt keyResp_test_run.duration goodbye.started\n1                  NA                                        NA\n2                  NA                                        NA\n3                  NA                                        NA\n4                  NA                                        NA\n5                  NA                                        NA\n6                  NA                                        NA\n  textGoodbye.started goodbye.stopped participant session\n1                  NA              NA  sub-154989       1\n2                  NA              NA  sub-154989       1\n3                  NA              NA  sub-154989       1\n4                  NA              NA  sub-154989       1\n5                  NA              NA  sub-154989       1\n6                  NA              NA  sub-154989       1\n                     date     expName psychopyVersion frameRate\n1 2024-03-13_18h51.58.866 stroop_test        2023.2.3      None\n2 2024-03-13_18h51.58.866 stroop_test        2023.2.3      None\n3 2024-03-13_18h51.58.866 stroop_test        2023.2.3      None\n4 2024-03-13_18h51.58.866 stroop_test        2023.2.3      None\n5 2024-03-13_18h51.58.866 stroop_test        2023.2.3      None\n6 2024-03-13_18h51.58.866 stroop_test        2023.2.3      None\n                          expStart  X\n1 2024-03-13 18h52.18.263622 +0100 NA\n2 2024-03-13 18h52.18.263622 +0100 NA\n3 2024-03-13 18h52.18.263622 +0100 NA\n4 2024-03-13 18h52.18.263622 +0100 NA\n5 2024-03-13 18h52.18.263622 +0100 NA\n6 2024-03-13 18h52.18.263622 +0100 NA\n```\n:::\n:::\n\n\n:::callout-tip\n## Tipp: Daten anderer Formate einlesen\n\nFalls Sie eine Excel-Datei einlesen möchten, können Sie dies mit der `read_excel()`-Funktion aus dem Package `readxl()` tun, also mit `readxl::read_excel()`.\n\nFalls Sie nicht wissen, mit welcher Funktion Sie Ihre Daten einlesen können, können Sie dies in _RStudio_ ausprobieren indem Sie beim Reiter `Environment` auf `Import Dataset` klicken und dort Ihren Datensatz auswählen. Sie können dort diverse Einstellungen tätigen. In der _R Console_ können Sie dann den Code sehen, der zum Einlesen verwendet wurde und die dortige Funktion in den Code kopieren.\n:::\n\n:::callout-caution\n## Hands-on: Daten einlesen\n\nLesen Sie den Stroop Datensatz in Ihrem `data`-Ordner ein und schauen Sie ihn dann mit den Funktionen `glimpse()` und `head()` an.\n:::\n\n## Verwenden der Pipe: `|>` oder `%>%`\n\nIn _R_ können Sie die _Pipe_ verwenden um mehrere Datenverarbeitungsschritte aneinander zu hängen. Damit sparen Sie sich aufwändige Zwischenschritte und vermeiden das Erstellen von immer neuen Datensätzen. Statt zwei einzelne Datenverarbeitungsschritte zu machen wie oben, können mehrere Schritte (hier Daten einlesen und anzeigen) zusammengefasst werden, in dem nach Zeilenende eine _Pipe_ eingefügt wird:\n\n<aside>Die _Base R Pipe (`|>`) und die _Magritter Pipe (`%>%`)_ unterscheiden sich in Details, in unseren Beispielen spielt es jedoch keine Rolle, welche Pipe Sie verwenden. Wann _Pipes_ ungeeignet sind wird [hier](https://r4ds.had.co.nz/pipes.html#when-not-to-use-the-pipe) beschrieben.</aside>\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-4_93739b3d7199ec2f4e19bbee6b5bf179'}\n\n```{.r .cell-code}\nd_stroop <- read.csv(\"../../data/stroop_example1.csv\", sep = \",\") |>\n    glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 161\nColumns: 97\n$ wordCTK                      <chr> \"\", \"\", \"test\", \"test\", \"test\", \"test\", \"…\n$ colorCTK                     <chr> \"\", \"\", \"blue\", \"red\", \"yellow\", \"yellow\"…\n$ corrAnsCTK                   <chr> \"\", \"\", \"b\", \"r\", \"g\", \"g\", \"b\", \"r\", \"g\"…\n$ congruentCTK                 <int> NA, NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ wordPractice                 <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ colorPractice                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ corrAnsPractice              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ congruentPractice            <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ word                         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ color                        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ corrAns                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ congruent                    <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_CTK.thisRepN          <int> NA, NA, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, …\n$ trials_CTK.thisTrialN        <int> NA, NA, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, …\n$ trials_CTK.thisN             <int> NA, NA, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,…\n$ trials_CTK.thisIndex         <int> NA, NA, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0, 1, …\n$ trials_practice.thisRepN     <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisTrialN   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisN        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisIndex    <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_test.thisRepN         <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_test.thisTrialN       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_test.thisN            <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_test.thisIndex        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ thisRow.t                    <dbl> NA, NA, 193.5270, 197.0311, 200.3689, 202…\n$ notes                        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instruction.started          <dbl> 0.0125093, NA, NA, NA, NA, NA, NA, NA, NA…\n$ instr_text.started           <dbl> 0.0699617, NA, NA, NA, NA, NA, NA, NA, NA…\n$ instr_image.started          <dbl> 0.0699617, NA, NA, NA, NA, NA, NA, NA, NA…\n$ instr_resp.started           <dbl> 0.0699617, NA, NA, NA, NA, NA, NA, NA, NA…\n$ instruction.stopped          <dbl> 187.1745, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ instr_resp.keys              <chr> \"space\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", …\n$ instr_resp.rt                <dbl> 187.1005, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ instr_resp.duration          <chr> \"None\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_color_to_key.started   <dbl> NA, 187.1746, NA, NA, NA, NA, NA, NA, NA,…\n$ instr_ctk.started            <dbl> NA, 187.1947, NA, NA, NA, NA, NA, NA, NA,…\n$ resp_ctk.started             <dbl> NA, 187.1947, NA, NA, NA, NA, NA, NA, NA,…\n$ instr_color_to_key.stopped   <dbl> NA, 193.4541, NA, NA, NA, NA, NA, NA, NA,…\n$ resp_ctk.keys                <chr> \"\", \"space\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", …\n$ resp_ctk.rt                  <dbl> NA, 6.252503, NA, NA, NA, NA, NA, NA, NA,…\n$ resp_ctk.duration            <chr> \"\", \"None\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ ITI.started                  <dbl> NA, NA, 193.5119, 197.0175, 200.3529, 202…\n$ fixcross.started             <dbl> NA, NA, 194.2690, 198.2207, 200.4636, 203…\n$ fixcross.stopped             <dbl> NA, NA, 195.1040, 199.0374, 201.2810, 204…\n$ ITI.stopped                  <dbl> NA, NA, 195.0576, 199.0175, 201.2586, 204…\n$ color_to_key_run.started     <dbl> NA, NA, 195.0577, 199.0176, 201.2587, 204…\n$ stimulus_CTK.started         <dbl> NA, NA, 195.1040, 199.0374, 201.2810, 204…\n$ keyResp_CTK.started          <dbl> NA, NA, 195.1040, 199.0374, 201.2810, 204…\n$ color_to_key_run.stopped     <dbl> NA, NA, 196.9878, 200.3518, 202.1582, 204…\n$ keyResp_CTK.keys             <chr> \"\", \"\", \"b\", \"r\", \"g\", \"g\", \"b\", \"r\", \"g\"…\n$ keyResp_CTK.corr             <int> NA, NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ keyResp_CTK.rt               <dbl> NA, NA, 1.8719126, 1.3079718, 0.8613760, …\n$ keyResp_CTK.duration         <chr> \"\", \"\", \"None\", \"None\", \"None\", \"None\", \"…\n$ instr_practice.started       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_text.started  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_resp.started  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice.stopped       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_resp.keys     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_practice_resp.rt       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_resp.duration <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ practice_run.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ stimulus_practice.started    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ practice_run.stopped         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.keys            <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ respPractice.corr            <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.rt              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.duration        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ feedback.started             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ textFeedback.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ feedback.stopped             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test.started           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_text.started      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_resp.started      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test.stopped           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_resp.keys         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_test_resp.rt           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_resp.duration     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ test_run.started             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ stimulus_test_run.started    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_test_run.started     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ test_run.stopped             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_test_run.keys        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ keyResp_test_run.corr        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_test_run.rt          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_test_run.duration    <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ goodbye.started              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ textGoodbye.started          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ goodbye.stopped              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ participant                  <chr> \"sub-154989\", \"sub-154989\", \"sub-154989\",…\n$ session                      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ date                         <chr> \"2024-03-13_18h51.58.866\", \"2024-03-13_18…\n$ expName                      <chr> \"stroop_test\", \"stroop_test\", \"stroop_tes…\n$ psychopyVersion              <chr> \"2023.2.3\", \"2023.2.3\", \"2023.2.3\", \"2023…\n$ frameRate                    <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"…\n$ expStart                     <chr> \"2024-03-13 18h52.18.263622 +0100\", \"2024…\n$ X                            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n:::\n:::\n\n\n:::callout-tip\n## Tipp\n\nAchtung, alles was nach der Pipe kommt wird ebenfalls im Datensatz verändert, wenn wir zu Beginn ein `<-` oder `=` schreiben. Wird z.B. der Code\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-5_cfa995ba60715490662f31d6ea7c8470'}\n\n```{.r .cell-code}\nd_stroop <- read.csv(\"../../data/stroop_example1.csv\", sep = \",\") |>\n    head()\n```\n:::\n\n\neingegeben, besteht der Datensatz `d_stroop` dann nur noch aus 6 Zeilen. \n\nWird die Pipe ohne `<-` oder `=` verwendet, bleibt der Datensatz unverändert:\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-6_200930503db21034baee73df7a05f3a5'}\n\n```{.r .cell-code}\nd_stroop |>\n    head()\n```\n:::\n\n::: \n\n### Daten filtern: `filter()`\n\nMit `filter()` können bestimmte Beobachtungen oder Untergruppen ausgewählt werden. Hierfür muss in der Funktion `filter(.data, filter, ...)` der Datensatz, die betreffende Variable, sowie eine Bedingung eingegeben werden. Es wird die ganze Zeile im Datensatz behalten in der die Variable der Bedingung entspricht.\n\n_Beispiele:_\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-7_04ec5ed630f26b81d54a845134cd4dd7'}\n\n```{.r .cell-code}\n# only keep observations where condition is \"star\"\nd_filtered <- filter(d, condition == \"star\")\n\n# or with the pipe\nd_filtered <- d |> filter(condition == \"star\")\n\n# only keep observations where condition is NOT \"star\"\nd_filtered <- d |> filter(condition != \"star\")\n\n# only keep observations where x is more than 50 (e.g. for filtering response times)\nd_filtered <- d |> filter(x > 50)\n\n# only keep observations where x is more than 50 (e.g. for filtering response times)\nd_filtered <- d |> filter(x > 50 & x < 60)\n\n# use several filters\nd_filtered <- d |> \n    filter(condition == \"star\") |>\n    filter(x < 50)\n```\n:::\n\n\nIn unserem Datensatz möchten wir nur die gültigen Experimentdaten behalten, die _Color-To-Key_ (`ctk`) Bedingung sowie die _Practice Trials_ möchten wir ausschliessen. \n\nDie Variable `trials_test.thisTrialN` enthält die Trialnummer, sie enthält nur Einträge, während der gültigen Trials. Wir können dies nutzen und alle Zeilen behalten in welchen die Zelle der Variable `trials_test.thisTrialN` __nicht__ leer ist:\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-8_20d76b1232fd9737597ca342036e65e8'}\n\n```{.r .cell-code}\nd_stroop <- d_stroop |> \n    filter(!is.na(trials_test.thisTrialN)) |>\n    glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 120\nColumns: 97\n$ wordCTK                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ colorCTK                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ corrAnsCTK                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ congruentCTK                 <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wordPractice                 <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ colorPractice                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ corrAnsPractice              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ congruentPractice            <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ word                         <chr> \"rot\", \"rot\", \"blau\", \"gelb\", \"rot\", \"bla…\n$ color                        <chr> \"red\", \"red\", \"blue\", \"yellow\", \"yellow\",…\n$ corrAns                      <chr> \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"…\n$ congruent                    <int> 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1,…\n$ trials_CTK.thisRepN          <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_CTK.thisTrialN        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_CTK.thisN             <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_CTK.thisIndex         <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisRepN     <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisTrialN   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisN        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_practice.thisIndex    <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ trials_test.thisRepN         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,…\n$ trials_test.thisTrialN       <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, …\n$ trials_test.thisN            <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,…\n$ trials_test.thisIndex        <int> 1, 0, 5, 10, 3, 7, 4, 8, 9, 11, 6, 2, 10,…\n$ thisRow.t                    <dbl> 345.2750, 347.9420, 349.8809, 352.7261, 3…\n$ notes                        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instruction.started          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_text.started           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_image.started          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_resp.started           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instruction.stopped          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_resp.keys              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_resp.rt                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_resp.duration          <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_color_to_key.started   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_ctk.started            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ resp_ctk.started             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_color_to_key.stopped   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ resp_ctk.keys                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ resp_ctk.rt                  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ resp_ctk.duration            <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ ITI.started                  <dbl> 345.2600, 347.9253, 349.8663, 352.7083, 3…\n$ fixcross.started             <dbl> 346.0424, 348.2887, 350.6779, 352.8112, 3…\n$ fixcross.stopped             <dbl> 346.8565, 349.1113, 351.4975, 353.6451, 3…\n$ ITI.stopped                  <dbl> 346.8277, 349.0914, 351.4755, 353.6130, 3…\n$ color_to_key_run.started     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ stimulus_CTK.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_CTK.started          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ color_to_key_run.stopped     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_CTK.keys             <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ keyResp_CTK.corr             <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_CTK.rt               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ keyResp_CTK.duration         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_practice.started       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_text.started  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_resp.started  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice.stopped       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_resp.keys     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_practice_resp.rt       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_practice_resp.duration <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ practice_run.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ stimulus_practice.started    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ practice_run.stopped         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.keys            <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ respPractice.corr            <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.rt              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ respPractice.duration        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ feedback.started             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ textFeedback.started         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ feedback.stopped             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test.started           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_text.started      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_resp.started      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test.stopped           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_resp.keys         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ instr_test_resp.rt           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ instr_test_resp.duration     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ test_run.started             <dbl> 346.8278, 349.0915, 351.4755, 353.6131, 3…\n$ stimulus_test_run.started    <dbl> 346.8565, 349.1113, 351.4975, 353.6451, 3…\n$ keyResp_test_run.started     <dbl> 346.8565, 349.1113, 351.4975, 353.6451, 3…\n$ test_run.stopped             <dbl> 347.9235, 349.8640, 352.7062, 354.8708, 3…\n$ keyResp_test_run.keys        <chr> \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"…\n$ keyResp_test_run.corr        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ keyResp_test_run.rt          <dbl> 1.0639791, 0.7370255, 1.1883303, 1.200789…\n$ keyResp_test_run.duration    <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"…\n$ goodbye.started              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ textGoodbye.started          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ goodbye.stopped              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ participant                  <chr> \"sub-154989\", \"sub-154989\", \"sub-154989\",…\n$ session                      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ date                         <chr> \"2024-03-13_18h51.58.866\", \"2024-03-13_18…\n$ expName                      <chr> \"stroop_test\", \"stroop_test\", \"stroop_tes…\n$ psychopyVersion              <chr> \"2023.2.3\", \"2023.2.3\", \"2023.2.3\", \"2023…\n$ frameRate                    <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"…\n$ expStart                     <chr> \"2024-03-13 18h52.18.263622 +0100\", \"2024…\n$ X                            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n:::\n:::\n\n\n\n::: callout-caution\n## Hands-on: Daten filtern\n\nErstellen Sie einen neuen Datensatz namens `d_stroop_correct` und filtern Sie diesen so dass er nur Trials mit __richtigen__ Antworten enthält. Schauen Sie in der Variable `keyResp_test_run.corr`, ob tatsächlich nur noch richtige Antworten übrig geblieben sind.\n\nAchtung: Arbeiten Sie in den weiteren Schritten __nicht__ mit diesem Datensatz weiter, da wir die falschen Antworten in einem nächsten Schritt noch im Datensatz brauchen.\n:::\n\n## Variablen auswählen: `select()`\n\nEin komplexer Datensatz mit sehr vielen Variablen wird oft für die Analyse aus Gründen der Einfachheit oder Anonymisierung reduziert. Das bedeutet, dass man sich die nötigen Variablen herausliest, und nur mit diesem reduzierten Datensatz weiterarbeitet. Hierzu eignet sich die Funktion `select()` sehr gut: Mit `select(.data, variablenname, ...)` können die zu behaltenden Variablen ausgewählt werden. Wird ein `!` vor einen Variablennamen gesetzt, wird die Variable __nicht__ behalten.\n\nMit `select()` können wir auch die Variablen sortieren und umbenennen, damit unser Datensatz so strukturiert ist, wie wir ihn gebrauchen können.\n\n_Beispiele:_\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-9_4a1ff15cdad15f533ce3443342b6a28b'}\n\n```{.r .cell-code}\n# keep variables condition and x without using a pipe\nd_simpler <- select(d, condition, x)\n\n# keep variables condition and x using a pipe\nd_simpler <- d |> select(condition, x)\n\n# keep all variable except x\nd_simpler <- d |> select(!x)\n\n# change name of variable\nd_simpler <- d |> select(newvariablename = x)\n```\n:::\n\n\nSollen mehrere Variablen am Stück ausgewählt werden, kann man die erste Variable in der Reihe (z.B. `var_x`) und die letzte in der Reihe (z.B. `var_z`) als `var_x:var_z` eingeben, dann werden auch alle dazwischen liegenden Variablen ausgewählt.\n\n::: callout-caution\n## Hands-on: Variablen auswählen\n\nSchauen Sie sich Ihren Datensatz an, welche Variablen benötigen Sie für die weitere Analysen?\n\nErstellen Sie einen neuen Datensatz `d_stroop_clean` in welchem Sie die entsprechenden Variablen auswählen. \n\nBenennen Sie Variablen um, wenn Sie Ihnen zu lange/kompliziert erscheinen.\n\nUntenstehend finden Sie ein Beispiel, wie der Datensatz danach aussehen könnte.\n:::\n\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-10_30bd287063e2f06660eedc370c1432c3'}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 120\nColumns: 9\n$ id         <chr> \"sub-154989\", \"sub-154989\", \"sub-154989\", \"sub-154989\", \"su…\n$ experiment <chr> \"stroop_test\", \"stroop_test\", \"stroop_test\", \"stroop_test\",…\n$ word       <chr> \"rot\", \"rot\", \"blau\", \"gelb\", \"rot\", \"blau\", \"blau\", \"gelb\"…\n$ color      <chr> \"red\", \"red\", \"blue\", \"yellow\", \"yellow\", \"yellow\", \"red\", …\n$ corrAns    <chr> \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"b\", \"g\", \"b\", \"b\",…\n$ congruent  <int> 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0,…\n$ response   <chr> \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"b\", \"g\", \"b\", \"b\",…\n$ rt         <dbl> 1.0639791, 0.7370255, 1.1883303, 1.2007897, 1.6688681, 1.58…\n$ accuracy   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n```\n:::\n:::\n\n\n\n## Neue Variablen generieren und verändern: `mutate()` und `case_when()`\n\nMit der `mutate(.data, …)` Funktion können im Datensatz neue Variablen generiert oder bestehende verändert werden. \n\n_Beispiel:_\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-11_ab1eb501e1a0e799bc1ae44b86a99f7f'}\n\n```{.r .cell-code}\n# generate new variables\nd_altered <- d |>\n    mutate(num_variable = 1.434,\n           chr_variable = \"1.434\",\n           sumofxy_variable = x + y,\n           copy_variable = condition)\n\n# alter exisiting variables\nd_altered <- d_altered |>\n    mutate(num_variable = num_variable * 1000) # e.g. to change seconds to milliseconds\n```\n:::\n\n\nMit `case_when()` kann eine neue Variable erstellt werden in Abhängigkeit von Werten anderer Variablen. Damit kann z.B. eine Variable `accuracy` erstellt werden, die den Wert `correct` hat, wenn die Aufgabe richtig gelöst wurde (z.B. Bedingung `rot` und Tastendruck `r`) und sonst den Wert `error` hat.\n\n_Beispiel:_\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-12_20b63179385a8491e04ac69cfe259313'}\n\n```{.r .cell-code}\nd_condvariables <- d |>\n    mutate(cond_variable = case_when(x > 50 ~ \"higher\",\n                                     x <= 50 ~ \"lower\",\n                                     .default = NA))\n```\n:::\n\n\n\n::: callout-caution\n## Hands-on: Variablen generieren und verändern\n\nErstellen Sie im Datensatz `d_stroop_clean` eine neue Variable mit dem Namen `researcher`, den Ihren Namen enthält.\n\nErstellen Sie zudem eine Variable `accuracy_check`, mit `correct` für korrekte und `error` für inkorrekte Trials. Kontrollieren Sie mit der Variable `keyResp_test_run.corr` (oder Ihrem neuen Variablennamen, wenn Sie diese umbenannt haben) im Datensatz, ob Sie die Aufgabe richtig gelöst haben\n\n:::\n\n\n\n### `as.factor()`, `as.numeric()`, ...\n\nFor changing the variable class we can use these functions. It makes sense to adjust variable classes at the beginning of the data pipeline, as it will make a difference for plots as well as models if a variable is entered categorical or numerical. Subject IDs for example are often numerical values but are actually categorical.\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-13_c69f2ecafa63ee9e91ead34d63685430'}\n\n```{.r .cell-code}\n# change to factor (categorical/nominal)\nd <- d |> \n    mutate(id = as.factor(id))\n```\n:::\n\n\n<!-- #### `relevel()` -->\n\n## Group and summarise data\n\n### `group_by()` and `summarise()`\n\nWith these functions you can group a data frame by factor levels and calculate mean scores or else.\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-14_fcbd55b444d3c2ff75c0ab07e7471e79'}\n\n```{.r .cell-code}\n# look at each individual\nd |> group_by(id) |>\n    summarise(mean_x = mean(x),\n              mean_y = mean(y))\n\n# look at each individual in each condition\nd_summary <- d |> group_by(id, condition) |>\n    summarise(mean_x = mean(x),\n              sd_x = sd(x),\n              mean_y = mean(y),\n              sd_y = sd(x))\n\nglimpse(d_summary)\n```\n:::\n\n\n\n\n## Change the data format from *long* to *wide* and vice versa\n\nData can be formatted differently. It is always important to know:\n\n-   What data format does your data set have?\n\n-   What data format does your analysis pipeline require?\n\n***Long format***\n\n-   every assessed/measured variable has one column (e.g. subject id, age, IQ score, response time, response button, ...)\n\n-   each measure has one row\n\n-   if one variable has several measures (e.g. `rt` or `accuracy`) but the other variable has only few/one (e.g. the `sub-id`), the values of the second are repeated\n\nData visualization and analysis is often easier in this format. If your data is in *wide* format it is necessary to create a new data frame in *long* format for the further data wrangling in this course.\n\n***Wide format***\n\n-   each measurement has one column\n\n-   each entity (e.g. person) has one row\n\nThis data format makes it easy to spot missing values or outliers and count how many observations you have.\n\n------------------------------------------------------------------------\n\n![](imgs/widelongformat.JPG){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n::: {.callout-tip appearance=\"simple\"}\n## Questions\n\nIn our example data set we have 4 columns (`id`, `condition`, `x`, `y`) and 1846 rows. What format is this?\n\nWhat data format does your own data set have?\n:::\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-15_2f9d15db06fffb5c93b7b5facc9cfd12'}\n\n```{.r .cell-code}\nglimpse(d)\n```\n:::\n\n\n### `pivot_wider()`\n\nWith `pivot_wider(data, id_cols = , names_from = , values_from = , ...)` you can transform your data from *long* to *wide* format.\n\n***Example***\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-16_178c811e582c0d72613167c0a3abc704'}\n\n```{.r .cell-code}\nd_wide <- d |> pivot_wider(id_cols = id, names_from = condition, names_glue = \"{condition}_{.value}\", values_from = c(x, y))\nglimpse(d_wide)\n```\n:::\n\n\n### `pivot_longer()`\n\nWith `pivot_longer(data, cols = , names_to = , ...)` you can transform your data from *wide* to *long* format.\n\nWith `cols` you specify the columns of the wide dataframe you want to bring into long format. With `names_to` you specify how the new variables (colums) are named (enter them with `\"`). With `names_sep`you can specify, if two variables should be extracted from the existing column.\n\n***Example***\n\n\n::: {.cell hash='datawrangling_cache/html/unnamed-chunk-17_e41a25da293e63944c12efb6e0737960'}\n\n```{.r .cell-code}\nd_long <- d_wide |> pivot_longer(cols = away_x:dino_y, names_to = c(\"condition\", \"measure\"), names_sep = \"_\")\nglimpse(d_long)\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n## Rule of thumb\n\n-   Variables/factors should have a column (e.g. the variables you want to enter in your model formula).\n\n-   Factor levels (e.g. condition levels such as `away`) should be coded within rows.\n:::\n\n\n\n\n:::callout-caution\n## Hands-on: Data wrangling\n\nErstellen Sie nun ein Projekt für das Random-Dot Experiment und führen Sie die Data Wrangling Schritte selbstständig durch um Ihr Wissen zu festigen.\n:::\n\n<aside>Zu den gelernten Funktionen finden Sie hier [Grafiken](https://allisonhorst.com/r-packages-functions) die evtl. helfen, sich die Funktions-Namen zu merken.</aside>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}