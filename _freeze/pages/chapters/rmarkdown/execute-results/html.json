{
  "hash": "466b3a05fa6f4fbb2dae340584a49a9c",
  "result": {
    "markdown": "---\ntitle: \"RStudio Projects und RMarkdown\"\ndescription: Data Reports mit Text und Code.\nauthor:\n  - name: Gerda Wyssen\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography_nsci24.bib\nformat:\n    html:\n        toc: true\n        code-link: true\n---\n\n\nZum Erstellen von reproduzierbaren Reports eignen sich RStudio Projects mit RMarkdown (oder Quarto) Files sehr gut. \n\n# RStudio Projects\n\nRStudio Projekte erm√∂glichen vereinfachtes Arbeiten mit R, da alle Dateien, die in diesem Projektordner gespeichert sind, direkt verf√ºgbar sind. So kann die aktuelle R Session abgespeichert werden und beim n√§chsten √ñffnen kann dort weitergearbeitet werden wo man aufgeh√∂rt hat. Projekte erm√∂glichen somit ein kontinuierliches `working directory`.\n\n\n::: {.cell hash='rmarkdown_cache/html/unnamed-chunk-1_83d641c0fc36018ee06561f162ee7334'}\n\n:::\n\n\n\n\n# R Markdown \n\nR Markdown ist eine simple Markup-Sprache, die es uns erm√∂glicht reproduzierbare Data Reports zu erstellen. R Markdown ist praktisch, weil wir gleichzeitig Text und Code verwenden und den Output des Codes anzeigen k√∂nnen. Den Text k√∂nnen wir schreiben, ohne dass vor jede Zeile ein `#` gesetzt werden muss und wir k√∂nnen ihn formatieren. Das Skript der R Markdown Files wid *geknittet* und so zu einem HTML, PDF oder Word-Dokument (je nach Wahl) zusammengef√ºgt. Wir k√∂nnen mit R Markdown also beispielsweise eine Text-Beschreibung, Code zum Erstellen einer Grafik und auch die erstellte Grafik kombinieren. \n\n<aside>Man kann mit R Markdown auch Pr√§sentationen, Webseiten, B√ºcher, Lebensl√§ufe, Artikel oder Arbeiten erstellen. [Hier](https://rmarkdown.rstudio.com/gallery.html) finden Sie eine Galerie. </aside>\n\n## R Markdown File erstellen und ausf√ºhren \n\nZuerst erstellen wir ein R Markdown File und schauen uns die wichtigsten Funktionen an. Wir w√§hlen als Outputformat `html`.\n\n:::{.callout-caution}\n## Hands-on: R Markdown File in einem Projekt erstellen\n\n- \n- √ñffnen Sie das Projekt und erstellen Sie unter `File` > `New File` > `R Markdown ...` ein neues RMarkdown-File.\n- Geben Sie einen Titel und Ihren Namen ein und w√§hlen Sie `HTML`als Output-Format\n- Speichern Sie dass Dokument unter dem Namen `rmarkdown_example`ab. \n:::\n\n<aside>**Weiterf√ºhrende Informationen:** \n\nüëâ Einf√ºhrung in die Verwendung von R/RStudio/Notebooks im Rahmen des Psychologie Studiums von Andrew Ellis und Boris Mayer [Einf√ºhrung in R](https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html#r-notebooks-verwenden)\n\nüëâ Sehr kompakte, praxisnahe Einf√ºhrung in R Markdown von Danielle Navarro (Slidedeck in englisch) [Einf√ºhrung in R Markdown](https://djnavarro.net/slides-starting-rmarkdown)\n</aside>\n\nWenn Sie die obigen Schritte ausgef√ºhrt haben, beantworten Sie bitte folgende Fragen:\n\n:::{.callout-important}\n## Aufgabe 1\nWelches Format (Endung) hat das abgespeicherte R Markdown Skript nun in Ihrem Ordner?\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## L√∂sung 1\n`.Rmd` f√ºr R Markdown\n:::\n\n\n## Knitten\n\nMit **Knit** f√ºhren wir das R Markdown Skript nun aus und erstellen so (wie vorher ausgew√§hlt) ein `html`-File.\n\n:::{.callout-important}\n## Aufgabe 2\nF√ºhren Sie das File mit `Knit` aus und vergleichen Sie das R Markdown Skript mit dem Output den Sie erhalten haben. Was f√§llt Ihnen auf?\n\n- Was ist nicht mehr zu sehen?\n- Was ist zus√§tzlich zu sehen?\n- Was hat sich im Projekt-Ordner ver√§ndert?\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## L√∂sung 2\nNicht mehr zu sehen ist der vollst√§ndige YAML-header, ganz oben im R Markdown Skript. \n\nAuch nicht mehr zu sehen ist die \"Umrandung\" des Code-Snippets.\n\nNeu sieht man nun den Output des Codes.\n\nIm Projektordner wurde ein `.html`-File erstellt. Sie k√∂nnen dieses √∂ffnen, um zu schauen wie das aussieht.\n\n:::\n\n## YAML header\nZu Beginn des R Markdown Skripts finden Sie den YAML header. Hier werden Informationen zu Titel, Autor:Innen, Datum, Outputformat, Literaturverzeichnis und Layout festgelegt.\n\n<aside>YAML: Yet Another Markdown Language</aside> \n\nDas Layout kann unter `theme`ge√§ndert werden. Das kann beispielsweise wie folgt aussehen:\n\n```\noutput:\n  html_document:\n    theme: cosmo\n```\nAchtung: Einr√ºckungen m√ºssen stimmen! Hier wurde das `theme` namens `cosmo` ausgew√§hlt. M√∂gliche andere `themes`sind z.B. `default`, `cerulean`, `journal`, `flatly`, `darkly`, `readable`, `spacelab`, `united`, `cosmo`, `lumen`, `paper`, `sandstone`, `simplex`, `yeti`. \n\n:::{.callout-caution}\n## Hands-on\n- Geben Sie dem Dokument einen neuen Titel z.B. `R Markdown Einf√ºhrung`\n\n- √Ñndern Sie das Layout so, dass es Ihnen gef√§llt. \n    \n:::\n\n\n## Text erstellen in R Markdown\n\nText kann in R Markdown Files nicht nur geschrieben, sondern auch relativ simpel formatiert werden.\n\nüëâ [Hier](https://github.com/rstudio/cheatsheets/raw/main/rmarkdown-2.0.pdf) k√∂nnen Sie das Cheatsheet herunterladen. Auf der rechten Seite finden Sie die Informationen f√ºr die Textformatierung.\n\nKnitten Sie das Skript immer wieder um zu √ºberpr√ºfen, ob alles passt. Es empfiehlt sich anfangs h√§ufig zu knitten, so findet man den Fehler schneller, weil man noch weiss, was man ver√§ndert hat.\n\n:::{.callout-caution}\n## Hands-on: Texte, Formeln und Bilder in R Markdown einf√ºgen\n\n- L√∂schen Sie alles bis auf den YAML-Header\n\n- Schreiben Sie im Textbereich eine √úberschrift f√ºr ein Kapitel, ein Unterkapitel und normalen Text.\n\n- Schreiben Sie im Text etwas kursiv und etwas fett.\n\n- Erstellen Sie im Textbereich eine Liste mit 3 Punkten.\n\n- F√ºgen Sie die Formel `a^2 + b^2 = c^2` in den Text ein. Verwenden Sie daf√ºr zwei Dollarzeichen am Anfang und am Ende. Was passiert? Schreiben Sie `alpha` innerhalb von Dollarzeichen, was passiert?\n\n- F√ºgen Sie einen Link ein, knitten Sie das File und schauen Sie ob der Link funktioniert. K√∂nnen Sie einen Link nur mit einem unterstrichenen Text anzeigen, so dass die Linkadresse nicht sichtbar ist?\n\n- F√ºgen Sie ein Bild ein. Sie k√∂nnen beispielsweise das Bild `logo_landing.png` aus dem Projektordner nutzen oder ein eigenes verwenden.\n\n:::\n\n\n\n## Code erstellen in R Markdown\n\nNun erstellen wir Code. Zuerst f√ºgen wir ein Code-Chunk ein, darin muss der Code stehen um ausgef√ºhrt zu werden. Dies k√∂nnen Sie unter `Code` > `Insert Chunk` tun oder `Ctrl`+`Alt`+ `I` dr√ºcken. Code-Chunks werden mit ` ``` ` begonnen und beendet. In den geschweiften Klammern steht `r`, das bedeutet das der Code in der Sprache `R` geschrieben ist. In dieser Klammer k√∂nnen wir dem Code-Chunk einen Namen geben und bestimmen, ob der Code ausgef√ºhrt und angezeigt wird, und ob der Output des Codes angezeigt werden soll. \n\nSie k√∂nnen mit dem gr√ºnen Pfeil den Code-Chunk ausf√ºhren. Aber auch einzelne Zeilen k√∂nnen ausgef√ºhrt werden, genau so wie in einem `.R`- Skript.\n\n:::{.callout-caution}\n## Hands-on: Code in R Markdown einf√ºgen\n- Erstellen Sie einen Code-Chunk, der ausgef√ºhrt, aber nicht angezeigt wird. Erstellen Sie eine Variable mit dem Namen `numbers`, die 10 Zahlen enth√§lt. \n\n- Erstellen Sie ein Code-Chunk, der ausgef√ºhrt wird und dessen Output angezeigt wird. Berechnen Sie in diesem Chunk den Mittelwert und die Standardabweichung von `numbers`.\n\nüëâ Schauen Sie daf√ºr nochmals im Cheatsheet nach oder dr√ºcken Sie auf das Zahnr√§dchen-Symbol beim Code-Chunk.\n\n- Erstellen Sie einen Plot mit `plot(numbers)`.\n\n- Knitten Sie das File, um zu √ºberpr√ºfen, ob alles funktioniert \n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}