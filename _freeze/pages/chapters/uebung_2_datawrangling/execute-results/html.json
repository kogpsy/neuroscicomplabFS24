{
  "hash": "1866a29a8ae7acb4d4de99c798c76f0d",
  "result": {
    "markdown": "---\ntitle: \"Übung 2 - Data Wrangling\"\ndescription: Datensätze einlesen und vorverarbeiten.\nauthor:\n  - name: Gerda Wyssen\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\n  - name: Daniel Fitze\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0003-0158-7459 \nlicense: CC BY\ncitation: true\n#bibliography: ../../bibliography_gw.bib\nformat:\n    html:\n        toc: true\n---\n\n\n## Auftrag\n\nErstellen Sie eine automatisierte Datenverarbeitungs-Pipeline, die die Daten des Random Dot Experiments einlesen und vorverarbeiten. Erstellen Sie einen neuen Datensatz und einen Data Report.\n\n## Vorgehen\n\n- __Setup__\n\n    - Erstellen Sie ein _R-Project_ inkl. Ordner namens  `complab_datawrangling_randomdot`. \n\n    - Erstellen Sie in diesem Projekt-Ordner einen Ordner namens `data`.\n\n    - Laden Sie den Ordner mit den Datensätzen [hier](../../downloadable_files/data-rdk.zip) herunter. Entzippen Sie den Ordner und speichern Sie die Datensätze direkt in Ihrem `data`-Ordner. \n    \n    - Erstellen Sie ein neues `.Rmd`-File und speichern Sie dieses unter `preprocessing_randomdot_data` im Projekt-Ordner.\n\n- __Automatierter Datenimport inkl. Vorverarbeiten__ (mit folgenden Schritten):\n\n    - __Einlesen__ Datensatz (`read.csv()`)\n    \n    - __Filtern der Daten__, so dass nur Experimenttrials im Datensatz sind, keine Übungsaufgaben. (`filter()`)\n    \n    - __Erstellen einer neue Variable__ `trial`, die die Trialnummer startend mit 1 angibt (`mutate()`)\n    \n    - __Datensatz vereinfachen__: Der Datensatz soll in dieser Reihenfolge folgende Informationen/Variablennamen enthalten (`select()`): \n\n        - Versuchspersonenidentifikation (`id`)\n        - Trialnummer (`trial`)\n        - Bewegungsrichtung der Punkte (`direction`)\n        - Instruktionsbedingung (`condition`)\n        - Korrekte Antwort für diesen Trial (`corrAns`)\n        - Antwort der Versuchsperson (`resp`), \n        - war die Antwort der Versuchsperson korrekt? (`corr`)\n        - Antwortzeit der Versuchsperson (`rt`)\n\n  \n:::callout-tip\n## Tipp\n\nAm besten erstellen Sie zuerst für __einen__ Datensatz einen funktionierenden Vorverarbeitungsablauf. Dann erstellen Sie eine Funktion für diesen Ablauf. In einem letzten Schritt automatisieren Sie dann diesen Ablauf für alle Datensätze im Datenordner indem Sie eine Liste mit allen Filenamen erstellen. Sie können sich an dem [Automatisierungsbeispiel](https://kogpsy.github.io/neuroscicomplabFS24/pages/chapters/datawrangling_automatisiert.html) mit dem Stroop Datensatz orientieren.\n\nDas Einlesen kann eine Weile dauern, es sind sehr viele Datensätze.\n:::\n\n- __Datensatz kontrollieren__:\n\n    - Löschen Sie nun alle Variablen in der RStudio Umgebung (`Environment`) mit dem Besen-Icon oben rechts und führen Sie den Code nochmals aus. Wenn alles funktioniert, fahren Sie weiter.\n    \n    - Ihr Datensatz sollte nun wie untenstehend aussehen.  __Benutzen Sie dazu in Ihrem Code den Sie abgeben zwingend die Funktion `glimpse()`__.\n    \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32,520\nColumns: 8\n$ id        <chr> \"sub-10209782\", \"sub-10209782\", \"sub-10209782\", \"sub-1020978…\n$ trial     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ direction <chr> \"left\", \"right\", \"left\", \"right\", \"right\", \"left\", \"right\", …\n$ condition <chr> \"speed\", \"speed\", \"speed\", \"speed\", \"speed\", \"speed\", \"speed…\n$ corrAns   <chr> \"left\", \"right\", \"left\", \"right\", \"right\", \"left\", \"right\", …\n$ resp      <chr> \"right\", \"right\", \"left\", \"right\", \"right\", \"left\", \"right\",…\n$ corr      <int> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ rt        <dbl> 5.8753379, 0.8221688, 0.9351370, 0.7454416, 1.5085055, 0.939…\n```\n:::\n:::\n\n    \n\n- __Datensatz speichern__\n\n    - Speichern Sie den neuen Datensatz (der jetzt __alle__ Datensätze vorverarbeitet und zusammengefügt enthält) als `.csv`-File namens `dataset_rdk_clean.csv`.\n    \n- __Erstellen Data Report__ in Form eines `.html`-Files (mit der __Knit__-Funktion).\n\n    - Drücken Sie auf das `Knit`-Zeichen (Wollknäuel) um das `.Rmd`-File zu einem `.html`-File zu _knitten_.\n    \n    - Öffnen Sie das `.html`-File zur Kontrolle.\n    \n- __Hochladen Ordner auf Ilias unter `Übung 2` mit:__ \n\n    - `preprocessing_randomdot_data.Rmd`-File\n    \n    - `preprocessing_randomdot_data.html`-File\n    \n    - `dataset_rdk_clean.csv`-File\n\n\n## Abgabetermine\n\n__Gruppe Montag:__ 17. April 2024 23:55\n\n__Gruppe Mittwoch:__ 17. April 2024 23:55\n\n__Abgabetermin Korrektur:__ 5. Mai 2024 23:55\n(gilt für beide Gruppen, Abgabe in Extraordner auf Ilias)\n\n\n## Trouble shooting\n\n\n__Das Einlesen funktioniert nicht.__\n\nKontrollieren Sie bei der `read.csv()`-Funktion das `sep = ` Zeichen. Passt dieses zum Datensatz?\n\nStimmt die Ordnerstruktur? Arbeiten Sie in einem _R-Project_, ist das `.Rmd`-File im _selben_ Ordner wie das `.Rproj`-File und haben Sie die Daten im `data`-Ordner gespeichert (ungezippt, also nur die Datenfiles)?\n\n__Die Datensätze können nicht alle eingelesen werden, obwohl ein einzelner Datensatz eingelesen werden kann.__\n\nBitte öffnen Sie die Dateien nur in R, nicht in Excel oder in einem anderen Programm, das kann die Formatierung ändern und Probleme beim Einlesen verursachen. Falls Sie die Daten schon geöffnet haben, laden Sie den Datensatz nochmals neu von der Website herunter und speichern Sie ihn im Datenordner.\n\nHaben Sie die Pfade richtig gesetzt? Haben Sie die Funktion `paste()` korrekt genutzt?\n\n__Weitere Fehlermeldungen__\n\nLesen Sie die Fehlermeldung genau durch: Finden Sie Informationen zur Lösung des Fehlers?\n\n_Häufigste Fehlerquellen:_\n\n- Tippfehler\n\n- Formattierung Code-Chunk: Er muss mit ` ```{r}` beginnen und mit ` ``` ` enden. Stellen Sie sicher, dass eine Lücke zum nächsten Code-Chunk besteht.\n\n- Reihenfolgenfehler: Löschen Sie alle Variablen mit dem \"Besen\"-Symbol oben rechts und lassen Sie Ihren Code nochmals von Beginn an durch laufen. Wo stockt der Code?\n\n\n__Bei Problemen, fragen Sie bitte in der nächsten Veranstaltung nach.__\n\n\n## Feedback\n\n__Positiv aufgefallen:__\n\n- Kommentare zum Code und dem Vorgehen eingefügt (erleichtert spätere Nachvollziehbarkeit)\n\n- Kreative Lösungen (z.B. for-Loop zum Daten einlesen) und kreatives Layout (z.B. Inhaltsverzeichnis im Markdown für HTML-Datei)\n\n- Unterdrücken von `warnings` und `messages`: Diese können in RMarkdown im Output-File (z.B. `html`-File) unterdrückt werden, so kann der relevante Code nachvollzogen werden, aber es wird nicht für jeden Datensatz die Information abgedruckt (Leserlichkeit)\n\n- Neue Zeile nach der Pipe: Es muss zwar nicht nach jeder Pipe  eine neue Zeile genommen werden, der Code ist aber damit übersichtlicher und nachvollziehbarer.\n\n__Häufige Fehler:__\n\n- `glimpse()` vergessen (dies diente dazu, dass im `html`-File sictbar wird, ob bspw. alle relevanten Variablen im bereinigten Datensatz vorhanden sind, etc.)\n\n- Verwenden von _hard coded paths_: Der Pfad sollte in der Funktion, die für das Zusammenfügen und Vorbereiten der Datensätze ist als Variable eingefügt werden (z.B. `path`). Wird hier der Pfad einer Versuchsperson eingefügt, wird immer wieder derselbe Datensatz eingelesen! Auch sollte der Pfad immer von dem `.Rmd`-File aus gelesen werden können und keine lokalen Informationen (z.B. `C:/Users/...` verwenden).\n\n",
    "supporting": [
      "uebung_2_datawrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}