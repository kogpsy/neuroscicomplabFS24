{
  "hash": "c57f3ba3d569ffc6bcf75331f6f0aeaa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Übung 5 - SDT Parameter\"\ndescription: d' und c berechnen\nauthor:\n  - name: Gerda Wyssen\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\n  - name: Daniel Fitze\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0003-0158-7459 \nlicense: CC BY\ncitation: true\n#bibliography: ../../bibliography_gw.bib\nformat:\n    html:\n        toc: true\n---\n\n\n# Auftrag\n\nBerechnen Sie die zwei SDT Parameter $d'$ und $c$ und beantworen anschliessend die Lückentextfrage auf Ilias.  \n\n# Vorgehen\n\n- Laden Sie [hier](../../downloadable_files/Uebung_5.zip) das r-Projekt herunter.\n\n- Im r-Markdown File `Uebung_5.Rmd` werden Sie durch die Berechnung der Parameter geführt. Das geknittete r-Markdown File finden Sie weiter unten auf dieser Seite.\n\n- In den Code-Chunks im r-Markdown File `Uebung_5.Rmd` gibt es Lücken (`__`). Vervollständigen Sie diesen Code. **Ändern Sie den Code nur bei den Lücken!**  \n    \n- Beantworten Sie die Lückentextfrage auf Ilias.\n\n\n# Abgabetermine\n\n__Gruppe Montag:__ 31.05.2024 23:55\n\n__Gruppe Mittwoch:__ 31.05.2024 23:55\n\n\\vspace{20em}\n\n# Inhalt r-Markdown File\n\nIn dieser Übung berechnen Sie aus den Daten des Random Dot Experiments die Signal Detection Kennzahlen $d'$, $k$ und $c$. Anschliessen berechnen Sie Mittelwerte der drei Bedingungen für $d'$ und $c$ unter Berücksichtigung der Messwiederholung.\n\n## Vorbereitung\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nd = read_csv('data/dataset_rdk_clean.csv')\n```\n:::\n\n\n### Variablen bearbeiten\n\nZu `factor` konvertieren, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = d |>\n    select(id, condition, stimulus = direction, resp) |>\n    mutate(across(where(is.character), ~as_factor(.))) |>\n    drop_na()\n```\n:::\n\n\nWir definieren nun eine Antowrt als \"Hit\", wenn die Vp \"rechts\" gesagt, und die Richtung war tatsächlich \"rechts\" (also eine korrekte \"rechts\" Antowrt). Ein \"False Alarm\" ist dann eine inkorrekte \"rechts\" Antwort.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt <- d |>\n    mutate(type = case_when(\n        stimulus == ____ & resp == _____ ~ ____,\n        ____\n        ____\n        ____))\n```\n:::\n\n\nFür jede Vpn in beiden Instruktions Bedingungen zählen wir die verschiedenen Antworttypen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt |>\n    group_by(____, ____) |>\n    count(____)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary\n```\n:::\n\n\n### Von `long` zu `wide` konvertieren\n\nNun wollen wir die 4 Antworttypen in jeweils eigenen Variablen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt_summary |>\n    pivot_wider(names_from = type, \n                values_from = n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary\n```\n:::\n\n\n### Funktionen definieren\n\nDie erste Funktion ersetzt alle fehlenden Werte (`NA`) durch 0, die zweite Funktion ersetzt bei den Hit und False Alarm Rates alle 0 und 1 Werte durch 0.001 oder 0.999. Dies machen wir, damit wir bei der Berechnung der z-Werte nicht $\\pm \\infty$ erhalten. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nreplace_NA <- function(x) {\n    x = ifelse(is.na(x), 0, x)\n    x\n}\n\ncorrect_zero_one <- function(x) {\n    if (identical(x, 0)) {\n        x = x + 0.001\n    } else if (identical(x, 1)) {\n        x = x - 0.001\n    }\n    x\n}\n```\n:::\n\n\n### NAs ersetzen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt_summary |>\n    mutate(across(c(Hit, Miss, FA, CR), replace_NA))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary\n```\n:::\n\n\n### Hit Rate und False Alarm Rate berechnen\n\nNun berechnen wir die Hit Rate und die False Alarm Rate anhand der folgenden Formeln:\n\n$$ Hit~Rate = \\frac{Hits}{Hits + Misses} $$\n\n$$ FA~Rate = \\frac{False Alarms}{False Alarms + Correct Rejections} $$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt_summary |>\n    mutate(hit_rate = ____,\n           fa_rate = ____)\n```\n:::\n\n\n### Werte 0 und 1 korrigieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt_summary |>\n    mutate(across(c(hit_rate, fa_rate), correct_zero_one))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary\n```\n:::\n\n\n### Z-Transformation\n\nAls nächstes berechnen wir die z-Werte der Hit Rate und der False Alarm Rate. Dazu verwenden wir die Funktion `qnorm()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt_summary |>\n    mutate(zhr = ____,\n           zfa = ____)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary\n```\n:::\n\n\n### SDT Parameter berechnen\nNun können wir die SDT Parameter anhand der folgenden Formeln berechnen:\n\n$$d' = z(Hit~Rate) - z(FA~Rate)$$\n\n$$c = -0.5 * (z(Hit~Rate) + z(FA~Rate))$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_summary <- sdt_summary |>\n    mutate(dprime = ____,\n           c = ____) |>\n    mutate(across(c(dprime, c), round, 2))\n```\n:::\n\n\n### Variablen auswählen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_final <- sdt_summary |>\n    select(id, condition, dprime, c)\n```\n:::\n\n\nIm finalen Datensatz haben wir nun `d'` und `c` für jede Person in jeder Bedingung.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_final\n```\n:::\n\n\n### Deskriptive Werte Berechnen\n\nUm die SDT parameter zwischen den Bedingungen zu vergleichen berechnen wir für $d'$ und $c$ den Mittelwert (`mean()`) und die Standardabweichung (`sd()`) in beiden Bedingungen (`speed` und `accuracy`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdt_final |>\n    group_by(____) |>\n    summarise(mean_dprime = ____,\n              sd_dprime = ____,\n              mean_c = ____,\n              sd_c = ____)\n```\n:::\n",
    "supporting": [
      "uebung_5_sdt_parameter_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}